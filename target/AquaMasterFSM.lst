
/Users/chipmc/Documents/Maker/Particle/Projects/AquaMasterFSM/target/AquaMasterFSM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007188  080a0018  080a0018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a71a0  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000160  20000300  080a71a4  00030300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000006ac  20000460  20000460  00040460  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a7304  080a7304  00037304  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a732c  080a732c  0003732c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000b4596  00000000  00000000  00037330  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00010003  00000000  00000000  000eb8c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001419b  00000000  00000000  000fb8c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002108  00000000  00000000  0010fa64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003470  00000000  00000000  00111b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00024fe1  00000000  00000000  00114fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000243a4  00000000  00000000  00139fbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a61e6  00000000  00000000  0015e361  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000c500  00000000  00000000  00204548  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	58 67 0a 08                                         Xg..

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f004 f97b 	bl	80a4328 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f004 f980 	bl	80a433e <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a71a4 	.word	0x080a71a4
 80a004c:	20000460 	.word	0x20000460
 80a0050:	20000460 	.word	0x20000460
 80a0054:	20000b0c 	.word	0x20000b0c
 80a0058:	20000b0c 	.word	0x20000b0c

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 fde7 	bl	80a2c30 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a7164 	.word	0x080a7164
 80a0084:	080a719c 	.word	0x080a719c

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 bf74 	b.w	80a0f74 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f953 	bl	80a0338 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f002 bd8d 	b.w	80a2bb4 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f001 bc7f 	b.w	80a199c <malloc>

080a009e <_ZdlPv>:
 80a009e:	f001 bc85 	b.w	80a19ac <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <_Z16takeMeasurements6String>:
    return 1;
  }
}

int takeMeasurements(String command)
{
 80a00b4:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a00b6:	4904      	ldr	r1, [pc, #16]	; (80a00c8 <_Z16takeMeasurements6String+0x14>)
 80a00b8:	f002 fa03 	bl	80a24c2 <_ZNK6String6equalsEPKc>
  if (command == "1")                                   // Default - enabled
 80a00bc:	b118      	cbz	r0, 80a00c6 <_Z16takeMeasurements6String+0x12>
  {
    state = SENSING_STATE;
 80a00be:	4b03      	ldr	r3, [pc, #12]	; (80a00cc <_Z16takeMeasurements6String+0x18>)
 80a00c0:	2203      	movs	r2, #3
 80a00c2:	701a      	strb	r2, [r3, #0]
    return 1;
 80a00c4:	2001      	movs	r0, #1
  }
  else return 0;                                              // Never get here but if we do, let's be safe and disable
}
 80a00c6:	bd08      	pop	{r3, pc}
 80a00c8:	080a6bf2 	.word	0x080a6bf2
 80a00cc:	200004b3 	.word	0x200004b3

080a00d0 <_Z11watchdogISRv>:
    lastPublish = millis();
  }
}

void watchdogISR()                                        // Will pet the dog ... if petting is allowed
{
 80a00d0:	b508      	push	{r3, lr}
  if (doneEnabled)                                        // the doneEnabled is used for Ubidots and Watering to prevent lockups
 80a00d2:	4b07      	ldr	r3, [pc, #28]	; (80a00f0 <_Z11watchdogISRv+0x20>)
 80a00d4:	781b      	ldrb	r3, [r3, #0]
 80a00d6:	b14b      	cbz	r3, 80a00ec <_Z11watchdogISRv+0x1c>
  {
    digitalWrite(donePin, HIGH);                          // This is all you need to do to pet the dog low to high transition
 80a00d8:	2101      	movs	r1, #1
 80a00da:	2006      	movs	r0, #6
 80a00dc:	f002 fe09 	bl	80a2cf2 <digitalWrite>
    digitalWrite(donePin, LOW);
  }
}
 80a00e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void watchdogISR()                                        // Will pet the dog ... if petting is allowed
{
  if (doneEnabled)                                        // the doneEnabled is used for Ubidots and Watering to prevent lockups
  {
    digitalWrite(donePin, HIGH);                          // This is all you need to do to pet the dog low to high transition
    digitalWrite(donePin, LOW);
 80a00e4:	2100      	movs	r1, #0
 80a00e6:	2006      	movs	r0, #6
 80a00e8:	f002 be03 	b.w	80a2cf2 <digitalWrite>
 80a00ec:	bd08      	pop	{r3, pc}
 80a00ee:	bf00      	nop
 80a00f0:	20000300 	.word	0x20000300

080a00f4 <_ZN11EEPROMClass4readEi.isra.35>:

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
 80a00f4:	f001 ba24 	b.w	80a1540 <HAL_EEPROM_Read>

080a00f8 <_ZN11EEPROMClass5writeEih.isra.36>:
    operator const uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return HAL_EEPROM_Write(index, in), *this;  }
 80a00f8:	f001 ba2a 	b.w	80a1550 <HAL_EEPROM_Write>

080a00fc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.125.constprop.129>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
 80a00fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a00fe:	4605      	mov	r5, r0
 80a0100:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80a0104:	4323      	orrs	r3, r4
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0106:	f88d 3000 	strb.w	r3, [sp]
 80a010a:	233c      	movs	r3, #60	; 0x3c
 80a010c:	f001 fe1c 	bl	80a1d48 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, 60, flags1, flags2);
    }
 80a0110:	4628      	mov	r0, r5
 80a0112:	b003      	add	sp, #12
 80a0114:	bd30      	pop	{r4, r5, pc}
	...

080a0118 <_Z15getMeasurementsv>:
  Particle.publish("AquaMaster_hook", data , PRIVATE);

}

int getMeasurements()             // Here we get the soil moisture and characterize it to see if watering is needed
{
 80a0118:	b510      	push	{r4, lr}
 80a011a:	b08c      	sub	sp, #48	; 0x30
  // First get the weather forecast
  //Particle.publish("weatherU_hook");                    // Get the weather forcast
  ///publishTimeStamp = millis();                         // So we can know how long to wait
  forecastDay = Time.day();                               // Have to fake out the Weather webhook until we replace it
 80a011c:	f002 faca 	bl	80a26b4 <_ZN9TimeClass3dayEv>
 80a0120:	4b3b      	ldr	r3, [pc, #236]	; (80a0210 <_Z15getMeasurementsv+0xf8>)
  expectedRainfallToday = 0;                              // So we know when we get an updated forecast
 80a0122:	2200      	movs	r2, #0
int getMeasurements()             // Here we get the soil moisture and characterize it to see if watering is needed
{
  // First get the weather forecast
  //Particle.publish("weatherU_hook");                    // Get the weather forcast
  ///publishTimeStamp = millis();                         // So we can know how long to wait
  forecastDay = Time.day();                               // Have to fake out the Weather webhook until we replace it
 80a0124:	6018      	str	r0, [r3, #0]
  expectedRainfallToday = 0;                              // So we know when we get an updated forecast
 80a0126:	4b3b      	ldr	r3, [pc, #236]	; (80a0214 <_Z15getMeasurementsv+0xfc>)
  // Then get the WiFi Signal Strength
  int wifiRSSI = WiFi.RSSI();
 80a0128:	493b      	ldr	r1, [pc, #236]	; (80a0218 <_Z15getMeasurementsv+0x100>)
 80a012a:	a803      	add	r0, sp, #12
{
  // First get the weather forecast
  //Particle.publish("weatherU_hook");                    // Get the weather forcast
  ///publishTimeStamp = millis();                         // So we can know how long to wait
  forecastDay = Time.day();                               // Have to fake out the Weather webhook until we replace it
  expectedRainfallToday = 0;                              // So we know when we get an updated forecast
 80a012c:	601a      	str	r2, [r3, #0]
  // Then get the WiFi Signal Strength
  int wifiRSSI = WiFi.RSSI();
 80a012e:	f002 fcd3 	bl	80a2ad8 <_ZN5spark9WiFiClass4RSSIEv>
 80a0132:	a803      	add	r0, sp, #12
 80a0134:	f002 fcae 	bl	80a2a94 <_ZNK10WiFiSignalcvaEv>
  if (wifiRSSI > 0) {
 80a0138:	1e04      	subs	r4, r0, #0
 80a013a:	dd04      	ble.n	80a0146 <_Z15getMeasurementsv+0x2e>
      sprintf(SignalString, "Error");
 80a013c:	4937      	ldr	r1, [pc, #220]	; (80a021c <_Z15getMeasurementsv+0x104>)
 80a013e:	4838      	ldr	r0, [pc, #224]	; (80a0220 <_Z15getMeasurementsv+0x108>)
 80a0140:	f004 f938 	bl	80a43b4 <strcpy>
 80a0144:	e010      	b.n	80a0168 <_Z15getMeasurementsv+0x50>
  }else {
      int strength = map(wifiRSSI, -127, -1, 0, 5);
 80a0146:	2305      	movs	r3, #5
 80a0148:	9300      	str	r3, [sp, #0]
 80a014a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a014e:	2300      	movs	r3, #0
 80a0150:	f06f 017e 	mvn.w	r1, #126	; 0x7e
 80a0154:	f001 fc6a 	bl	80a1a2c <_Z3mapiiiii>
      sprintf(SignalString, "%s: %d", levels[strength], wifiRSSI);
 80a0158:	4a32      	ldr	r2, [pc, #200]	; (80a0224 <_Z15getMeasurementsv+0x10c>)
 80a015a:	4623      	mov	r3, r4
 80a015c:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 80a0160:	4931      	ldr	r1, [pc, #196]	; (80a0228 <_Z15getMeasurementsv+0x110>)
 80a0162:	482f      	ldr	r0, [pc, #188]	; (80a0220 <_Z15getMeasurementsv+0x108>)
 80a0164:	f001 fc32 	bl	80a19cc <sprintf>
  }
  // Need to take one measurment to "clear" the old values
  sensor.getTemperature();
 80a0168:	4830      	ldr	r0, [pc, #192]	; (80a022c <_Z15getMeasurementsv+0x114>)
 80a016a:	f001 f974 	bl	80a1456 <_ZN21I2CSoilMoistureSensor14getTemperatureEv>
  while(sensor.isBusy());
 80a016e:	482f      	ldr	r0, [pc, #188]	; (80a022c <_Z15getMeasurementsv+0x114>)
 80a0170:	f001 f99a 	bl	80a14a8 <_ZN21I2CSoilMoistureSensor6isBusyEv>
 80a0174:	2800      	cmp	r0, #0
 80a0176:	d1fa      	bne.n	80a016e <_Z15getMeasurementsv+0x56>
  // Then take the Soil Temp
  float tempTemp = (sensor.getTemperature()/(float)10);
 80a0178:	482c      	ldr	r0, [pc, #176]	; (80a022c <_Z15getMeasurementsv+0x114>)
 80a017a:	f001 f96c 	bl	80a1456 <_ZN21I2CSoilMoistureSensor14getTemperatureEv>
 80a017e:	f003 fd49 	bl	80a3c14 <__aeabi_i2f>
 80a0182:	492b      	ldr	r1, [pc, #172]	; (80a0230 <_Z15getMeasurementsv+0x118>)
 80a0184:	f003 fe4e 	bl	80a3e24 <__aeabi_fdiv>
 80a0188:	4604      	mov	r4, r0
  soilTemp = int(tempTemp);    // Get the Soil temperature
 80a018a:	f003 ff5d 	bl	80a4048 <__aeabi_f2iz>
 80a018e:	4b29      	ldr	r3, [pc, #164]	; (80a0234 <_Z15getMeasurementsv+0x11c>)
  int soilTempF = int(((float)9*tempTemp)/(float)5 + 32);
  snprintf(Temperature, sizeof(Temperature), "%iF", soilTempF);
 80a0190:	4929      	ldr	r1, [pc, #164]	; (80a0238 <_Z15getMeasurementsv+0x120>)
  // Need to take one measurment to "clear" the old values
  sensor.getTemperature();
  while(sensor.isBusy());
  // Then take the Soil Temp
  float tempTemp = (sensor.getTemperature()/(float)10);
  soilTemp = int(tempTemp);    // Get the Soil temperature
 80a0192:	6018      	str	r0, [r3, #0]
  int soilTempF = int(((float)9*tempTemp)/(float)5 + 32);
  snprintf(Temperature, sizeof(Temperature), "%iF", soilTempF);
 80a0194:	4620      	mov	r0, r4
 80a0196:	f003 fd91 	bl	80a3cbc <__aeabi_fmul>
 80a019a:	4928      	ldr	r1, [pc, #160]	; (80a023c <_Z15getMeasurementsv+0x124>)
 80a019c:	f003 fe42 	bl	80a3e24 <__aeabi_fdiv>
 80a01a0:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 80a01a4:	f003 fc82 	bl	80a3aac <__addsf3>
 80a01a8:	f003 ff4e 	bl	80a4048 <__aeabi_f2iz>
 80a01ac:	4a24      	ldr	r2, [pc, #144]	; (80a0240 <_Z15getMeasurementsv+0x128>)
 80a01ae:	4603      	mov	r3, r0
 80a01b0:	2108      	movs	r1, #8
 80a01b2:	4824      	ldr	r0, [pc, #144]	; (80a0244 <_Z15getMeasurementsv+0x12c>)
 80a01b4:	f001 fc22 	bl	80a19fc <snprintf>
  // Wait unti lthe sensor is ready, then get the soil moisture
  while(sensor.isBusy());             // Wait to make sure sensor is ready.
 80a01b8:	481c      	ldr	r0, [pc, #112]	; (80a022c <_Z15getMeasurementsv+0x114>)
 80a01ba:	f001 f975 	bl	80a14a8 <_ZN21I2CSoilMoistureSensor6isBusyEv>
 80a01be:	2800      	cmp	r0, #0
 80a01c0:	d1fa      	bne.n	80a01b8 <_Z15getMeasurementsv+0xa0>
  capValue = sensor.getCapacitance();                     // capValue is typically between 300 and 700
 80a01c2:	481a      	ldr	r0, [pc, #104]	; (80a022c <_Z15getMeasurementsv+0x114>)
 80a01c4:	f001 f91c 	bl	80a1400 <_ZN21I2CSoilMoistureSensor14getCapacitanceEv>
  if ((capValue <= 320) || (capValue >= 550))
 80a01c8:	f46f 72a0 	mvn.w	r2, #320	; 0x140
  soilTemp = int(tempTemp);    // Get the Soil temperature
  int soilTempF = int(((float)9*tempTemp)/(float)5 + 32);
  snprintf(Temperature, sizeof(Temperature), "%iF", soilTempF);
  // Wait unti lthe sensor is ready, then get the soil moisture
  while(sensor.isBusy());             // Wait to make sure sensor is ready.
  capValue = sensor.getCapacitance();                     // capValue is typically between 300 and 700
 80a01cc:	4c1e      	ldr	r4, [pc, #120]	; (80a0248 <_Z15getMeasurementsv+0x130>)
  if ((capValue <= 320) || (capValue >= 550))
 80a01ce:	1882      	adds	r2, r0, r2
 80a01d0:	2ae4      	cmp	r2, #228	; 0xe4
  soilTemp = int(tempTemp);    // Get the Soil temperature
  int soilTempF = int(((float)9*tempTemp)/(float)5 + 32);
  snprintf(Temperature, sizeof(Temperature), "%iF", soilTempF);
  // Wait unti lthe sensor is ready, then get the soil moisture
  while(sensor.isBusy());             // Wait to make sure sensor is ready.
  capValue = sensor.getCapacitance();                     // capValue is typically between 300 and 700
 80a01d2:	4603      	mov	r3, r0
 80a01d4:	6020      	str	r0, [r4, #0]
  if ((capValue <= 320) || (capValue >= 550))
 80a01d6:	d904      	bls.n	80a01e2 <_Z15getMeasurementsv+0xca>
  {
    snprintf(Moisture, sizeof(Moisture), "Out of Range: %d", capValue);
 80a01d8:	4a1c      	ldr	r2, [pc, #112]	; (80a024c <_Z15getMeasurementsv+0x134>)
 80a01da:	2114      	movs	r1, #20
 80a01dc:	481c      	ldr	r0, [pc, #112]	; (80a0250 <_Z15getMeasurementsv+0x138>)
 80a01de:	f001 fc0d 	bl	80a19fc <snprintf>
    //return 0;   // Quick check for a valid value
  }
  int strength = map(capValue, 350, 550, 0, 5);           // Map - these values to cases that will use words that are easier to understand
 80a01e2:	2305      	movs	r3, #5
 80a01e4:	9300      	str	r3, [sp, #0]
 80a01e6:	f240 2226 	movw	r2, #550	; 0x226
 80a01ea:	2300      	movs	r3, #0
 80a01ec:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80a01f0:	6820      	ldr	r0, [r4, #0]
 80a01f2:	f001 fc1b 	bl	80a1a2c <_Z3mapiiiii>
  snprintf(Moisture, sizeof(Moisture), "%s: %d", capDescription[strength], capValue);
 80a01f6:	6823      	ldr	r3, [r4, #0]
 80a01f8:	4a0b      	ldr	r2, [pc, #44]	; (80a0228 <_Z15getMeasurementsv+0x110>)
 80a01fa:	9300      	str	r3, [sp, #0]
 80a01fc:	4b15      	ldr	r3, [pc, #84]	; (80a0254 <_Z15getMeasurementsv+0x13c>)
 80a01fe:	2114      	movs	r1, #20
 80a0200:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80a0204:	4812      	ldr	r0, [pc, #72]	; (80a0250 <_Z15getMeasurementsv+0x138>)
 80a0206:	f001 fbf9 	bl	80a19fc <snprintf>
  return 1;
}
 80a020a:	2001      	movs	r0, #1
 80a020c:	b00c      	add	sp, #48	; 0x30
 80a020e:	bd10      	pop	{r4, pc}
 80a0210:	200004b4 	.word	0x200004b4
 80a0214:	200004f4 	.word	0x200004f4
 80a0218:	200009d8 	.word	0x200009d8
 80a021c:	080a676c 	.word	0x080a676c
 80a0220:	200004f8 	.word	0x200004f8
 80a0224:	20000330 	.word	0x20000330
 80a0228:	080a6772 	.word	0x080a6772
 80a022c:	20000520 	.word	0x20000520
 80a0230:	41200000 	.word	0x41200000
 80a0234:	200004d0 	.word	0x200004d0
 80a0238:	41100000 	.word	0x41100000
 80a023c:	40a00000 	.word	0x40a00000
 80a0240:	080a6779 	.word	0x080a6779
 80a0244:	20000489 	.word	0x20000489
 80a0248:	200004d4 	.word	0x200004d4
 80a024c:	080a677d 	.word	0x080a677d
 80a0250:	20000497 	.word	0x20000497
 80a0254:	20000358 	.word	0x20000358

080a0258 <_Z20meterParticlePublishv>:
  return 1;
}


bool meterParticlePublish(void)
{
 80a0258:	b508      	push	{r3, lr}
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a025a:	f001 f959 	bl	80a1510 <HAL_Timer_Get_Milli_Seconds>
  if(millis() - lastPublish >= publishFrequency) return 1;
 80a025e:	4b05      	ldr	r3, [pc, #20]	; (80a0274 <_Z20meterParticlePublishv+0x1c>)
 80a0260:	681b      	ldr	r3, [r3, #0]
 80a0262:	1ac0      	subs	r0, r0, r3
 80a0264:	4b04      	ldr	r3, [pc, #16]	; (80a0278 <_Z20meterParticlePublishv+0x20>)
 80a0266:	681b      	ldr	r3, [r3, #0]
  else return 0;
}
 80a0268:	4298      	cmp	r0, r3
 80a026a:	bf34      	ite	cc
 80a026c:	2000      	movcc	r0, #0
 80a026e:	2001      	movcs	r0, #1
 80a0270:	bd08      	pop	{r3, pc}
 80a0272:	bf00      	nop
 80a0274:	2000050c 	.word	0x2000050c
 80a0278:	2000031c 	.word	0x2000031c

080a027c <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.105>:
            spark_process();
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
 80a027c:	b508      	push	{r3, lr}
  rainThreshold = tempRain;
  EEPROM.put(rainThresholdAddr,rainThreshold);              // Store the new value in EEPROM
  snprintf(data, sizeof(data), "Rain threshold set to %1.2f",rainThreshold);
  sprintf(RainThreshold, "%1.2f\"",rainThreshold);
  if (verboseMode) {
    waitUntil(meterParticlePublish);
 80a027e:	f7ff ffeb 	bl	80a0258 <_Z20meterParticlePublishv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a0282:	b118      	cbz	r0, 80a028c <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.105+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
 80a0284:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a0288:	f7ff bfe6 	b.w	80a0258 <_Z20meterParticlePublishv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
 80a028c:	f001 fafe 	bl	80a188c <spark_process>
 80a0290:	e7f5      	b.n	80a027e <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.105+0x2>

080a0292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0292:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a0294:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0296:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a0298:	b17c      	cbz	r4, 80a02ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a029a:	6863      	ldr	r3, [r4, #4]
 80a029c:	3b01      	subs	r3, #1
 80a029e:	6063      	str	r3, [r4, #4]
 80a02a0:	b95b      	cbnz	r3, 80a02ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a02a2:	6823      	ldr	r3, [r4, #0]
 80a02a4:	4620      	mov	r0, r4
 80a02a6:	689b      	ldr	r3, [r3, #8]
 80a02a8:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a02aa:	68a3      	ldr	r3, [r4, #8]
 80a02ac:	3b01      	subs	r3, #1
 80a02ae:	60a3      	str	r3, [r4, #8]
 80a02b0:	b91b      	cbnz	r3, 80a02ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a02b2:	6823      	ldr	r3, [r4, #0]
 80a02b4:	4620      	mov	r0, r4
 80a02b6:	68db      	ldr	r3, [r3, #12]
 80a02b8:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a02ba:	4628      	mov	r0, r5
 80a02bc:	bd38      	pop	{r3, r4, r5, pc}
	...

080a02c0 <_Z13sendToUbidotsv>:
  }
}


void sendToUbidots()                                      // Houly update to Ubidots for serial data logging and analysis
{
 80a02c0:	b510      	push	{r4, lr}
  digitalWrite(donePin, HIGH);                            // We will pet the dog now so we have the full interval to water
 80a02c2:	2101      	movs	r1, #1
  }
}


void sendToUbidots()                                      // Houly update to Ubidots for serial data logging and analysis
{
 80a02c4:	b0c6      	sub	sp, #280	; 0x118
  digitalWrite(donePin, HIGH);                            // We will pet the dog now so we have the full interval to water
 80a02c6:	2006      	movs	r0, #6
 80a02c8:	f002 fd13 	bl	80a2cf2 <digitalWrite>
  digitalWrite(donePin, LOW);                             // We set the delay resistor to 50k or 7 mins so that is the longest watering duration
 80a02cc:	2100      	movs	r1, #0
 80a02ce:	2006      	movs	r0, #6
 80a02d0:	f002 fd0f 	bl	80a2cf2 <digitalWrite>
  // Uncomment this next line only after you are sure your watchdog timer interval is greater than the Ubidots response period (about 5 secs)
  doneEnabled = false;                                    // Turns off watchdog petting - only a successful response will re-enable
 80a02d4:	4b10      	ldr	r3, [pc, #64]	; (80a0318 <_Z13sendToUbidotsv+0x58>)
 80a02d6:	2400      	movs	r4, #0
 80a02d8:	701c      	strb	r4, [r3, #0]
  char data[256];                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"Moisture\":%i, \"Watering\":%i, \"key1\":\"%s\", \"SoilTemp\":%i}",capValue, wateringMinutes, wateringContext, soilTemp);
 80a02da:	4b10      	ldr	r3, [pc, #64]	; (80a031c <_Z13sendToUbidotsv+0x5c>)
 80a02dc:	4a10      	ldr	r2, [pc, #64]	; (80a0320 <_Z13sendToUbidotsv+0x60>)
 80a02de:	681b      	ldr	r3, [r3, #0]
 80a02e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80a02e4:	9302      	str	r3, [sp, #8]
 80a02e6:	4b0f      	ldr	r3, [pc, #60]	; (80a0324 <_Z13sendToUbidotsv+0x64>)
 80a02e8:	a806      	add	r0, sp, #24
 80a02ea:	9301      	str	r3, [sp, #4]
 80a02ec:	4b0e      	ldr	r3, [pc, #56]	; (80a0328 <_Z13sendToUbidotsv+0x68>)
 80a02ee:	681b      	ldr	r3, [r3, #0]
 80a02f0:	9300      	str	r3, [sp, #0]
 80a02f2:	4b0e      	ldr	r3, [pc, #56]	; (80a032c <_Z13sendToUbidotsv+0x6c>)
 80a02f4:	681b      	ldr	r3, [r3, #0]
 80a02f6:	f001 fb81 	bl	80a19fc <snprintf>
 80a02fa:	4b0d      	ldr	r3, [pc, #52]	; (80a0330 <_Z13sendToUbidotsv+0x70>)
  Particle.publish("AquaMaster_hook", data , PRIVATE);
 80a02fc:	aa06      	add	r2, sp, #24
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 80a02fe:	781b      	ldrb	r3, [r3, #0]
 80a0300:	490c      	ldr	r1, [pc, #48]	; (80a0334 <_Z13sendToUbidotsv+0x74>)
 80a0302:	a804      	add	r0, sp, #16
 80a0304:	f88d 4000 	strb.w	r4, [sp]
 80a0308:	f7ff fef8 	bl	80a00fc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.125.constprop.129>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a030c:	a805      	add	r0, sp, #20
 80a030e:	f7ff ffc0 	bl	80a0292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

}
 80a0312:	b046      	add	sp, #280	; 0x118
 80a0314:	bd10      	pop	{r4, pc}
 80a0316:	bf00      	nop
 80a0318:	20000300 	.word	0x20000300
 80a031c:	200004d0 	.word	0x200004d0
 80a0320:	080a678e 	.word	0x080a678e
 80a0324:	2000046e 	.word	0x2000046e
 80a0328:	200004ec 	.word	0x200004ec
 80a032c:	200004d4 	.word	0x200004d4
 80a0330:	20000487 	.word	0x20000487
 80a0334:	080a67c9 	.word	0x080a67c9

080a0338 <loop>:
  }
  lastPublish = millis();
}


void loop() {
 80a0338:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  switch(state) {
 80a033c:	4c83      	ldr	r4, [pc, #524]	; (80a054c <loop+0x214>)
 80a033e:	7823      	ldrb	r3, [r4, #0]
 80a0340:	3b01      	subs	r3, #1
 80a0342:	2b06      	cmp	r3, #6
 80a0344:	f200 82fa 	bhi.w	80a093c <loop+0x604>
 80a0348:	e8df f013 	tbh	[pc, r3, lsl #1]
 80a034c:	0007021b 	.word	0x0007021b
 80a0350:	00930039 	.word	0x00930039
 80a0354:	01860142 	.word	0x01860142
 80a0358:	01cd      	.short	0x01cd
    case IDLE_STATE:
      if (Time.day() != currentDay)
 80a035a:	f002 f9ab 	bl	80a26b4 <_ZN9TimeClass3dayEv>
 80a035e:	4b7c      	ldr	r3, [pc, #496]	; (80a0550 <loop+0x218>)
 80a0360:	781a      	ldrb	r2, [r3, #0]
 80a0362:	461d      	mov	r5, r3
 80a0364:	4290      	cmp	r0, r2
 80a0366:	d009      	beq.n	80a037c <loop+0x44>
      {
        resetCount = 0;
 80a0368:	4e7a      	ldr	r6, [pc, #488]	; (80a0554 <loop+0x21c>)
 80a036a:	2300      	movs	r3, #0
 80a036c:	7033      	strb	r3, [r6, #0]
        EEPROM.write(resetCountAddr,resetCount);    // If so, store incremented number - watchdog must have done This
 80a036e:	f002 fcd9 	bl	80a2d24 <_Z21__fetch_global_EEPROMv>
 80a0372:	4b79      	ldr	r3, [pc, #484]	; (80a0558 <loop+0x220>)
 80a0374:	7831      	ldrb	r1, [r6, #0]
 80a0376:	6818      	ldr	r0, [r3, #0]
 80a0378:	f7ff febe 	bl	80a00f8 <_ZN11EEPROMClass5writeEih.isra.36>
      }
      if (Time.hour() != currentHour)                       // Spring into action each hour on the hour
 80a037c:	f002 f990 	bl	80a26a0 <_ZN9TimeClass4hourEv>
 80a0380:	4e76      	ldr	r6, [pc, #472]	; (80a055c <loop+0x224>)
 80a0382:	7833      	ldrb	r3, [r6, #0]
 80a0384:	4298      	cmp	r0, r3
 80a0386:	f000 82d9 	beq.w	80a093c <loop+0x604>
      {
        currentHour = Time.hour();                          // Set the new current period
 80a038a:	f002 f989 	bl	80a26a0 <_ZN9TimeClass4hourEv>
 80a038e:	7030      	strb	r0, [r6, #0]
        currentDay = Time.day();                              // Sets the current Day
 80a0390:	f002 f990 	bl	80a26b4 <_ZN9TimeClass3dayEv>
 80a0394:	7028      	strb	r0, [r5, #0]
        currentMonth = Time.month();
 80a0396:	f002 f997 	bl	80a26c8 <_ZN9TimeClass5monthEv>
 80a039a:	4b71      	ldr	r3, [pc, #452]	; (80a0560 <loop+0x228>)
 80a039c:	7018      	strb	r0, [r3, #0]
        state = SENSING_STATE;
 80a039e:	2303      	movs	r3, #3
 80a03a0:	7023      	strb	r3, [r4, #0]
        if (verboseMode) {
 80a03a2:	4b70      	ldr	r3, [pc, #448]	; (80a0564 <loop+0x22c>)
 80a03a4:	781b      	ldrb	r3, [r3, #0]
 80a03a6:	2b00      	cmp	r3, #0
 80a03a8:	f000 82c8 	beq.w	80a093c <loop+0x604>
          waitUntil(meterParticlePublish);
 80a03ac:	f7ff ff66 	bl	80a027c <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.105>
 80a03b0:	4b6d      	ldr	r3, [pc, #436]	; (80a0568 <loop+0x230>)
          Particle.publish("State","Sensing", PRIVATE);
 80a03b2:	2200      	movs	r2, #0
 80a03b4:	781b      	ldrb	r3, [r3, #0]
 80a03b6:	f88d 2000 	strb.w	r2, [sp]
 80a03ba:	4a6c      	ldr	r2, [pc, #432]	; (80a056c <loop+0x234>)
 80a03bc:	e0b9      	b.n	80a0532 <loop+0x1fa>
        }
      }
      break;

    case SENSING_STATE:
      if (!getMeasurements())                               // Test soil Moisture - if valid then proceed
 80a03be:	f7ff feab 	bl	80a0118 <_Z15getMeasurementsv>
 80a03c2:	4d68      	ldr	r5, [pc, #416]	; (80a0564 <loop+0x22c>)
 80a03c4:	4606      	mov	r6, r0
 80a03c6:	b968      	cbnz	r0, 80a03e4 <loop+0xac>
      {
        state = ERROR_STATE;
 80a03c8:	2301      	movs	r3, #1
 80a03ca:	7023      	strb	r3, [r4, #0]
        if (verboseMode) {
 80a03cc:	782b      	ldrb	r3, [r5, #0]
 80a03ce:	2b00      	cmp	r3, #0
 80a03d0:	f000 82b4 	beq.w	80a093c <loop+0x604>
          waitUntil(meterParticlePublish);
 80a03d4:	f7ff ff52 	bl	80a027c <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.105>
 80a03d8:	4b63      	ldr	r3, [pc, #396]	; (80a0568 <loop+0x230>)
          Particle.publish("State","Error - Measurements Failed", PRIVATE);
 80a03da:	4a65      	ldr	r2, [pc, #404]	; (80a0570 <loop+0x238>)
 80a03dc:	781b      	ldrb	r3, [r3, #0]
 80a03de:	f88d 6000 	strb.w	r6, [sp]
 80a03e2:	e0a6      	b.n	80a0532 <loop+0x1fa>
          lastPublish = millis();
        }
        break;
      }
      else if((strncmp(Moisture,"Wet",3) == 0) || (strncmp(Moisture,"Very Wet",8) == 0) || (strncmp(Moisture,"Waterlogged",11) == 0))
 80a03e4:	2203      	movs	r2, #3
 80a03e6:	4963      	ldr	r1, [pc, #396]	; (80a0574 <loop+0x23c>)
 80a03e8:	4863      	ldr	r0, [pc, #396]	; (80a0578 <loop+0x240>)
 80a03ea:	f004 f80e 	bl	80a440a <strncmp>
 80a03ee:	b158      	cbz	r0, 80a0408 <loop+0xd0>
 80a03f0:	2208      	movs	r2, #8
 80a03f2:	4962      	ldr	r1, [pc, #392]	; (80a057c <loop+0x244>)
 80a03f4:	4860      	ldr	r0, [pc, #384]	; (80a0578 <loop+0x240>)
 80a03f6:	f004 f808 	bl	80a440a <strncmp>
 80a03fa:	b128      	cbz	r0, 80a0408 <loop+0xd0>
 80a03fc:	220b      	movs	r2, #11
 80a03fe:	4960      	ldr	r1, [pc, #384]	; (80a0580 <loop+0x248>)
 80a0400:	485d      	ldr	r0, [pc, #372]	; (80a0578 <loop+0x240>)
 80a0402:	f004 f802 	bl	80a440a <strncmp>
 80a0406:	b9e0      	cbnz	r0, 80a0442 <loop+0x10a>
      {
        strcpy(wateringContext,"Not Needed");
 80a0408:	495e      	ldr	r1, [pc, #376]	; (80a0584 <loop+0x24c>)
 80a040a:	485f      	ldr	r0, [pc, #380]	; (80a0588 <loop+0x250>)
 80a040c:	f003 ffd2 	bl	80a43b4 <strcpy>
        wateringMinutes = 0;
 80a0410:	4b5e      	ldr	r3, [pc, #376]	; (80a058c <loop+0x254>)
 80a0412:	2600      	movs	r6, #0
 80a0414:	601e      	str	r6, [r3, #0]
        if (verboseMode) {
 80a0416:	782b      	ldrb	r3, [r5, #0]
 80a0418:	b18b      	cbz	r3, 80a043e <loop+0x106>
          waitUntil(meterParticlePublish);
 80a041a:	f7ff ff2f 	bl	80a027c <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.105>
 80a041e:	4b52      	ldr	r3, [pc, #328]	; (80a0568 <loop+0x230>)
          Particle.publish("State","Reporting - Too Wet", PRIVATE);
 80a0420:	4a5b      	ldr	r2, [pc, #364]	; (80a0590 <loop+0x258>)
 80a0422:	781b      	ldrb	r3, [r3, #0]
 80a0424:	495b      	ldr	r1, [pc, #364]	; (80a0594 <loop+0x25c>)
 80a0426:	a802      	add	r0, sp, #8
 80a0428:	f88d 6000 	strb.w	r6, [sp]
 80a042c:	f7ff fe66 	bl	80a00fc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.125.constprop.129>
 80a0430:	a803      	add	r0, sp, #12
 80a0432:	f7ff ff2e 	bl	80a0292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0436:	f001 f86b 	bl	80a1510 <HAL_Timer_Get_Milli_Seconds>
          lastPublish = millis();
 80a043a:	4b57      	ldr	r3, [pc, #348]	; (80a0598 <loop+0x260>)
 80a043c:	6018      	str	r0, [r3, #0]
        }
        state = REPORTING_STATE;
 80a043e:	2307      	movs	r3, #7
 80a0440:	e015      	b.n	80a046e <loop+0x136>
      }
      else
      {
        if (verboseMode) {
 80a0442:	782b      	ldrb	r3, [r5, #0]
 80a0444:	b193      	cbz	r3, 80a046c <loop+0x134>
          waitUntil(meterParticlePublish);
 80a0446:	f7ff ff19 	bl	80a027c <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.105>
 80a044a:	4b47      	ldr	r3, [pc, #284]	; (80a0568 <loop+0x230>)
          Particle.publish("State","Scheduling", PRIVATE);
 80a044c:	2200      	movs	r2, #0
 80a044e:	781b      	ldrb	r3, [r3, #0]
 80a0450:	4950      	ldr	r1, [pc, #320]	; (80a0594 <loop+0x25c>)
 80a0452:	f88d 2000 	strb.w	r2, [sp]
 80a0456:	a802      	add	r0, sp, #8
 80a0458:	4a50      	ldr	r2, [pc, #320]	; (80a059c <loop+0x264>)
 80a045a:	f7ff fe4f 	bl	80a00fc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.125.constprop.129>
 80a045e:	a803      	add	r0, sp, #12
 80a0460:	f7ff ff17 	bl	80a0292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0464:	f001 f854 	bl	80a1510 <HAL_Timer_Get_Milli_Seconds>
          lastPublish = millis();
 80a0468:	4b4b      	ldr	r3, [pc, #300]	; (80a0598 <loop+0x260>)
 80a046a:	6018      	str	r0, [r3, #0]
        }
        state = SCHEDULING_STATE;
 80a046c:	2304      	movs	r3, #4
 80a046e:	7023      	strb	r3, [r4, #0]
 80a0470:	e264      	b.n	80a093c <loop+0x604>
      }
      break;

    case SCHEDULING_STATE:
      waitUntil(meterParticlePublish);
 80a0472:	f7ff ff03 	bl	80a027c <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.105>
      state = FORECASTING_STATE;
 80a0476:	2305      	movs	r3, #5
 80a0478:	7023      	strb	r3, [r4, #0]
      if (currentHour < startWaterHour || currentHour > stopWaterHour)  // Outside watering window
 80a047a:	4a49      	ldr	r2, [pc, #292]	; (80a05a0 <loop+0x268>)
 80a047c:	4b37      	ldr	r3, [pc, #220]	; (80a055c <loop+0x224>)
 80a047e:	7812      	ldrb	r2, [r2, #0]
 80a0480:	781b      	ldrb	r3, [r3, #0]
 80a0482:	4d38      	ldr	r5, [pc, #224]	; (80a0564 <loop+0x22c>)
 80a0484:	4293      	cmp	r3, r2
 80a0486:	4e41      	ldr	r6, [pc, #260]	; (80a058c <loop+0x254>)
 80a0488:	d303      	bcc.n	80a0492 <loop+0x15a>
 80a048a:	4946      	ldr	r1, [pc, #280]	; (80a05a4 <loop+0x26c>)
 80a048c:	7809      	ldrb	r1, [r1, #0]
 80a048e:	4299      	cmp	r1, r3
 80a0490:	d217      	bcs.n	80a04c2 <loop+0x18a>
      {
        strcpy(wateringContext,"Not Time");
 80a0492:	4945      	ldr	r1, [pc, #276]	; (80a05a8 <loop+0x270>)
 80a0494:	483c      	ldr	r0, [pc, #240]	; (80a0588 <loop+0x250>)
 80a0496:	f003 ff8d 	bl	80a43b4 <strcpy>
        if(verboseMode) Particle.publish("State","Reporting - Not Time", PRIVATE);
 80a049a:	782b      	ldrb	r3, [r5, #0]
 80a049c:	b163      	cbz	r3, 80a04b8 <loop+0x180>
 80a049e:	4b32      	ldr	r3, [pc, #200]	; (80a0568 <loop+0x230>)
 80a04a0:	2200      	movs	r2, #0
 80a04a2:	781b      	ldrb	r3, [r3, #0]
 80a04a4:	f88d 2000 	strb.w	r2, [sp]
 80a04a8:	4a40      	ldr	r2, [pc, #256]	; (80a05ac <loop+0x274>)
 80a04aa:	a802      	add	r0, sp, #8
 80a04ac:	4939      	ldr	r1, [pc, #228]	; (80a0594 <loop+0x25c>)
 80a04ae:	f7ff fe25 	bl	80a00fc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.125.constprop.129>
 80a04b2:	a803      	add	r0, sp, #12
 80a04b4:	f7ff feed 	bl	80a0292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        wateringMinutes = 0;
 80a04b8:	2300      	movs	r3, #0
 80a04ba:	6033      	str	r3, [r6, #0]
        state = REPORTING_STATE;
 80a04bc:	2307      	movs	r3, #7
 80a04be:	7023      	strb	r3, [r4, #0]
 80a04c0:	e02c      	b.n	80a051c <loop+0x1e4>
      }
      else if (currentHour == lastWateredHour && currentDay == lastWateredDay)  // protects against a reboot causing rewatering in same period
 80a04c2:	493b      	ldr	r1, [pc, #236]	; (80a05b0 <loop+0x278>)
 80a04c4:	7809      	ldrb	r1, [r1, #0]
 80a04c6:	4299      	cmp	r1, r3
 80a04c8:	d113      	bne.n	80a04f2 <loop+0x1ba>
 80a04ca:	4921      	ldr	r1, [pc, #132]	; (80a0550 <loop+0x218>)
 80a04cc:	7808      	ldrb	r0, [r1, #0]
 80a04ce:	4939      	ldr	r1, [pc, #228]	; (80a05b4 <loop+0x27c>)
 80a04d0:	7809      	ldrb	r1, [r1, #0]
 80a04d2:	4288      	cmp	r0, r1
 80a04d4:	d10d      	bne.n	80a04f2 <loop+0x1ba>
      {
        strcpy(wateringContext,"Already Watered This Period");
 80a04d6:	4938      	ldr	r1, [pc, #224]	; (80a05b8 <loop+0x280>)
 80a04d8:	482b      	ldr	r0, [pc, #172]	; (80a0588 <loop+0x250>)
 80a04da:	f003 ff6b 	bl	80a43b4 <strcpy>
        if(verboseMode) Particle.publish("State","Reporting - Already Watered", PRIVATE);
 80a04de:	782b      	ldrb	r3, [r5, #0]
 80a04e0:	2b00      	cmp	r3, #0
 80a04e2:	d0e9      	beq.n	80a04b8 <loop+0x180>
 80a04e4:	4b20      	ldr	r3, [pc, #128]	; (80a0568 <loop+0x230>)
 80a04e6:	2200      	movs	r2, #0
 80a04e8:	781b      	ldrb	r3, [r3, #0]
 80a04ea:	f88d 2000 	strb.w	r2, [sp]
 80a04ee:	4a33      	ldr	r2, [pc, #204]	; (80a05bc <loop+0x284>)
 80a04f0:	e7db      	b.n	80a04aa <loop+0x172>
        wateringMinutes = 0;
        state = REPORTING_STATE;
      }
      else if (!waterEnabled) // Check to ensure watering is Enabled
 80a04f2:	4933      	ldr	r1, [pc, #204]	; (80a05c0 <loop+0x288>)
 80a04f4:	780f      	ldrb	r7, [r1, #0]
 80a04f6:	b967      	cbnz	r7, 80a0512 <loop+0x1da>
      {
        strcpy(wateringContext,"Not Enabled");
 80a04f8:	4932      	ldr	r1, [pc, #200]	; (80a05c4 <loop+0x28c>)
 80a04fa:	4823      	ldr	r0, [pc, #140]	; (80a0588 <loop+0x250>)
 80a04fc:	f003 ff5a 	bl	80a43b4 <strcpy>
        if(verboseMode) Particle.publish("State","Reporting - Not Enabled", PRIVATE);
 80a0500:	782b      	ldrb	r3, [r5, #0]
 80a0502:	2b00      	cmp	r3, #0
 80a0504:	d0d8      	beq.n	80a04b8 <loop+0x180>
 80a0506:	4b18      	ldr	r3, [pc, #96]	; (80a0568 <loop+0x230>)
 80a0508:	4a2f      	ldr	r2, [pc, #188]	; (80a05c8 <loop+0x290>)
 80a050a:	781b      	ldrb	r3, [r3, #0]
 80a050c:	f88d 7000 	strb.w	r7, [sp]
 80a0510:	e7cb      	b.n	80a04aa <loop+0x172>
        wateringMinutes = 0;
        state = REPORTING_STATE;
      }
      else if (currentHour == startWaterHour) wateringMinutes = longWaterMinutes;  // So, the first watering is long
 80a0512:	4293      	cmp	r3, r2
 80a0514:	bf0c      	ite	eq
 80a0516:	2305      	moveq	r3, #5
      else wateringMinutes = shortWaterMinutes;                                 // Subsequent are short - fine tuning
 80a0518:	2301      	movne	r3, #1
 80a051a:	6033      	str	r3, [r6, #0]
      if(verboseMode && state == FORECASTING_STATE) Particle.publish("State","Forecasting", PRIVATE);
 80a051c:	782b      	ldrb	r3, [r5, #0]
 80a051e:	b17b      	cbz	r3, 80a0540 <loop+0x208>
 80a0520:	7823      	ldrb	r3, [r4, #0]
 80a0522:	2b05      	cmp	r3, #5
 80a0524:	d10c      	bne.n	80a0540 <loop+0x208>
 80a0526:	4b10      	ldr	r3, [pc, #64]	; (80a0568 <loop+0x230>)
 80a0528:	2200      	movs	r2, #0
 80a052a:	781b      	ldrb	r3, [r3, #0]
 80a052c:	f88d 2000 	strb.w	r2, [sp]
 80a0530:	4a26      	ldr	r2, [pc, #152]	; (80a05cc <loop+0x294>)
 80a0532:	a802      	add	r0, sp, #8
 80a0534:	4917      	ldr	r1, [pc, #92]	; (80a0594 <loop+0x25c>)
 80a0536:	f7ff fde1 	bl	80a00fc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.125.constprop.129>
 80a053a:	a803      	add	r0, sp, #12
 80a053c:	f7ff fea9 	bl	80a0292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0540:	f000 ffe6 	bl	80a1510 <HAL_Timer_Get_Milli_Seconds>
      lastPublish = millis();
 80a0544:	4b14      	ldr	r3, [pc, #80]	; (80a0598 <loop+0x260>)
 80a0546:	6018      	str	r0, [r3, #0]
      break;
 80a0548:	e1f8      	b.n	80a093c <loop+0x604>
 80a054a:	bf00      	nop
 80a054c:	200004b3 	.word	0x200004b3
 80a0550:	20000488 	.word	0x20000488
 80a0554:	200004da 	.word	0x200004da
 80a0558:	20000318 	.word	0x20000318
 80a055c:	200004db 	.word	0x200004db
 80a0560:	20000509 	.word	0x20000509
 80a0564:	200004f0 	.word	0x200004f0
 80a0568:	20000487 	.word	0x20000487
 80a056c:	080a67d9 	.word	0x080a67d9
 80a0570:	080a67e7 	.word	0x080a67e7
 80a0574:	080a6833 	.word	0x080a6833
 80a0578:	20000497 	.word	0x20000497
 80a057c:	080a6803 	.word	0x080a6803
 80a0580:	080a680c 	.word	0x080a680c
 80a0584:	080a6818 	.word	0x080a6818
 80a0588:	2000046e 	.word	0x2000046e
 80a058c:	200004ec 	.word	0x200004ec
 80a0590:	080a6823 	.word	0x080a6823
 80a0594:	080a67e1 	.word	0x080a67e1
 80a0598:	2000050c 	.word	0x2000050c
 80a059c:	080a6837 	.word	0x080a6837
 80a05a0:	20000464 	.word	0x20000464
 80a05a4:	200004e8 	.word	0x200004e8
 80a05a8:	080a684e 	.word	0x080a684e
 80a05ac:	080a6842 	.word	0x080a6842
 80a05b0:	200004b8 	.word	0x200004b8
 80a05b4:	200004b2 	.word	0x200004b2
 80a05b8:	080a6857 	.word	0x080a6857
 80a05bc:	080a6873 	.word	0x080a6873
 80a05c0:	200004d9 	.word	0x200004d9
 80a05c4:	080a689b 	.word	0x080a689b
 80a05c8:	080a688f 	.word	0x080a688f
 80a05cc:	080a68a7 	.word	0x080a68a7
 80a05d0:	f000 ff9e 	bl	80a1510 <HAL_Timer_Get_Milli_Seconds>


    case FORECASTING_STATE:
      if ((millis() >= (publishTimeStamp + webhookWaitTime)) || forecastDay)
 80a05d4:	4b95      	ldr	r3, [pc, #596]	; (80a082c <loop+0x4f4>)
 80a05d6:	4d96      	ldr	r5, [pc, #600]	; (80a0830 <loop+0x4f8>)
 80a05d8:	681a      	ldr	r2, [r3, #0]
 80a05da:	4b96      	ldr	r3, [pc, #600]	; (80a0834 <loop+0x4fc>)
 80a05dc:	681b      	ldr	r3, [r3, #0]
 80a05de:	4413      	add	r3, r2
 80a05e0:	4298      	cmp	r0, r3
 80a05e2:	d202      	bcs.n	80a05ea <loop+0x2b2>
 80a05e4:	4b94      	ldr	r3, [pc, #592]	; (80a0838 <loop+0x500>)
 80a05e6:	681b      	ldr	r3, [r3, #0]
 80a05e8:	b32b      	cbz	r3, 80a0636 <loop+0x2fe>
      {
        state = WATERING_STATE;
 80a05ea:	2306      	movs	r3, #6
 80a05ec:	7023      	strb	r3, [r4, #0]
        if (expectedRainfallToday > rainThreshold)
 80a05ee:	4b93      	ldr	r3, [pc, #588]	; (80a083c <loop+0x504>)
 80a05f0:	6819      	ldr	r1, [r3, #0]
 80a05f2:	4b93      	ldr	r3, [pc, #588]	; (80a0840 <loop+0x508>)
 80a05f4:	6818      	ldr	r0, [r3, #0]
 80a05f6:	f003 fd1d 	bl	80a4034 <__aeabi_fcmpgt>
 80a05fa:	b1e0      	cbz	r0, 80a0636 <loop+0x2fe>
        {
          strcpy(wateringContext,"Heavy Rain Expected");
 80a05fc:	4991      	ldr	r1, [pc, #580]	; (80a0844 <loop+0x50c>)
 80a05fe:	4892      	ldr	r0, [pc, #584]	; (80a0848 <loop+0x510>)
 80a0600:	f003 fed8 	bl	80a43b4 <strcpy>
          wateringMinutes = 0;
 80a0604:	4b91      	ldr	r3, [pc, #580]	; (80a084c <loop+0x514>)
 80a0606:	2600      	movs	r6, #0
 80a0608:	601e      	str	r6, [r3, #0]
          if (verboseMode) {
 80a060a:	782b      	ldrb	r3, [r5, #0]
 80a060c:	b18b      	cbz	r3, 80a0632 <loop+0x2fa>
            waitUntil(meterParticlePublish);
 80a060e:	f7ff fe35 	bl	80a027c <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.105>
 80a0612:	4b8f      	ldr	r3, [pc, #572]	; (80a0850 <loop+0x518>)
            Particle.publish("State","Reporting - Rain Forecasted", PRIVATE);
 80a0614:	4a8f      	ldr	r2, [pc, #572]	; (80a0854 <loop+0x51c>)
 80a0616:	781b      	ldrb	r3, [r3, #0]
 80a0618:	498f      	ldr	r1, [pc, #572]	; (80a0858 <loop+0x520>)
 80a061a:	a802      	add	r0, sp, #8
 80a061c:	f88d 6000 	strb.w	r6, [sp]
 80a0620:	f7ff fd6c 	bl	80a00fc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.125.constprop.129>
 80a0624:	a803      	add	r0, sp, #12
 80a0626:	f7ff fe34 	bl	80a0292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a062a:	f000 ff71 	bl	80a1510 <HAL_Timer_Get_Milli_Seconds>
            lastPublish = millis();
 80a062e:	4b8b      	ldr	r3, [pc, #556]	; (80a085c <loop+0x524>)
 80a0630:	6018      	str	r0, [r3, #0]
          }
          state = REPORTING_STATE;
 80a0632:	2307      	movs	r3, #7
 80a0634:	7023      	strb	r3, [r4, #0]
        }
      }
      if (verboseMode && state == WATERING_STATE) {
 80a0636:	782b      	ldrb	r3, [r5, #0]
 80a0638:	2b00      	cmp	r3, #0
 80a063a:	f000 817f 	beq.w	80a093c <loop+0x604>
 80a063e:	7823      	ldrb	r3, [r4, #0]
 80a0640:	2b06      	cmp	r3, #6
 80a0642:	f040 817b 	bne.w	80a093c <loop+0x604>
        waitUntil(meterParticlePublish);
 80a0646:	f7ff fe19 	bl	80a027c <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.105>
 80a064a:	4b81      	ldr	r3, [pc, #516]	; (80a0850 <loop+0x518>)
        Particle.publish("State","Watering", PRIVATE);
 80a064c:	2200      	movs	r2, #0
 80a064e:	781b      	ldrb	r3, [r3, #0]
 80a0650:	f88d 2000 	strb.w	r2, [sp]
 80a0654:	4a82      	ldr	r2, [pc, #520]	; (80a0860 <loop+0x528>)
 80a0656:	e76c      	b.n	80a0532 <loop+0x1fa>
        lastPublish = millis();
      }
      break;

    case WATERING_STATE:
      if (!watering)
 80a0658:	4d82      	ldr	r5, [pc, #520]	; (80a0864 <loop+0x52c>)
 80a065a:	4e7c      	ldr	r6, [pc, #496]	; (80a084c <loop+0x514>)
 80a065c:	782f      	ldrb	r7, [r5, #0]
 80a065e:	2f00      	cmp	r7, #0
 80a0660:	d134      	bne.n	80a06cc <loop+0x394>
      {
        // If you get to here - Watering is enabled, it is time, no heavy rain expected and the soil is dry - so let's water
        strcpy(wateringContext,"Watering");
 80a0662:	497f      	ldr	r1, [pc, #508]	; (80a0860 <loop+0x528>)
 80a0664:	4878      	ldr	r0, [pc, #480]	; (80a0848 <loop+0x510>)
 80a0666:	f003 fea5 	bl	80a43b4 <strcpy>
        if (verboseMode) {
 80a066a:	4b71      	ldr	r3, [pc, #452]	; (80a0830 <loop+0x4f8>)
 80a066c:	781b      	ldrb	r3, [r3, #0]
 80a066e:	b18b      	cbz	r3, 80a0694 <loop+0x35c>
          waitUntil(meterParticlePublish);
 80a0670:	f7ff fe04 	bl	80a027c <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.105>
 80a0674:	4b76      	ldr	r3, [pc, #472]	; (80a0850 <loop+0x518>)
          Particle.publish("State","Started Watering", PRIVATE);
 80a0676:	4a7c      	ldr	r2, [pc, #496]	; (80a0868 <loop+0x530>)
 80a0678:	781b      	ldrb	r3, [r3, #0]
 80a067a:	4977      	ldr	r1, [pc, #476]	; (80a0858 <loop+0x520>)
 80a067c:	a802      	add	r0, sp, #8
 80a067e:	f88d 7000 	strb.w	r7, [sp]
 80a0682:	f7ff fd3b 	bl	80a00fc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.125.constprop.129>
 80a0686:	a803      	add	r0, sp, #12
 80a0688:	f7ff fe03 	bl	80a0292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a068c:	f000 ff40 	bl	80a1510 <HAL_Timer_Get_Milli_Seconds>
          lastPublish = millis();
 80a0690:	4b72      	ldr	r3, [pc, #456]	; (80a085c <loop+0x524>)
 80a0692:	6018      	str	r0, [r3, #0]
        }
        if (wateringMinutes) {
 80a0694:	6833      	ldr	r3, [r6, #0]
 80a0696:	b1ab      	cbz	r3, 80a06c4 <loop+0x38c>
          digitalWrite(donePin, HIGH);                            // We will pet the dog now so we have the full interval to water
 80a0698:	2101      	movs	r1, #1
 80a069a:	2006      	movs	r0, #6
 80a069c:	f002 fb29 	bl	80a2cf2 <digitalWrite>
          digitalWrite(donePin, LOW);                             // We set the delay resistor to 50k or 7 mins so that is the longest watering duration
 80a06a0:	2100      	movs	r1, #0
 80a06a2:	2006      	movs	r0, #6
 80a06a4:	f002 fb25 	bl	80a2cf2 <digitalWrite>
          // doneEnabled = false;                                    // Will suspend watchdog petting until water is turned off
          digitalWrite(solenoidPin, HIGH);                        // Turn on the water
 80a06a8:	2101      	movs	r1, #1
 80a06aa:	2002      	movs	r0, #2
 80a06ac:	f002 fb21 	bl	80a2cf2 <digitalWrite>
          digitalWrite(solenoidPin2,HIGH);
 80a06b0:	2101      	movs	r1, #1
 80a06b2:	2007      	movs	r0, #7
 80a06b4:	f002 fb1d 	bl	80a2cf2 <digitalWrite>
          watering = true;
 80a06b8:	2301      	movs	r3, #1
 80a06ba:	702b      	strb	r3, [r5, #0]
 80a06bc:	f000 ff28 	bl	80a1510 <HAL_Timer_Get_Milli_Seconds>
          wateringStarted = millis();
 80a06c0:	4b6a      	ldr	r3, [pc, #424]	; (80a086c <loop+0x534>)
 80a06c2:	6018      	str	r0, [r3, #0]
        }
      }
      if (watering && millis() >= (wateringStarted + wateringMinutes * oneMinuteMillis))
 80a06c4:	782b      	ldrb	r3, [r5, #0]
 80a06c6:	2b00      	cmp	r3, #0
 80a06c8:	f000 8138 	beq.w	80a093c <loop+0x604>
 80a06cc:	f000 ff20 	bl	80a1510 <HAL_Timer_Get_Milli_Seconds>
 80a06d0:	4b67      	ldr	r3, [pc, #412]	; (80a0870 <loop+0x538>)
 80a06d2:	6832      	ldr	r2, [r6, #0]
 80a06d4:	6819      	ldr	r1, [r3, #0]
 80a06d6:	4b65      	ldr	r3, [pc, #404]	; (80a086c <loop+0x534>)
 80a06d8:	681b      	ldr	r3, [r3, #0]
 80a06da:	fb01 3302 	mla	r3, r1, r2, r3
 80a06de:	4298      	cmp	r0, r3
 80a06e0:	f080 80de 	bcs.w	80a08a0 <loop+0x568>
 80a06e4:	e12a      	b.n	80a093c <loop+0x604>
        }
      }
      break;

    case REPORTING_STATE:
      if (!waiting)
 80a06e6:	4d63      	ldr	r5, [pc, #396]	; (80a0874 <loop+0x53c>)
 80a06e8:	4e63      	ldr	r6, [pc, #396]	; (80a0878 <loop+0x540>)
 80a06ea:	782f      	ldrb	r7, [r5, #0]
 80a06ec:	46a8      	mov	r8, r5
 80a06ee:	b94f      	cbnz	r7, 80a0704 <loop+0x3cc>
 80a06f0:	f000 ff0e 	bl	80a1510 <HAL_Timer_Get_Milli_Seconds>
      {
        publishTimeStamp = millis();
 80a06f4:	4b4d      	ldr	r3, [pc, #308]	; (80a082c <loop+0x4f4>)
        waiting = true;                                         // Make sure we set the flag for flow through this case
        doneEnabled = false;                                    // If we get a valid response from Ubidots, this will be set back true
 80a06f6:	7037      	strb	r7, [r6, #0]
      break;

    case REPORTING_STATE:
      if (!waiting)
      {
        publishTimeStamp = millis();
 80a06f8:	6018      	str	r0, [r3, #0]
        waiting = true;                                         // Make sure we set the flag for flow through this case
 80a06fa:	2301      	movs	r3, #1
 80a06fc:	702b      	strb	r3, [r5, #0]
        doneEnabled = false;                                    // If we get a valid response from Ubidots, this will be set back true
        sendToUbidots();
 80a06fe:	f7ff fddf 	bl	80a02c0 <_Z13sendToUbidotsv>
 80a0702:	e11b      	b.n	80a093c <loop+0x604>
      }
      else if (waiting && doneEnabled)
 80a0704:	7835      	ldrb	r5, [r6, #0]
 80a0706:	b1bd      	cbz	r5, 80a0738 <loop+0x400>
      {
        if (verboseMode) {
 80a0708:	4b49      	ldr	r3, [pc, #292]	; (80a0830 <loop+0x4f8>)
 80a070a:	781b      	ldrb	r3, [r3, #0]
 80a070c:	b193      	cbz	r3, 80a0734 <loop+0x3fc>
          waitUntil(meterParticlePublish);
 80a070e:	f7ff fdb5 	bl	80a027c <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.105>
 80a0712:	4b4f      	ldr	r3, [pc, #316]	; (80a0850 <loop+0x518>)
          Particle.publish("State","Idle", PRIVATE);
 80a0714:	2200      	movs	r2, #0
 80a0716:	781b      	ldrb	r3, [r3, #0]
 80a0718:	494f      	ldr	r1, [pc, #316]	; (80a0858 <loop+0x520>)
 80a071a:	f88d 2000 	strb.w	r2, [sp]
 80a071e:	a802      	add	r0, sp, #8
 80a0720:	4a56      	ldr	r2, [pc, #344]	; (80a087c <loop+0x544>)
 80a0722:	f7ff fceb 	bl	80a00fc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.125.constprop.129>
 80a0726:	a803      	add	r0, sp, #12
 80a0728:	f7ff fdb3 	bl	80a0292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a072c:	f000 fef0 	bl	80a1510 <HAL_Timer_Get_Milli_Seconds>
          lastPublish = millis();
 80a0730:	4b4a      	ldr	r3, [pc, #296]	; (80a085c <loop+0x524>)
 80a0732:	6018      	str	r0, [r3, #0]
        }
        state = IDLE_STATE;       // This is how we know if Ubidots got the data
 80a0734:	2302      	movs	r3, #2
 80a0736:	e01f      	b.n	80a0778 <loop+0x440>
 80a0738:	f000 feea 	bl	80a1510 <HAL_Timer_Get_Milli_Seconds>
        waiting = false;
      }
      else if (waiting && millis() >= (publishTimeStamp + webhookWaitTime))
 80a073c:	4b3b      	ldr	r3, [pc, #236]	; (80a082c <loop+0x4f4>)
 80a073e:	681a      	ldr	r2, [r3, #0]
 80a0740:	4b3c      	ldr	r3, [pc, #240]	; (80a0834 <loop+0x4fc>)
 80a0742:	681b      	ldr	r3, [r3, #0]
 80a0744:	4413      	add	r3, r2
 80a0746:	4298      	cmp	r0, r3
 80a0748:	f0c0 80f8 	bcc.w	80a093c <loop+0x604>
      {
        if (verboseMode) {
 80a074c:	4b38      	ldr	r3, [pc, #224]	; (80a0830 <loop+0x4f8>)
 80a074e:	781b      	ldrb	r3, [r3, #0]
 80a0750:	b18b      	cbz	r3, 80a0776 <loop+0x43e>
          waitUntil(meterParticlePublish);
 80a0752:	f7ff fd93 	bl	80a027c <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.105>
 80a0756:	4b3e      	ldr	r3, [pc, #248]	; (80a0850 <loop+0x518>)
          Particle.publish("State","Error - Reporting Timed Out", PRIVATE);
 80a0758:	4a49      	ldr	r2, [pc, #292]	; (80a0880 <loop+0x548>)
 80a075a:	781b      	ldrb	r3, [r3, #0]
 80a075c:	493e      	ldr	r1, [pc, #248]	; (80a0858 <loop+0x520>)
 80a075e:	a802      	add	r0, sp, #8
 80a0760:	f88d 5000 	strb.w	r5, [sp]
 80a0764:	f7ff fcca 	bl	80a00fc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.125.constprop.129>
 80a0768:	a803      	add	r0, sp, #12
 80a076a:	f7ff fd92 	bl	80a0292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a076e:	f000 fecf 	bl	80a1510 <HAL_Timer_Get_Milli_Seconds>
          lastPublish = millis();
 80a0772:	4b3a      	ldr	r3, [pc, #232]	; (80a085c <loop+0x524>)
 80a0774:	6018      	str	r0, [r3, #0]
        }
        state = ERROR_STATE;
 80a0776:	2301      	movs	r3, #1
 80a0778:	7023      	strb	r3, [r4, #0]
        waiting = false;
 80a077a:	2300      	movs	r3, #0
 80a077c:	f888 3000 	strb.w	r3, [r8]
 80a0780:	e0dc      	b.n	80a093c <loop+0x604>
      }
      break;

    case ERROR_STATE:                               // Set up so I could have other error recovery options than just reset in the future
      if (!waiting)
 80a0782:	4b3c      	ldr	r3, [pc, #240]	; (80a0874 <loop+0x53c>)
 80a0784:	4f3f      	ldr	r7, [pc, #252]	; (80a0884 <loop+0x54c>)
 80a0786:	781e      	ldrb	r6, [r3, #0]
 80a0788:	2e00      	cmp	r6, #0
 80a078a:	d143      	bne.n	80a0814 <loop+0x4dc>
      {
        if (resetCount > 3)
 80a078c:	4d3e      	ldr	r5, [pc, #248]	; (80a0888 <loop+0x550>)
 80a078e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80a0830 <loop+0x4f8>
 80a0792:	782a      	ldrb	r2, [r5, #0]
 80a0794:	2a03      	cmp	r2, #3
 80a0796:	d923      	bls.n	80a07e0 <loop+0x4a8>
        {
          resetCount = 0;
 80a0798:	702e      	strb	r6, [r5, #0]
          EEPROM.write(resetCountAddr,resetCount);    // If so, store incremented number - watchdog must have done This
 80a079a:	f002 fac3 	bl	80a2d24 <_Z21__fetch_global_EEPROMv>
 80a079e:	4b3b      	ldr	r3, [pc, #236]	; (80a088c <loop+0x554>)
 80a07a0:	7829      	ldrb	r1, [r5, #0]
 80a07a2:	6818      	ldr	r0, [r3, #0]
 80a07a4:	f7ff fca8 	bl	80a00f8 <_ZN11EEPROMClass5writeEih.isra.36>
          currentHour = Time.hour();  // Let's wait an hour to report again.
 80a07a8:	f001 ff7a 	bl	80a26a0 <_ZN9TimeClass4hourEv>
 80a07ac:	4b38      	ldr	r3, [pc, #224]	; (80a0890 <loop+0x558>)
 80a07ae:	7018      	strb	r0, [r3, #0]
          if (verboseMode) {
 80a07b0:	f898 3000 	ldrb.w	r3, [r8]
 80a07b4:	b18b      	cbz	r3, 80a07da <loop+0x4a2>
            waitUntil(meterParticlePublish);
 80a07b6:	f7ff fd61 	bl	80a027c <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.105>
 80a07ba:	4b25      	ldr	r3, [pc, #148]	; (80a0850 <loop+0x518>)
            Particle.publish("State","Excess Resets - 1 hour break", PRIVATE);
 80a07bc:	4a35      	ldr	r2, [pc, #212]	; (80a0894 <loop+0x55c>)
 80a07be:	781b      	ldrb	r3, [r3, #0]
 80a07c0:	4925      	ldr	r1, [pc, #148]	; (80a0858 <loop+0x520>)
 80a07c2:	a802      	add	r0, sp, #8
 80a07c4:	f88d 6000 	strb.w	r6, [sp]
 80a07c8:	f7ff fc98 	bl	80a00fc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.125.constprop.129>
 80a07cc:	a803      	add	r0, sp, #12
 80a07ce:	f7ff fd60 	bl	80a0292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a07d2:	f000 fe9d 	bl	80a1510 <HAL_Timer_Get_Milli_Seconds>
            lastPublish = millis();
 80a07d6:	4b21      	ldr	r3, [pc, #132]	; (80a085c <loop+0x524>)
 80a07d8:	6018      	str	r0, [r3, #0]
          }
          state =IDLE_STATE;
 80a07da:	2302      	movs	r3, #2
 80a07dc:	7023      	strb	r3, [r4, #0]
 80a07de:	e019      	b.n	80a0814 <loop+0x4dc>
        }
        else {
          waiting = true;
 80a07e0:	2201      	movs	r2, #1
 80a07e2:	701a      	strb	r2, [r3, #0]
 80a07e4:	f000 fe94 	bl	80a1510 <HAL_Timer_Get_Milli_Seconds>
          resetWaitTimeStamp = millis();
          if (verboseMode) {
 80a07e8:	f898 3000 	ldrb.w	r3, [r8]
          }
          state =IDLE_STATE;
        }
        else {
          waiting = true;
          resetWaitTimeStamp = millis();
 80a07ec:	6038      	str	r0, [r7, #0]
          if (verboseMode) {
 80a07ee:	b18b      	cbz	r3, 80a0814 <loop+0x4dc>
            waitUntil(meterParticlePublish);
 80a07f0:	f7ff fd44 	bl	80a027c <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.105>
 80a07f4:	4b16      	ldr	r3, [pc, #88]	; (80a0850 <loop+0x518>)
            Particle.publish("State","Resetting in 30 sec", PRIVATE);
 80a07f6:	4a28      	ldr	r2, [pc, #160]	; (80a0898 <loop+0x560>)
 80a07f8:	781b      	ldrb	r3, [r3, #0]
 80a07fa:	4917      	ldr	r1, [pc, #92]	; (80a0858 <loop+0x520>)
 80a07fc:	a802      	add	r0, sp, #8
 80a07fe:	f88d 6000 	strb.w	r6, [sp]
 80a0802:	f7ff fc7b 	bl	80a00fc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.125.constprop.129>
 80a0806:	a803      	add	r0, sp, #12
 80a0808:	f7ff fd43 	bl	80a0292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a080c:	f000 fe80 	bl	80a1510 <HAL_Timer_Get_Milli_Seconds>
            lastPublish = millis();
 80a0810:	4b12      	ldr	r3, [pc, #72]	; (80a085c <loop+0x524>)
 80a0812:	6018      	str	r0, [r3, #0]
 80a0814:	f000 fe7c 	bl	80a1510 <HAL_Timer_Get_Milli_Seconds>
          }
        }
      }
      if (millis() >= (resetWaitTimeStamp + resetWaitTime)) System.reset();
 80a0818:	4b20      	ldr	r3, [pc, #128]	; (80a089c <loop+0x564>)
 80a081a:	683a      	ldr	r2, [r7, #0]
 80a081c:	681b      	ldr	r3, [r3, #0]
 80a081e:	4413      	add	r3, r2
 80a0820:	4298      	cmp	r0, r3
 80a0822:	f0c0 808b 	bcc.w	80a093c <loop+0x604>
 80a0826:	f001 fe7b 	bl	80a2520 <_ZN11SystemClass5resetEv>
      break;
  }
}
 80a082a:	e087      	b.n	80a093c <loop+0x604>
 80a082c:	200004e4 	.word	0x200004e4
 80a0830:	200004f0 	.word	0x200004f0
 80a0834:	2000034c 	.word	0x2000034c
 80a0838:	200004b4 	.word	0x200004b4
 80a083c:	200004bc 	.word	0x200004bc
 80a0840:	200004f4 	.word	0x200004f4
 80a0844:	080a68b3 	.word	0x080a68b3
 80a0848:	2000046e 	.word	0x2000046e
 80a084c:	200004ec 	.word	0x200004ec
 80a0850:	20000487 	.word	0x20000487
 80a0854:	080a68c7 	.word	0x080a68c7
 80a0858:	080a67e1 	.word	0x080a67e1
 80a085c:	2000050c 	.word	0x2000050c
 80a0860:	080a68eb 	.word	0x080a68eb
 80a0864:	200004d8 	.word	0x200004d8
 80a0868:	080a68e3 	.word	0x080a68e3
 80a086c:	20000514 	.word	0x20000514
 80a0870:	20000350 	.word	0x20000350
 80a0874:	20000510 	.word	0x20000510
 80a0878:	20000300 	.word	0x20000300
 80a087c:	080a690e 	.word	0x080a690e
 80a0880:	080a6913 	.word	0x080a6913
 80a0884:	200004dc 	.word	0x200004dc
 80a0888:	200004da 	.word	0x200004da
 80a088c:	20000318 	.word	0x20000318
 80a0890:	200004db 	.word	0x200004db
 80a0894:	080a692f 	.word	0x080a692f
 80a0898:	080a694c 	.word	0x080a694c
 80a089c:	2000032c 	.word	0x2000032c
          wateringStarted = millis();
        }
      }
      if (watering && millis() >= (wateringStarted + wateringMinutes * oneMinuteMillis))
      {
        digitalWrite(solenoidPin, LOW);
 80a08a0:	2100      	movs	r1, #0
 80a08a2:	2002      	movs	r0, #2
 80a08a4:	f002 fa25 	bl	80a2cf2 <digitalWrite>
        digitalWrite(solenoidPin2,LOW);
 80a08a8:	2100      	movs	r1, #0
 80a08aa:	2007      	movs	r0, #7
 80a08ac:	f002 fa21 	bl	80a2cf2 <digitalWrite>
        watering = false;
        doneEnabled = true;                                     // Successful response - can pet the dog again
 80a08b0:	4b24      	ldr	r3, [pc, #144]	; (80a0944 <loop+0x60c>)
 80a08b2:	2101      	movs	r1, #1
        digitalWrite(donePin, HIGH);                            // If an interrupt came in while petting disabled, we missed it so...
        digitalWrite(donePin, LOW);                             // will pet the fdog just to be safe
        lastWateredDay = currentDay;
 80a08b4:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 80a097c <loop+0x644>
      }
      if (watering && millis() >= (wateringStarted + wateringMinutes * oneMinuteMillis))
      {
        digitalWrite(solenoidPin, LOW);
        digitalWrite(solenoidPin2,LOW);
        watering = false;
 80a08b8:	2600      	movs	r6, #0
        doneEnabled = true;                                     // Successful response - can pet the dog again
        digitalWrite(donePin, HIGH);                            // If an interrupt came in while petting disabled, we missed it so...
 80a08ba:	2006      	movs	r0, #6
      if (watering && millis() >= (wateringStarted + wateringMinutes * oneMinuteMillis))
      {
        digitalWrite(solenoidPin, LOW);
        digitalWrite(solenoidPin2,LOW);
        watering = false;
        doneEnabled = true;                                     // Successful response - can pet the dog again
 80a08bc:	7019      	strb	r1, [r3, #0]
      }
      if (watering && millis() >= (wateringStarted + wateringMinutes * oneMinuteMillis))
      {
        digitalWrite(solenoidPin, LOW);
        digitalWrite(solenoidPin2,LOW);
        watering = false;
 80a08be:	702e      	strb	r6, [r5, #0]
        doneEnabled = true;                                     // Successful response - can pet the dog again
        digitalWrite(donePin, HIGH);                            // If an interrupt came in while petting disabled, we missed it so...
 80a08c0:	f002 fa17 	bl	80a2cf2 <digitalWrite>
        digitalWrite(donePin, LOW);                             // will pet the fdog just to be safe
 80a08c4:	4631      	mov	r1, r6
 80a08c6:	2006      	movs	r0, #6
 80a08c8:	f002 fa13 	bl	80a2cf2 <digitalWrite>
        lastWateredDay = currentDay;
        lastWateredHour = currentHour;
 80a08cc:	4d1e      	ldr	r5, [pc, #120]	; (80a0948 <loop+0x610>)
        digitalWrite(solenoidPin2,LOW);
        watering = false;
        doneEnabled = true;                                     // Successful response - can pet the dog again
        digitalWrite(donePin, HIGH);                            // If an interrupt came in while petting disabled, we missed it so...
        digitalWrite(donePin, LOW);                             // will pet the fdog just to be safe
        lastWateredDay = currentDay;
 80a08ce:	f898 2000 	ldrb.w	r2, [r8]
 80a08d2:	4b1e      	ldr	r3, [pc, #120]	; (80a094c <loop+0x614>)
        lastWateredHour = currentHour;
        lastWateredMonth = currentMonth;
 80a08d4:	4f1e      	ldr	r7, [pc, #120]	; (80a0950 <loop+0x618>)
        digitalWrite(solenoidPin2,LOW);
        watering = false;
        doneEnabled = true;                                     // Successful response - can pet the dog again
        digitalWrite(donePin, HIGH);                            // If an interrupt came in while petting disabled, we missed it so...
        digitalWrite(donePin, LOW);                             // will pet the fdog just to be safe
        lastWateredDay = currentDay;
 80a08d6:	701a      	strb	r2, [r3, #0]
        lastWateredHour = currentHour;
 80a08d8:	782a      	ldrb	r2, [r5, #0]
 80a08da:	4b1e      	ldr	r3, [pc, #120]	; (80a0954 <loop+0x61c>)
 80a08dc:	701a      	strb	r2, [r3, #0]
        lastWateredMonth = currentMonth;
 80a08de:	783a      	ldrb	r2, [r7, #0]
 80a08e0:	4b1d      	ldr	r3, [pc, #116]	; (80a0958 <loop+0x620>)
 80a08e2:	701a      	strb	r2, [r3, #0]
        EEPROM.write(lastWateredHourAddr,currentHour);      // Sets the last watered period to the current one
 80a08e4:	f002 fa1e 	bl	80a2d24 <_Z21__fetch_global_EEPROMv>
 80a08e8:	4b1c      	ldr	r3, [pc, #112]	; (80a095c <loop+0x624>)
 80a08ea:	7829      	ldrb	r1, [r5, #0]
 80a08ec:	6818      	ldr	r0, [r3, #0]
 80a08ee:	f7ff fc03 	bl	80a00f8 <_ZN11EEPROMClass5writeEih.isra.36>
        EEPROM.write(lastWateredDayAddr,currentDay);            // Stored in EEPROM since this issue only comes in case of a reset
 80a08f2:	f002 fa17 	bl	80a2d24 <_Z21__fetch_global_EEPROMv>
 80a08f6:	4b1a      	ldr	r3, [pc, #104]	; (80a0960 <loop+0x628>)
 80a08f8:	f898 1000 	ldrb.w	r1, [r8]
 80a08fc:	6818      	ldr	r0, [r3, #0]
 80a08fe:	f7ff fbfb 	bl	80a00f8 <_ZN11EEPROMClass5writeEih.isra.36>
        EEPROM.write(lastWateredMonthAddr,currentMonth);
 80a0902:	f002 fa0f 	bl	80a2d24 <_Z21__fetch_global_EEPROMv>
 80a0906:	4b17      	ldr	r3, [pc, #92]	; (80a0964 <loop+0x62c>)
 80a0908:	7839      	ldrb	r1, [r7, #0]
 80a090a:	6818      	ldr	r0, [r3, #0]
 80a090c:	f7ff fbf4 	bl	80a00f8 <_ZN11EEPROMClass5writeEih.isra.36>
        sprintf(lastWateredString, "%u/%u %u:00", currentMonth,currentDay,currentHour);
 80a0910:	7829      	ldrb	r1, [r5, #0]
 80a0912:	f898 3000 	ldrb.w	r3, [r8]
 80a0916:	783a      	ldrb	r2, [r7, #0]
 80a0918:	4813      	ldr	r0, [pc, #76]	; (80a0968 <loop+0x630>)
 80a091a:	9100      	str	r1, [sp, #0]
 80a091c:	4913      	ldr	r1, [pc, #76]	; (80a096c <loop+0x634>)
 80a091e:	f001 f855 	bl	80a19cc <sprintf>
        state = REPORTING_STATE;                                // If this fails, the watchdog will reset
 80a0922:	2307      	movs	r3, #7
 80a0924:	7023      	strb	r3, [r4, #0]
        if (verboseMode) {
 80a0926:	4b12      	ldr	r3, [pc, #72]	; (80a0970 <loop+0x638>)
 80a0928:	781b      	ldrb	r3, [r3, #0]
 80a092a:	b13b      	cbz	r3, 80a093c <loop+0x604>
          waitUntil(meterParticlePublish);
 80a092c:	f7ff fca6 	bl	80a027c <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.105>
 80a0930:	4b10      	ldr	r3, [pc, #64]	; (80a0974 <loop+0x63c>)
          Particle.publish("State","Reporting - Done Watering", PRIVATE);
 80a0932:	4a11      	ldr	r2, [pc, #68]	; (80a0978 <loop+0x640>)
 80a0934:	781b      	ldrb	r3, [r3, #0]
 80a0936:	f88d 6000 	strb.w	r6, [sp]
 80a093a:	e5fa      	b.n	80a0532 <loop+0x1fa>
        }
      }
      if (millis() >= (resetWaitTimeStamp + resetWaitTime)) System.reset();
      break;
  }
}
 80a093c:	b004      	add	sp, #16
 80a093e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0942:	bf00      	nop
 80a0944:	20000300 	.word	0x20000300
 80a0948:	200004db 	.word	0x200004db
 80a094c:	200004b2 	.word	0x200004b2
 80a0950:	20000509 	.word	0x20000509
 80a0954:	200004b8 	.word	0x200004b8
 80a0958:	200004ab 	.word	0x200004ab
 80a095c:	20000354 	.word	0x20000354
 80a0960:	20000314 	.word	0x20000314
 80a0964:	20000310 	.word	0x20000310
 80a0968:	200004c0 	.word	0x200004c0
 80a096c:	080a6960 	.word	0x080a6960
 80a0970:	200004f0 	.word	0x200004f0
 80a0974:	20000487 	.word	0x20000487
 80a0978:	080a68f4 	.word	0x080a68f4
 80a097c:	20000488 	.word	0x20000488

080a0980 <_Z17AquaMasterHandlerPKcS0_>:
  snprintf(Rainfall,sizeof(Rainfall),"%4.2f",expectedRainfallToday);
}
*/

void AquaMasterHandler(const char *event, const char *data)  // Looks at the response from Ubidots - Will reset Photon if no successful response
{
 80a0980:	b530      	push	{r4, r5, lr}
  // Response Template: "{{watering.0.status_code}}"
  if (!data && verboseMode) {                                            // First check to see if there is any data
 80a0982:	460c      	mov	r4, r1
  snprintf(Rainfall,sizeof(Rainfall),"%4.2f",expectedRainfallToday);
}
*/

void AquaMasterHandler(const char *event, const char *data)  // Looks at the response from Ubidots - Will reset Photon if no successful response
{
 80a0984:	b085      	sub	sp, #20
 80a0986:	4d24      	ldr	r5, [pc, #144]	; (80a0a18 <_Z17AquaMasterHandlerPKcS0_+0x98>)
  // Response Template: "{{watering.0.status_code}}"
  if (!data && verboseMode) {                                            // First check to see if there is any data
 80a0988:	b949      	cbnz	r1, 80a099e <_Z17AquaMasterHandlerPKcS0_+0x1e>
 80a098a:	782b      	ldrb	r3, [r5, #0]
 80a098c:	b13b      	cbz	r3, 80a099e <_Z17AquaMasterHandlerPKcS0_+0x1e>
    waitUntil(meterParticlePublish);
 80a098e:	f7ff fc75 	bl	80a027c <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.105>
 80a0992:	4b22      	ldr	r3, [pc, #136]	; (80a0a1c <_Z17AquaMasterHandlerPKcS0_+0x9c>)
    Particle.publish("AquaMaster", "No Data", PRIVATE);
 80a0994:	4a22      	ldr	r2, [pc, #136]	; (80a0a20 <_Z17AquaMasterHandlerPKcS0_+0xa0>)
 80a0996:	781b      	ldrb	r3, [r3, #0]
 80a0998:	f88d 4000 	strb.w	r4, [sp]
 80a099c:	e02e      	b.n	80a09fc <_Z17AquaMasterHandlerPKcS0_+0x7c>
    lastPublish = millis();
    return;
  }
  int responseCode = atoi(data);                          // Response is only a single number thanks to Template
 80a099e:	4620      	mov	r0, r4
 80a09a0:	f003 fbb4 	bl	80a410c <atoi>
  if ((responseCode == 200) || (responseCode == 201))
 80a09a4:	38c8      	subs	r0, #200	; 0xc8
 80a09a6:	2801      	cmp	r0, #1
  {
    if (verboseMode) {
 80a09a8:	782b      	ldrb	r3, [r5, #0]
    Particle.publish("AquaMaster", "No Data", PRIVATE);
    lastPublish = millis();
    return;
  }
  int responseCode = atoi(data);                          // Response is only a single number thanks to Template
  if ((responseCode == 200) || (responseCode == 201))
 80a09aa:	d81e      	bhi.n	80a09ea <_Z17AquaMasterHandlerPKcS0_+0x6a>
  {
    if (verboseMode) {
 80a09ac:	b193      	cbz	r3, 80a09d4 <_Z17AquaMasterHandlerPKcS0_+0x54>
      waitUntil(meterParticlePublish);
 80a09ae:	f7ff fc65 	bl	80a027c <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.105>
 80a09b2:	4b1a      	ldr	r3, [pc, #104]	; (80a0a1c <_Z17AquaMasterHandlerPKcS0_+0x9c>)
      Particle.publish("AquaMaster","Success", PRIVATE);
 80a09b4:	2200      	movs	r2, #0
 80a09b6:	781b      	ldrb	r3, [r3, #0]
 80a09b8:	491a      	ldr	r1, [pc, #104]	; (80a0a24 <_Z17AquaMasterHandlerPKcS0_+0xa4>)
 80a09ba:	f88d 2000 	strb.w	r2, [sp]
 80a09be:	a802      	add	r0, sp, #8
 80a09c0:	4a19      	ldr	r2, [pc, #100]	; (80a0a28 <_Z17AquaMasterHandlerPKcS0_+0xa8>)
 80a09c2:	f7ff fb9b 	bl	80a00fc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.125.constprop.129>
 80a09c6:	a803      	add	r0, sp, #12
 80a09c8:	f7ff fc63 	bl	80a0292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a09cc:	f000 fda0 	bl	80a1510 <HAL_Timer_Get_Milli_Seconds>
      lastPublish = millis();
 80a09d0:	4b16      	ldr	r3, [pc, #88]	; (80a0a2c <_Z17AquaMasterHandlerPKcS0_+0xac>)
 80a09d2:	6018      	str	r0, [r3, #0]
    }
    doneEnabled = true;                                   // Successful response - can pet the dog again
 80a09d4:	4b16      	ldr	r3, [pc, #88]	; (80a0a30 <_Z17AquaMasterHandlerPKcS0_+0xb0>)
 80a09d6:	2101      	movs	r1, #1
    digitalWrite(donePin, HIGH);                          // If an interrupt came in while petting disabled, we missed it so...
 80a09d8:	2006      	movs	r0, #6
    if (verboseMode) {
      waitUntil(meterParticlePublish);
      Particle.publish("AquaMaster","Success", PRIVATE);
      lastPublish = millis();
    }
    doneEnabled = true;                                   // Successful response - can pet the dog again
 80a09da:	7019      	strb	r1, [r3, #0]
    digitalWrite(donePin, HIGH);                          // If an interrupt came in while petting disabled, we missed it so...
 80a09dc:	f002 f989 	bl	80a2cf2 <digitalWrite>
    digitalWrite(donePin, LOW);                           // will pet the dog just to be safe
 80a09e0:	2100      	movs	r1, #0
 80a09e2:	2006      	movs	r0, #6
 80a09e4:	f002 f985 	bl	80a2cf2 <digitalWrite>
 80a09e8:	e013      	b.n	80a0a12 <_Z17AquaMasterHandlerPKcS0_+0x92>
  }
  else if (verboseMode)
 80a09ea:	b193      	cbz	r3, 80a0a12 <_Z17AquaMasterHandlerPKcS0_+0x92>
  {
    waitUntil(meterParticlePublish);
 80a09ec:	f7ff fc46 	bl	80a027c <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.105>
 80a09f0:	4b0a      	ldr	r3, [pc, #40]	; (80a0a1c <_Z17AquaMasterHandlerPKcS0_+0x9c>)
    Particle.publish("AquaMaster", data, PRIVATE);             // Publish the response code
 80a09f2:	2200      	movs	r2, #0
 80a09f4:	781b      	ldrb	r3, [r3, #0]
 80a09f6:	f88d 2000 	strb.w	r2, [sp]
 80a09fa:	4622      	mov	r2, r4
 80a09fc:	4909      	ldr	r1, [pc, #36]	; (80a0a24 <_Z17AquaMasterHandlerPKcS0_+0xa4>)
 80a09fe:	a802      	add	r0, sp, #8
 80a0a00:	f7ff fb7c 	bl	80a00fc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.125.constprop.129>
 80a0a04:	a803      	add	r0, sp, #12
 80a0a06:	f7ff fc44 	bl	80a0292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0a0a:	f000 fd81 	bl	80a1510 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
 80a0a0e:	4b07      	ldr	r3, [pc, #28]	; (80a0a2c <_Z17AquaMasterHandlerPKcS0_+0xac>)
 80a0a10:	6018      	str	r0, [r3, #0]
  }
}
 80a0a12:	b005      	add	sp, #20
 80a0a14:	bd30      	pop	{r4, r5, pc}
 80a0a16:	bf00      	nop
 80a0a18:	200004f0 	.word	0x200004f0
 80a0a1c:	20000487 	.word	0x20000487
 80a0a20:	080a696c 	.word	0x080a696c
 80a0a24:	080a6974 	.word	0x080a6974
 80a0a28:	080a697f 	.word	0x080a697f
 80a0a2c:	2000050c 	.word	0x2000050c
 80a0a30:	20000300 	.word	0x20000300

080a0a34 <_Z9startStop6String>:
    digitalWrite(donePin, LOW);
  }
}

int startStop(String command)                             // So we can manually turn on the water for testing and setup
{
 80a0a34:	b530      	push	{r4, r5, lr}
 80a0a36:	4924      	ldr	r1, [pc, #144]	; (80a0ac8 <_Z9startStop6String+0x94>)
 80a0a38:	b085      	sub	sp, #20
 80a0a3a:	4605      	mov	r5, r0
 80a0a3c:	f001 fd41 	bl	80a24c2 <_ZNK6String6equalsEPKc>
  if (command == "1")
 80a0a40:	4604      	mov	r4, r0
 80a0a42:	b300      	cbz	r0, 80a0a86 <_Z9startStop6String+0x52>
  {
    wateringMinutes = shortWaterMinutes;                  // Manual waterings are short
 80a0a44:	4b21      	ldr	r3, [pc, #132]	; (80a0acc <_Z9startStop6String+0x98>)
 80a0a46:	2201      	movs	r2, #1
    strcpy(wateringContext,"User Initiated");             // Add the right context for publishing
 80a0a48:	4921      	ldr	r1, [pc, #132]	; (80a0ad0 <_Z9startStop6String+0x9c>)
 80a0a4a:	4822      	ldr	r0, [pc, #136]	; (80a0ad4 <_Z9startStop6String+0xa0>)

int startStop(String command)                             // So we can manually turn on the water for testing and setup
{
  if (command == "1")
  {
    wateringMinutes = shortWaterMinutes;                  // Manual waterings are short
 80a0a4c:	601a      	str	r2, [r3, #0]
    strcpy(wateringContext,"User Initiated");             // Add the right context for publishing
 80a0a4e:	f003 fcb1 	bl	80a43b4 <strcpy>
    if (verboseMode) {
 80a0a52:	4b21      	ldr	r3, [pc, #132]	; (80a0ad8 <_Z9startStop6String+0xa4>)
 80a0a54:	781b      	ldrb	r3, [r3, #0]
 80a0a56:	b193      	cbz	r3, 80a0a7e <_Z9startStop6String+0x4a>
      waitUntil(meterParticlePublish);
 80a0a58:	f7ff fc10 	bl	80a027c <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.105>
 80a0a5c:	4b1f      	ldr	r3, [pc, #124]	; (80a0adc <_Z9startStop6String+0xa8>)
      Particle.publish("State","Watering - User Initiated", PRIVATE);
 80a0a5e:	2200      	movs	r2, #0
 80a0a60:	781b      	ldrb	r3, [r3, #0]
 80a0a62:	491f      	ldr	r1, [pc, #124]	; (80a0ae0 <_Z9startStop6String+0xac>)
 80a0a64:	f88d 2000 	strb.w	r2, [sp]
 80a0a68:	a802      	add	r0, sp, #8
 80a0a6a:	4a1e      	ldr	r2, [pc, #120]	; (80a0ae4 <_Z9startStop6String+0xb0>)
 80a0a6c:	f7ff fb46 	bl	80a00fc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.125.constprop.129>
 80a0a70:	a803      	add	r0, sp, #12
 80a0a72:	f7ff fc0e 	bl	80a0292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0a76:	f000 fd4b 	bl	80a1510 <HAL_Timer_Get_Milli_Seconds>
      lastPublish = millis();
 80a0a7a:	4b1b      	ldr	r3, [pc, #108]	; (80a0ae8 <_Z9startStop6String+0xb4>)
 80a0a7c:	6018      	str	r0, [r3, #0]
    }
    state = WATERING_STATE;
 80a0a7e:	4b1b      	ldr	r3, [pc, #108]	; (80a0aec <_Z9startStop6String+0xb8>)
 80a0a80:	2206      	movs	r2, #6
 80a0a82:	701a      	strb	r2, [r3, #0]
 80a0a84:	e01c      	b.n	80a0ac0 <_Z9startStop6String+0x8c>
 80a0a86:	491a      	ldr	r1, [pc, #104]	; (80a0af0 <_Z9startStop6String+0xbc>)
 80a0a88:	4628      	mov	r0, r5
 80a0a8a:	f001 fd1a 	bl	80a24c2 <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")                                // This allows us to turn off the water at any time
 80a0a8e:	b1c0      	cbz	r0, 80a0ac2 <_Z9startStop6String+0x8e>
  {
    if (verboseMode) {
 80a0a90:	4b11      	ldr	r3, [pc, #68]	; (80a0ad8 <_Z9startStop6String+0xa4>)
 80a0a92:	781b      	ldrb	r3, [r3, #0]
 80a0a94:	b18b      	cbz	r3, 80a0aba <_Z9startStop6String+0x86>
      waitUntil(meterParticlePublish);
 80a0a96:	f7ff fbf1 	bl	80a027c <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.105>
 80a0a9a:	4b10      	ldr	r3, [pc, #64]	; (80a0adc <_Z9startStop6String+0xa8>)
      Particle.publish("State","Stopped Watering - User Initiated", PRIVATE);
 80a0a9c:	4a15      	ldr	r2, [pc, #84]	; (80a0af4 <_Z9startStop6String+0xc0>)
 80a0a9e:	781b      	ldrb	r3, [r3, #0]
 80a0aa0:	490f      	ldr	r1, [pc, #60]	; (80a0ae0 <_Z9startStop6String+0xac>)
 80a0aa2:	a802      	add	r0, sp, #8
 80a0aa4:	f88d 4000 	strb.w	r4, [sp]
 80a0aa8:	f7ff fb28 	bl	80a00fc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.125.constprop.129>
 80a0aac:	a803      	add	r0, sp, #12
 80a0aae:	f7ff fbf0 	bl	80a0292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0ab2:	f000 fd2d 	bl	80a1510 <HAL_Timer_Get_Milli_Seconds>
      lastPublish = millis();
 80a0ab6:	4b0c      	ldr	r3, [pc, #48]	; (80a0ae8 <_Z9startStop6String+0xb4>)
 80a0ab8:	6018      	str	r0, [r3, #0]
    }
    wateringStarted = 0;    // This will stop the watering
 80a0aba:	4b0f      	ldr	r3, [pc, #60]	; (80a0af8 <_Z9startStop6String+0xc4>)
 80a0abc:	2200      	movs	r2, #0
 80a0abe:	601a      	str	r2, [r3, #0]
 80a0ac0:	2001      	movs	r0, #1
    return 1;
  }
  return 0;
}
 80a0ac2:	b005      	add	sp, #20
 80a0ac4:	bd30      	pop	{r4, r5, pc}
 80a0ac6:	bf00      	nop
 80a0ac8:	080a6bf2 	.word	0x080a6bf2
 80a0acc:	200004ec 	.word	0x200004ec
 80a0ad0:	080a699a 	.word	0x080a699a
 80a0ad4:	2000046e 	.word	0x2000046e
 80a0ad8:	200004f0 	.word	0x200004f0
 80a0adc:	20000487 	.word	0x20000487
 80a0ae0:	080a67e1 	.word	0x080a67e1
 80a0ae4:	080a698f 	.word	0x080a698f
 80a0ae8:	2000050c 	.word	0x2000050c
 80a0aec:	200004b3 	.word	0x200004b3
 80a0af0:	080a696a 	.word	0x080a696a
 80a0af4:	080a6987 	.word	0x080a6987
 80a0af8:	20000514 	.word	0x20000514

080a0afc <_Z15wateringEnabled6String>:

int wateringEnabled(String command)                       // If I sense something is amiss, I can easily disable watering
{
 80a0afc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a0afe:	492b      	ldr	r1, [pc, #172]	; (80a0bac <_Z15wateringEnabled6String+0xb0>)
 80a0b00:	f001 fcdf 	bl	80a24c2 <_ZNK6String6equalsEPKc>
 80a0b04:	4c2a      	ldr	r4, [pc, #168]	; (80a0bb0 <_Z15wateringEnabled6String+0xb4>)
  if (command == "1")                                   // Default - enabled
 80a0b06:	4606      	mov	r6, r0
 80a0b08:	4a2a      	ldr	r2, [pc, #168]	; (80a0bb4 <_Z15wateringEnabled6String+0xb8>)
 80a0b0a:	4b2b      	ldr	r3, [pc, #172]	; (80a0bb8 <_Z15wateringEnabled6String+0xbc>)
 80a0b0c:	4d2b      	ldr	r5, [pc, #172]	; (80a0bbc <_Z15wateringEnabled6String+0xc0>)
 80a0b0e:	b310      	cbz	r0, 80a0b56 <_Z15wateringEnabled6String+0x5a>
  {
    waterEnabled = 1;
    if (verboseMode) {
 80a0b10:	781b      	ldrb	r3, [r3, #0]

int wateringEnabled(String command)                       // If I sense something is amiss, I can easily disable watering
{
  if (command == "1")                                   // Default - enabled
  {
    waterEnabled = 1;
 80a0b12:	2101      	movs	r1, #1
 80a0b14:	7011      	strb	r1, [r2, #0]
    if (verboseMode) {
 80a0b16:	b193      	cbz	r3, 80a0b3e <_Z15wateringEnabled6String+0x42>
      waitUntil(meterParticlePublish);
 80a0b18:	f7ff fbb0 	bl	80a027c <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.105>
 80a0b1c:	4b28      	ldr	r3, [pc, #160]	; (80a0bc0 <_Z15wateringEnabled6String+0xc4>)
      Particle.publish("State","Watering Enabled", PRIVATE);
 80a0b1e:	2200      	movs	r2, #0
 80a0b20:	781b      	ldrb	r3, [r3, #0]
 80a0b22:	4928      	ldr	r1, [pc, #160]	; (80a0bc4 <_Z15wateringEnabled6String+0xc8>)
 80a0b24:	f88d 2000 	strb.w	r2, [sp]
 80a0b28:	a802      	add	r0, sp, #8
 80a0b2a:	4a27      	ldr	r2, [pc, #156]	; (80a0bc8 <_Z15wateringEnabled6String+0xcc>)
 80a0b2c:	f7ff fae6 	bl	80a00fc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.125.constprop.129>
 80a0b30:	a803      	add	r0, sp, #12
 80a0b32:	f7ff fbae 	bl	80a0292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0b36:	f000 fceb 	bl	80a1510 <HAL_Timer_Get_Milli_Seconds>
      lastPublish = millis();
 80a0b3a:	4b24      	ldr	r3, [pc, #144]	; (80a0bcc <_Z15wateringEnabled6String+0xd0>)
 80a0b3c:	6018      	str	r0, [r3, #0]
    }
    sprintf(Enabled, "true");
 80a0b3e:	4924      	ldr	r1, [pc, #144]	; (80a0bd0 <_Z15wateringEnabled6String+0xd4>)
 80a0b40:	4824      	ldr	r0, [pc, #144]	; (80a0bd4 <_Z15wateringEnabled6String+0xd8>)
 80a0b42:	f003 fc37 	bl	80a43b4 <strcpy>
    controlRegister = EEPROM.read(controlRegisterAddr);
 80a0b46:	f002 f8ed 	bl	80a2d24 <_Z21__fetch_global_EEPROMv>
 80a0b4a:	6820      	ldr	r0, [r4, #0]
 80a0b4c:	f7ff fad2 	bl	80a00f4 <_ZN11EEPROMClass4readEi.isra.35>
    controlRegister = (0b00000010 | controlRegister);                    // Enable Watering
 80a0b50:	f040 0002 	orr.w	r0, r0, #2
 80a0b54:	e01f      	b.n	80a0b96 <_Z15wateringEnabled6String+0x9a>
    return 1;
  }
  else                            // Ensures no watering will occur
  {
    waterEnabled = 0;
    if (verboseMode) {
 80a0b56:	781b      	ldrb	r3, [r3, #0]
    EEPROM.write(controlRegisterAddr,controlRegister);                   // Write it to the register
    return 1;
  }
  else                            // Ensures no watering will occur
  {
    waterEnabled = 0;
 80a0b58:	7010      	strb	r0, [r2, #0]
    if (verboseMode) {
 80a0b5a:	b18b      	cbz	r3, 80a0b80 <_Z15wateringEnabled6String+0x84>
      waitUntil(meterParticlePublish);
 80a0b5c:	f7ff fb8e 	bl	80a027c <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.105>
 80a0b60:	4b17      	ldr	r3, [pc, #92]	; (80a0bc0 <_Z15wateringEnabled6String+0xc4>)
      Particle.publish("State","Watering Disabled", PRIVATE);
 80a0b62:	4a1d      	ldr	r2, [pc, #116]	; (80a0bd8 <_Z15wateringEnabled6String+0xdc>)
 80a0b64:	781b      	ldrb	r3, [r3, #0]
 80a0b66:	4917      	ldr	r1, [pc, #92]	; (80a0bc4 <_Z15wateringEnabled6String+0xc8>)
 80a0b68:	a802      	add	r0, sp, #8
 80a0b6a:	f88d 6000 	strb.w	r6, [sp]
 80a0b6e:	f7ff fac5 	bl	80a00fc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.125.constprop.129>
 80a0b72:	a803      	add	r0, sp, #12
 80a0b74:	f7ff fb8d 	bl	80a0292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0b78:	f000 fcca 	bl	80a1510 <HAL_Timer_Get_Milli_Seconds>
      lastPublish = millis();
 80a0b7c:	4b13      	ldr	r3, [pc, #76]	; (80a0bcc <_Z15wateringEnabled6String+0xd0>)
 80a0b7e:	6018      	str	r0, [r3, #0]
    }
    sprintf(Enabled, "false");
 80a0b80:	4916      	ldr	r1, [pc, #88]	; (80a0bdc <_Z15wateringEnabled6String+0xe0>)
 80a0b82:	4814      	ldr	r0, [pc, #80]	; (80a0bd4 <_Z15wateringEnabled6String+0xd8>)
 80a0b84:	f003 fc16 	bl	80a43b4 <strcpy>
    controlRegister = EEPROM.read(controlRegisterAddr);
 80a0b88:	f002 f8cc 	bl	80a2d24 <_Z21__fetch_global_EEPROMv>
 80a0b8c:	6820      	ldr	r0, [r4, #0]
 80a0b8e:	f7ff fab1 	bl	80a00f4 <_ZN11EEPROMClass4readEi.isra.35>
    controlRegister = (0b11111101 & controlRegister);                    // Disable Watering
 80a0b92:	f020 0002 	bic.w	r0, r0, #2
 80a0b96:	7028      	strb	r0, [r5, #0]
    EEPROM.write(controlRegisterAddr,controlRegister);                   // Write it to the register
 80a0b98:	f002 f8c4 	bl	80a2d24 <_Z21__fetch_global_EEPROMv>
 80a0b9c:	6820      	ldr	r0, [r4, #0]
 80a0b9e:	7829      	ldrb	r1, [r5, #0]
 80a0ba0:	f7ff faaa 	bl	80a00f8 <_ZN11EEPROMClass5writeEih.isra.36>
    return 1;
  }
}
 80a0ba4:	2001      	movs	r0, #1
 80a0ba6:	b004      	add	sp, #16
 80a0ba8:	bd70      	pop	{r4, r5, r6, pc}
 80a0baa:	bf00      	nop
 80a0bac:	080a6bf2 	.word	0x080a6bf2
 80a0bb0:	200004e0 	.word	0x200004e0
 80a0bb4:	200004d9 	.word	0x200004d9
 80a0bb8:	200004f0 	.word	0x200004f0
 80a0bbc:	2000051e 	.word	0x2000051e
 80a0bc0:	20000487 	.word	0x20000487
 80a0bc4:	080a67e1 	.word	0x080a67e1
 80a0bc8:	080a69a9 	.word	0x080a69a9
 80a0bcc:	2000050c 	.word	0x2000050c
 80a0bd0:	080a69ba 	.word	0x080a69ba
 80a0bd4:	20000465 	.word	0x20000465
 80a0bd8:	080a69bf 	.word	0x080a69bf
 80a0bdc:	080a69d1 	.word	0x080a69d1

080a0be0 <_Z11setTimeZone6String>:
  }
  else return 0;                                              // Never get here but if we do, let's be safe and disable
}

int setTimeZone(String command)
{
 80a0be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0be2:	b0cd      	sub	sp, #308	; 0x134
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 80a0be4:	220a      	movs	r2, #10
 80a0be6:	a905      	add	r1, sp, #20
 80a0be8:	6800      	ldr	r0, [r0, #0]
 80a0bea:	f004 faf9 	bl	80a51e0 <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 80a0bee:	b2c5      	uxtb	r5, r0
 80a0bf0:	f105 030c 	add.w	r3, r5, #12
 80a0bf4:	b2db      	uxtb	r3, r3
 80a0bf6:	2b18      	cmp	r3, #24
 80a0bf8:	d847      	bhi.n	80a0c8a <_Z11setTimeZone6String+0xaa>

int setTimeZone(String command)
{
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 80a0bfa:	b244      	sxtb	r4, r0
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  Time.zone((float)tempTimeZoneOffset);
 80a0bfc:	4620      	mov	r0, r4
 80a0bfe:	f003 f809 	bl	80a3c14 <__aeabi_i2f>
 80a0c02:	f001 fce7 	bl	80a25d4 <_ZN9TimeClass4zoneEf>
  EEPROM.write(timeZoneAddr,tempTimeZoneOffset);                             // Store the new value in EEPROM
 80a0c06:	f002 f88d 	bl	80a2d24 <_Z21__fetch_global_EEPROMv>
 80a0c0a:	4b22      	ldr	r3, [pc, #136]	; (80a0c94 <_Z11setTimeZone6String+0xb4>)
 80a0c0c:	4629      	mov	r1, r5
 80a0c0e:	6818      	ldr	r0, [r3, #0]
 80a0c10:	f7ff fa72 	bl	80a00f8 <_ZN11EEPROMClass5writeEih.isra.36>
  time_t t = Time.now();
 80a0c14:	f001 fd3d 	bl	80a2692 <_ZN9TimeClass3nowEv>
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
 80a0c18:	4623      	mov	r3, r4
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  Time.zone((float)tempTimeZoneOffset);
  EEPROM.write(timeZoneAddr,tempTimeZoneOffset);                             // Store the new value in EEPROM
  time_t t = Time.now();
 80a0c1a:	4607      	mov	r7, r0
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
 80a0c1c:	4a1e      	ldr	r2, [pc, #120]	; (80a0c98 <_Z11setTimeZone6String+0xb8>)
 80a0c1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80a0c22:	a80c      	add	r0, sp, #48	; 0x30
 80a0c24:	f000 feea 	bl	80a19fc <snprintf>
  if (verboseMode) {
 80a0c28:	4b1c      	ldr	r3, [pc, #112]	; (80a0c9c <_Z11setTimeZone6String+0xbc>)
 80a0c2a:	781b      	ldrb	r3, [r3, #0]
 80a0c2c:	2b00      	cmp	r3, #0
 80a0c2e:	d02e      	beq.n	80a0c8e <_Z11setTimeZone6String+0xae>
 80a0c30:	4e1b      	ldr	r6, [pc, #108]	; (80a0ca0 <_Z11setTimeZone6String+0xc0>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 80a0c32:	2500      	movs	r5, #0
    waitUntil(meterParticlePublish);
 80a0c34:	f7ff fb22 	bl	80a027c <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.105>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 80a0c38:	7833      	ldrb	r3, [r6, #0]
    Particle.publish("Time",data, PRIVATE);
 80a0c3a:	aa0c      	add	r2, sp, #48	; 0x30
 80a0c3c:	4919      	ldr	r1, [pc, #100]	; (80a0ca4 <_Z11setTimeZone6String+0xc4>)
 80a0c3e:	a808      	add	r0, sp, #32
 80a0c40:	f88d 5000 	strb.w	r5, [sp]
 80a0c44:	f7ff fa5a 	bl	80a00fc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.125.constprop.129>
 80a0c48:	a809      	add	r0, sp, #36	; 0x24
 80a0c4a:	f7ff fb22 	bl	80a0292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0c4e:	f000 fc5f 	bl	80a1510 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
 80a0c52:	4c15      	ldr	r4, [pc, #84]	; (80a0ca8 <_Z11setTimeZone6String+0xc8>)
 80a0c54:	6020      	str	r0, [r4, #0]
    waitUntil(meterParticlePublish);
 80a0c56:	f7ff fb11 	bl	80a027c <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.105>
    Particle.publish("Time",Time.timeStr(t), PRIVATE);
 80a0c5a:	4639      	mov	r1, r7
 80a0c5c:	a808      	add	r0, sp, #32
 80a0c5e:	f001 fcd5 	bl	80a260c <_ZN9TimeClass7timeStrEl>
 80a0c62:	9b08      	ldr	r3, [sp, #32]
 80a0c64:	490f      	ldr	r1, [pc, #60]	; (80a0ca4 <_Z11setTimeZone6String+0xc4>)
 80a0c66:	9303      	str	r3, [sp, #12]
 80a0c68:	9a03      	ldr	r2, [sp, #12]
 80a0c6a:	7833      	ldrb	r3, [r6, #0]
 80a0c6c:	a806      	add	r0, sp, #24
 80a0c6e:	f88d 5000 	strb.w	r5, [sp]
 80a0c72:	f7ff fa43 	bl	80a00fc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.125.constprop.129>
 80a0c76:	a807      	add	r0, sp, #28
 80a0c78:	f7ff fb0b 	bl	80a0292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0c7c:	a808      	add	r0, sp, #32
 80a0c7e:	f001 fbac 	bl	80a23da <_ZN6StringD1Ev>
 80a0c82:	f000 fc45 	bl	80a1510 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
 80a0c86:	6020      	str	r0, [r4, #0]
 80a0c88:	e001      	b.n	80a0c8e <_Z11setTimeZone6String+0xae>
int setTimeZone(String command)
{
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 80a0c8a:	2000      	movs	r0, #0
 80a0c8c:	e000      	b.n	80a0c90 <_Z11setTimeZone6String+0xb0>
    lastPublish = millis();
    waitUntil(meterParticlePublish);
    Particle.publish("Time",Time.timeStr(t), PRIVATE);
    lastPublish = millis();
  }
  return 1;
 80a0c8e:	2001      	movs	r0, #1
}
 80a0c90:	b04d      	add	sp, #308	; 0x134
 80a0c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0c94:	20000348 	.word	0x20000348
 80a0c98:	080a69d7 	.word	0x080a69d7
 80a0c9c:	200004f0 	.word	0x200004f0
 80a0ca0:	20000487 	.word	0x20000487
 80a0ca4:	080a6852 	.word	0x080a6852
 80a0ca8:	2000050c 	.word	0x2000050c

080a0cac <_Z14setVerboseMode6String>:

int setVerboseMode(String command) // Function to force sending data in current hour
{
 80a0cac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a0cae:	4926      	ldr	r1, [pc, #152]	; (80a0d48 <_Z14setVerboseMode6String+0x9c>)
 80a0cb0:	4605      	mov	r5, r0
 80a0cb2:	f001 fc06 	bl	80a24c2 <_ZNK6String6equalsEPKc>
  if (command == "1")
 80a0cb6:	4604      	mov	r4, r0
 80a0cb8:	b1d0      	cbz	r0, 80a0cf0 <_Z14setVerboseMode6String+0x44>
  {
    verboseMode = true;
 80a0cba:	4b24      	ldr	r3, [pc, #144]	; (80a0d4c <_Z14setVerboseMode6String+0xa0>)
    controlRegister = EEPROM.read(controlRegisterAddr);
 80a0cbc:	4d24      	ldr	r5, [pc, #144]	; (80a0d50 <_Z14setVerboseMode6String+0xa4>)

int setVerboseMode(String command) // Function to force sending data in current hour
{
  if (command == "1")
  {
    verboseMode = true;
 80a0cbe:	2401      	movs	r4, #1
 80a0cc0:	701c      	strb	r4, [r3, #0]
    controlRegister = EEPROM.read(controlRegisterAddr);
 80a0cc2:	f002 f82f 	bl	80a2d24 <_Z21__fetch_global_EEPROMv>
 80a0cc6:	6828      	ldr	r0, [r5, #0]
 80a0cc8:	f7ff fa14 	bl	80a00f4 <_ZN11EEPROMClass4readEi.isra.35>
    controlRegister = (0b00000001 | controlRegister);                    // Turn on verboseMode
 80a0ccc:	4e21      	ldr	r6, [pc, #132]	; (80a0d54 <_Z14setVerboseMode6String+0xa8>)
 80a0cce:	4320      	orrs	r0, r4
 80a0cd0:	7030      	strb	r0, [r6, #0]
    EEPROM.write(controlRegisterAddr,controlRegister);                        // Write it to the register
 80a0cd2:	f002 f827 	bl	80a2d24 <_Z21__fetch_global_EEPROMv>
 80a0cd6:	7831      	ldrb	r1, [r6, #0]
 80a0cd8:	6828      	ldr	r0, [r5, #0]
 80a0cda:	f7ff fa0d 	bl	80a00f8 <_ZN11EEPROMClass5writeEih.isra.36>
    waitUntil(meterParticlePublish);
 80a0cde:	f7ff facd 	bl	80a027c <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.105>
 80a0ce2:	4b1d      	ldr	r3, [pc, #116]	; (80a0d58 <_Z14setVerboseMode6String+0xac>)
    Particle.publish("Mode","Set Verbose Mode", PRIVATE);
 80a0ce4:	2200      	movs	r2, #0
 80a0ce6:	781b      	ldrb	r3, [r3, #0]
 80a0ce8:	f88d 2000 	strb.w	r2, [sp]
 80a0cec:	4a1b      	ldr	r2, [pc, #108]	; (80a0d5c <_Z14setVerboseMode6String+0xb0>)
 80a0cee:	e01d      	b.n	80a0d2c <_Z14setVerboseMode6String+0x80>
 80a0cf0:	491b      	ldr	r1, [pc, #108]	; (80a0d60 <_Z14setVerboseMode6String+0xb4>)
 80a0cf2:	4628      	mov	r0, r5
 80a0cf4:	f001 fbe5 	bl	80a24c2 <_ZNK6String6equalsEPKc>
    lastPublish = millis();
    return 1;
  }
  else if (command == "0")
 80a0cf8:	b320      	cbz	r0, 80a0d44 <_Z14setVerboseMode6String+0x98>
  {
    verboseMode = false;
 80a0cfa:	4b14      	ldr	r3, [pc, #80]	; (80a0d4c <_Z14setVerboseMode6String+0xa0>)
    controlRegister = EEPROM.read(controlRegisterAddr);
 80a0cfc:	4d14      	ldr	r5, [pc, #80]	; (80a0d50 <_Z14setVerboseMode6String+0xa4>)
    lastPublish = millis();
    return 1;
  }
  else if (command == "0")
  {
    verboseMode = false;
 80a0cfe:	701c      	strb	r4, [r3, #0]
    controlRegister = EEPROM.read(controlRegisterAddr);
 80a0d00:	f002 f810 	bl	80a2d24 <_Z21__fetch_global_EEPROMv>
 80a0d04:	6828      	ldr	r0, [r5, #0]
 80a0d06:	f7ff f9f5 	bl	80a00f4 <_ZN11EEPROMClass4readEi.isra.35>
    controlRegister = (0b11111110 & controlRegister);                    // Turn off verboseMode
 80a0d0a:	4e12      	ldr	r6, [pc, #72]	; (80a0d54 <_Z14setVerboseMode6String+0xa8>)
 80a0d0c:	f020 0001 	bic.w	r0, r0, #1
 80a0d10:	7030      	strb	r0, [r6, #0]
    EEPROM.write(controlRegisterAddr,controlRegister);                        // Write it to the register
 80a0d12:	f002 f807 	bl	80a2d24 <_Z21__fetch_global_EEPROMv>
 80a0d16:	7831      	ldrb	r1, [r6, #0]
 80a0d18:	6828      	ldr	r0, [r5, #0]
 80a0d1a:	f7ff f9ed 	bl	80a00f8 <_ZN11EEPROMClass5writeEih.isra.36>
    waitUntil(meterParticlePublish);
 80a0d1e:	f7ff faad 	bl	80a027c <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.105>
 80a0d22:	4b0d      	ldr	r3, [pc, #52]	; (80a0d58 <_Z14setVerboseMode6String+0xac>)
    Particle.publish("Mode","Cleared Verbose Mode", PRIVATE);
 80a0d24:	4a0f      	ldr	r2, [pc, #60]	; (80a0d64 <_Z14setVerboseMode6String+0xb8>)
 80a0d26:	781b      	ldrb	r3, [r3, #0]
 80a0d28:	f88d 4000 	strb.w	r4, [sp]
 80a0d2c:	490e      	ldr	r1, [pc, #56]	; (80a0d68 <_Z14setVerboseMode6String+0xbc>)
 80a0d2e:	a802      	add	r0, sp, #8
 80a0d30:	f7ff f9e4 	bl	80a00fc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.125.constprop.129>
 80a0d34:	a803      	add	r0, sp, #12
 80a0d36:	f7ff faac 	bl	80a0292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0d3a:	f000 fbe9 	bl	80a1510 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
 80a0d3e:	4b0b      	ldr	r3, [pc, #44]	; (80a0d6c <_Z14setVerboseMode6String+0xc0>)
 80a0d40:	6018      	str	r0, [r3, #0]
    return 1;
 80a0d42:	2001      	movs	r0, #1
  }
  else return 0;
}
 80a0d44:	b004      	add	sp, #16
 80a0d46:	bd70      	pop	{r4, r5, r6, pc}
 80a0d48:	080a6bf2 	.word	0x080a6bf2
 80a0d4c:	200004f0 	.word	0x200004f0
 80a0d50:	200004e0 	.word	0x200004e0
 80a0d54:	2000051e 	.word	0x2000051e
 80a0d58:	20000487 	.word	0x20000487
 80a0d5c:	080a69eb 	.word	0x080a69eb
 80a0d60:	080a696a 	.word	0x080a696a
 80a0d64:	080a69fc 	.word	0x080a69fc
 80a0d68:	080a6a0c 	.word	0x080a6a0c
 80a0d6c:	2000050c 	.word	0x2000050c

080a0d70 <_Z17setStartWaterTime6String>:

int setStartWaterTime(String command)
{
 80a0d70:	b510      	push	{r4, lr}
 80a0d72:	b0c6      	sub	sp, #280	; 0x118
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
 80a0d74:	220a      	movs	r2, #10
 80a0d76:	a903      	add	r1, sp, #12
 80a0d78:	6800      	ldr	r0, [r0, #0]
 80a0d7a:	f004 fa31 	bl	80a51e0 <strtol>
  if ((tempTime < 0) || (tempTime > 23)) return 0;              // Make sure it falls in a valid range or send a "fail" result
 80a0d7e:	2817      	cmp	r0, #23
 80a0d80:	d82b      	bhi.n	80a0dda <_Z17setStartWaterTime6String+0x6a>
  startWaterHour = tempTime;
 80a0d82:	4c18      	ldr	r4, [pc, #96]	; (80a0de4 <_Z17setStartWaterTime6String+0x74>)
 80a0d84:	7020      	strb	r0, [r4, #0]
  EEPROM.write(startWaterHourAddr,startWaterHour);              // Store the new value in EEPROM
 80a0d86:	f001 ffcd 	bl	80a2d24 <_Z21__fetch_global_EEPROMv>
 80a0d8a:	4b17      	ldr	r3, [pc, #92]	; (80a0de8 <_Z17setStartWaterTime6String+0x78>)
 80a0d8c:	7821      	ldrb	r1, [r4, #0]
 80a0d8e:	6818      	ldr	r0, [r3, #0]
 80a0d90:	f7ff f9b2 	bl	80a00f8 <_ZN11EEPROMClass5writeEih.isra.36>
  snprintf(data, sizeof(data), "Start water time set to %i",startWaterHour);
 80a0d94:	7823      	ldrb	r3, [r4, #0]
 80a0d96:	4a15      	ldr	r2, [pc, #84]	; (80a0dec <_Z17setStartWaterTime6String+0x7c>)
 80a0d98:	f44f 7180 	mov.w	r1, #256	; 0x100
 80a0d9c:	a806      	add	r0, sp, #24
 80a0d9e:	f000 fe2d 	bl	80a19fc <snprintf>
  sprintf(StartTime, "%u:00",startWaterHour);
 80a0da2:	7822      	ldrb	r2, [r4, #0]
 80a0da4:	4912      	ldr	r1, [pc, #72]	; (80a0df0 <_Z17setStartWaterTime6String+0x80>)
 80a0da6:	4813      	ldr	r0, [pc, #76]	; (80a0df4 <_Z17setStartWaterTime6String+0x84>)
 80a0da8:	f000 fe10 	bl	80a19cc <sprintf>
  if (verboseMode) {
 80a0dac:	4b12      	ldr	r3, [pc, #72]	; (80a0df8 <_Z17setStartWaterTime6String+0x88>)
 80a0dae:	781b      	ldrb	r3, [r3, #0]
 80a0db0:	b1ab      	cbz	r3, 80a0dde <_Z17setStartWaterTime6String+0x6e>
    waitUntil(meterParticlePublish);
 80a0db2:	f7ff fa63 	bl	80a027c <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.105>
 80a0db6:	4b11      	ldr	r3, [pc, #68]	; (80a0dfc <_Z17setStartWaterTime6String+0x8c>)
    Particle.publish("Time",data, PRIVATE);
 80a0db8:	2200      	movs	r2, #0
 80a0dba:	781b      	ldrb	r3, [r3, #0]
 80a0dbc:	4910      	ldr	r1, [pc, #64]	; (80a0e00 <_Z17setStartWaterTime6String+0x90>)
 80a0dbe:	f88d 2000 	strb.w	r2, [sp]
 80a0dc2:	a804      	add	r0, sp, #16
 80a0dc4:	aa06      	add	r2, sp, #24
 80a0dc6:	f7ff f999 	bl	80a00fc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.125.constprop.129>
 80a0dca:	a805      	add	r0, sp, #20
 80a0dcc:	f7ff fa61 	bl	80a0292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0dd0:	f000 fb9e 	bl	80a1510 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
 80a0dd4:	4b0b      	ldr	r3, [pc, #44]	; (80a0e04 <_Z17setStartWaterTime6String+0x94>)
 80a0dd6:	6018      	str	r0, [r3, #0]
 80a0dd8:	e001      	b.n	80a0dde <_Z17setStartWaterTime6String+0x6e>
int setStartWaterTime(String command)
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 23)) return 0;              // Make sure it falls in a valid range or send a "fail" result
 80a0dda:	2000      	movs	r0, #0
 80a0ddc:	e000      	b.n	80a0de0 <_Z17setStartWaterTime6String+0x70>
  if (verboseMode) {
    waitUntil(meterParticlePublish);
    Particle.publish("Time",data, PRIVATE);
    lastPublish = millis();
  }
  return 1;
 80a0dde:	2001      	movs	r0, #1
}
 80a0de0:	b046      	add	sp, #280	; 0x118
 80a0de2:	bd10      	pop	{r4, pc}
 80a0de4:	20000464 	.word	0x20000464
 80a0de8:	2000030c 	.word	0x2000030c
 80a0dec:	080a6a11 	.word	0x080a6a11
 80a0df0:	080a6966 	.word	0x080a6966
 80a0df4:	20000518 	.word	0x20000518
 80a0df8:	200004f0 	.word	0x200004f0
 80a0dfc:	20000487 	.word	0x20000487
 80a0e00:	080a6852 	.word	0x080a6852
 80a0e04:	2000050c 	.word	0x2000050c

080a0e08 <_Z16setStopWaterTime6String>:

int setStopWaterTime(String command)
{
 80a0e08:	b510      	push	{r4, lr}
 80a0e0a:	b0c6      	sub	sp, #280	; 0x118
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
 80a0e0c:	220a      	movs	r2, #10
 80a0e0e:	a903      	add	r1, sp, #12
 80a0e10:	6800      	ldr	r0, [r0, #0]
 80a0e12:	f004 f9e5 	bl	80a51e0 <strtol>
  if ((tempTime < 0) || (tempTime > 23)) return 0;              // Make sure it falls in a valid range or send a "fail" result
 80a0e16:	2817      	cmp	r0, #23
 80a0e18:	d82b      	bhi.n	80a0e72 <_Z16setStopWaterTime6String+0x6a>
  stopWaterHour = tempTime;
 80a0e1a:	4c18      	ldr	r4, [pc, #96]	; (80a0e7c <_Z16setStopWaterTime6String+0x74>)
 80a0e1c:	7020      	strb	r0, [r4, #0]
  EEPROM.write(stopWaterHourAddr,stopWaterHour);              // Store the new value in EEPROM
 80a0e1e:	f001 ff81 	bl	80a2d24 <_Z21__fetch_global_EEPROMv>
 80a0e22:	4b17      	ldr	r3, [pc, #92]	; (80a0e80 <_Z16setStopWaterTime6String+0x78>)
 80a0e24:	7821      	ldrb	r1, [r4, #0]
 80a0e26:	6818      	ldr	r0, [r3, #0]
 80a0e28:	f7ff f966 	bl	80a00f8 <_ZN11EEPROMClass5writeEih.isra.36>
  snprintf(data, sizeof(data), "Stop water time set to %i",stopWaterHour);
 80a0e2c:	7823      	ldrb	r3, [r4, #0]
 80a0e2e:	4a15      	ldr	r2, [pc, #84]	; (80a0e84 <_Z16setStopWaterTime6String+0x7c>)
 80a0e30:	f44f 7180 	mov.w	r1, #256	; 0x100
 80a0e34:	a806      	add	r0, sp, #24
 80a0e36:	f000 fde1 	bl	80a19fc <snprintf>
  sprintf(StopTime, "%u:00",stopWaterHour);
 80a0e3a:	7822      	ldrb	r2, [r4, #0]
 80a0e3c:	4912      	ldr	r1, [pc, #72]	; (80a0e88 <_Z16setStopWaterTime6String+0x80>)
 80a0e3e:	4813      	ldr	r0, [pc, #76]	; (80a0e8c <_Z16setStopWaterTime6String+0x84>)
 80a0e40:	f000 fdc4 	bl	80a19cc <sprintf>
  if (verboseMode) {
 80a0e44:	4b12      	ldr	r3, [pc, #72]	; (80a0e90 <_Z16setStopWaterTime6String+0x88>)
 80a0e46:	781b      	ldrb	r3, [r3, #0]
 80a0e48:	b1ab      	cbz	r3, 80a0e76 <_Z16setStopWaterTime6String+0x6e>
    waitUntil(meterParticlePublish);
 80a0e4a:	f7ff fa17 	bl	80a027c <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.105>
 80a0e4e:	4b11      	ldr	r3, [pc, #68]	; (80a0e94 <_Z16setStopWaterTime6String+0x8c>)
    Particle.publish("Time",data, PRIVATE);
 80a0e50:	2200      	movs	r2, #0
 80a0e52:	781b      	ldrb	r3, [r3, #0]
 80a0e54:	4910      	ldr	r1, [pc, #64]	; (80a0e98 <_Z16setStopWaterTime6String+0x90>)
 80a0e56:	f88d 2000 	strb.w	r2, [sp]
 80a0e5a:	a804      	add	r0, sp, #16
 80a0e5c:	aa06      	add	r2, sp, #24
 80a0e5e:	f7ff f94d 	bl	80a00fc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.125.constprop.129>
 80a0e62:	a805      	add	r0, sp, #20
 80a0e64:	f7ff fa15 	bl	80a0292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0e68:	f000 fb52 	bl	80a1510 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
 80a0e6c:	4b0b      	ldr	r3, [pc, #44]	; (80a0e9c <_Z16setStopWaterTime6String+0x94>)
 80a0e6e:	6018      	str	r0, [r3, #0]
 80a0e70:	e001      	b.n	80a0e76 <_Z16setStopWaterTime6String+0x6e>
int setStopWaterTime(String command)
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                      // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 23)) return 0;              // Make sure it falls in a valid range or send a "fail" result
 80a0e72:	2000      	movs	r0, #0
 80a0e74:	e000      	b.n	80a0e78 <_Z16setStopWaterTime6String+0x70>
  if (verboseMode) {
    waitUntil(meterParticlePublish);
    Particle.publish("Time",data, PRIVATE);
    lastPublish = millis();
  }
  return 1;
 80a0e76:	2001      	movs	r0, #1
}
 80a0e78:	b046      	add	sp, #280	; 0x118
 80a0e7a:	bd10      	pop	{r4, pc}
 80a0e7c:	200004e8 	.word	0x200004e8
 80a0e80:	20000320 	.word	0x20000320
 80a0e84:	080a6a2c 	.word	0x080a6a2c
 80a0e88:	080a6966 	.word	0x080a6966
 80a0e8c:	200004ac 	.word	0x200004ac
 80a0e90:	200004f0 	.word	0x200004f0
 80a0e94:	20000487 	.word	0x20000487
 80a0e98:	080a6852 	.word	0x080a6852
 80a0e9c:	2000050c 	.word	0x2000050c

080a0ea0 <_Z16setRainThreshold6String>:

int setRainThreshold(String command)
{
 80a0ea0:	b570      	push	{r4, r5, r6, lr}
 80a0ea2:	b0c6      	sub	sp, #280	; 0x118
  char * pEND;
  char data[256];
  float tempRain = strtof(command,&pEND);                      // Looks for the first float and interprets it
 80a0ea4:	a903      	add	r1, sp, #12
 80a0ea6:	6800      	ldr	r0, [r0, #0]
 80a0ea8:	f004 f8fa 	bl	80a50a0 <strtof>
  if ((tempRain < 0) || (tempRain > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
 80a0eac:	2100      	movs	r1, #0

int setRainThreshold(String command)
{
  char * pEND;
  char data[256];
  float tempRain = strtof(command,&pEND);                      // Looks for the first float and interprets it
 80a0eae:	4606      	mov	r6, r0
  if ((tempRain < 0) || (tempRain > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
 80a0eb0:	f003 f8a2 	bl	80a3ff8 <__aeabi_fcmplt>
 80a0eb4:	2800      	cmp	r0, #0
 80a0eb6:	d13b      	bne.n	80a0f30 <_Z16setRainThreshold6String+0x90>
 80a0eb8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80a0ebc:	4630      	mov	r0, r6
 80a0ebe:	f003 f8b9 	bl	80a4034 <__aeabi_fcmpgt>
 80a0ec2:	4605      	mov	r5, r0
 80a0ec4:	2800      	cmp	r0, #0
 80a0ec6:	d133      	bne.n	80a0f30 <_Z16setRainThreshold6String+0x90>
  rainThreshold = tempRain;
 80a0ec8:	4c1c      	ldr	r4, [pc, #112]	; (80a0f3c <_Z16setRainThreshold6String+0x9c>)
 80a0eca:	6026      	str	r6, [r4, #0]
  EEPROM.put(rainThresholdAddr,rainThreshold);              // Store the new value in EEPROM
 80a0ecc:	f001 ff2a 	bl	80a2d24 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 80a0ed0:	4b1b      	ldr	r3, [pc, #108]	; (80a0f40 <_Z16setRainThreshold6String+0xa0>)
 80a0ed2:	2204      	movs	r2, #4
 80a0ed4:	6818      	ldr	r0, [r3, #0]
 80a0ed6:	4621      	mov	r1, r4
 80a0ed8:	f000 fb4a 	bl	80a1570 <HAL_EEPROM_Put>
  snprintf(data, sizeof(data), "Rain threshold set to %1.2f",rainThreshold);
 80a0edc:	6820      	ldr	r0, [r4, #0]
 80a0ede:	f002 fa43 	bl	80a3368 <__aeabi_f2d>
 80a0ee2:	4a18      	ldr	r2, [pc, #96]	; (80a0f44 <_Z16setRainThreshold6String+0xa4>)
 80a0ee4:	e9cd 0100 	strd	r0, r1, [sp]
 80a0ee8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80a0eec:	a806      	add	r0, sp, #24
 80a0eee:	f000 fd85 	bl	80a19fc <snprintf>
  sprintf(RainThreshold, "%1.2f\"",rainThreshold);
 80a0ef2:	6820      	ldr	r0, [r4, #0]
 80a0ef4:	f002 fa38 	bl	80a3368 <__aeabi_f2d>
 80a0ef8:	460b      	mov	r3, r1
 80a0efa:	4602      	mov	r2, r0
 80a0efc:	4912      	ldr	r1, [pc, #72]	; (80a0f48 <_Z16setRainThreshold6String+0xa8>)
 80a0efe:	4813      	ldr	r0, [pc, #76]	; (80a0f4c <_Z16setRainThreshold6String+0xac>)
 80a0f00:	f000 fd64 	bl	80a19cc <sprintf>
  if (verboseMode) {
 80a0f04:	4b12      	ldr	r3, [pc, #72]	; (80a0f50 <_Z16setRainThreshold6String+0xb0>)
 80a0f06:	781b      	ldrb	r3, [r3, #0]
 80a0f08:	b1a3      	cbz	r3, 80a0f34 <_Z16setRainThreshold6String+0x94>
    waitUntil(meterParticlePublish);
 80a0f0a:	f7ff f9b7 	bl	80a027c <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.105>
 80a0f0e:	4b11      	ldr	r3, [pc, #68]	; (80a0f54 <_Z16setRainThreshold6String+0xb4>)
    Particle.publish("Contol",data, PRIVATE);
 80a0f10:	aa06      	add	r2, sp, #24
 80a0f12:	781b      	ldrb	r3, [r3, #0]
 80a0f14:	4910      	ldr	r1, [pc, #64]	; (80a0f58 <_Z16setRainThreshold6String+0xb8>)
 80a0f16:	a804      	add	r0, sp, #16
 80a0f18:	f88d 5000 	strb.w	r5, [sp]
 80a0f1c:	f7ff f8ee 	bl	80a00fc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.125.constprop.129>
 80a0f20:	a805      	add	r0, sp, #20
 80a0f22:	f7ff f9b6 	bl	80a0292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0f26:	f000 faf3 	bl	80a1510 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
 80a0f2a:	4b0c      	ldr	r3, [pc, #48]	; (80a0f5c <_Z16setRainThreshold6String+0xbc>)
 80a0f2c:	6018      	str	r0, [r3, #0]
 80a0f2e:	e001      	b.n	80a0f34 <_Z16setRainThreshold6String+0x94>
int setRainThreshold(String command)
{
  char * pEND;
  char data[256];
  float tempRain = strtof(command,&pEND);                      // Looks for the first float and interprets it
  if ((tempRain < 0) || (tempRain > 2)) return 0;              // Make sure it falls in a valid range or send a "fail" result
 80a0f30:	2000      	movs	r0, #0
 80a0f32:	e000      	b.n	80a0f36 <_Z16setRainThreshold6String+0x96>
  if (verboseMode) {
    waitUntil(meterParticlePublish);
    Particle.publish("Contol",data, PRIVATE);
    lastPublish = millis();
  }
  return 1;
 80a0f34:	2001      	movs	r0, #1
}
 80a0f36:	b046      	add	sp, #280	; 0x118
 80a0f38:	bd70      	pop	{r4, r5, r6, pc}
 80a0f3a:	bf00      	nop
 80a0f3c:	200004bc 	.word	0x200004bc
 80a0f40:	20000304 	.word	0x20000304
 80a0f44:	080a6a46 	.word	0x080a6a46
 80a0f48:	080a6a62 	.word	0x080a6a62
 80a0f4c:	20000491 	.word	0x20000491
 80a0f50:	200004f0 	.word	0x200004f0
 80a0f54:	20000487 	.word	0x20000487
 80a0f58:	080a6a69 	.word	0x080a6a69
 80a0f5c:	2000050c 	.word	0x2000050c

080a0f60 <_ZN10CloudClass8variableIA10_cIA6_cEEEbRKT_DpRKT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 80a0f60:	2300      	movs	r3, #0
 80a0f62:	2204      	movs	r2, #4
 80a0f64:	f000 bc82 	b.w	80a186c <spark_variable>

080a0f68 <_ZN10CloudClass8functionIA12_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 80a0f68:	4602      	mov	r2, r0
 80a0f6a:	4801      	ldr	r0, [pc, #4]	; (80a0f70 <_ZN10CloudClass8functionIA12_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
 80a0f6c:	f000 bdcc 	b.w	80a1b08 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a0f70:	080a1add 	.word	0x080a1add

080a0f74 <setup>:

// State Maching Variables
enum State { INITIALIZATION_STATE, ERROR_STATE, IDLE_STATE, SENSING_STATE, SCHEDULING_STATE, FORECASTING_STATE, WATERING_STATE, REPORTING_STATE, RESP_WAIT_STATE };
State state = INITIALIZATION_STATE;

void setup() {
 80a0f74:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinMode(donePin,OUTPUT);                        // Allows us to pet the watchdog
 80a0f76:	2101      	movs	r1, #1

// State Maching Variables
enum State { INITIALIZATION_STATE, ERROR_STATE, IDLE_STATE, SENSING_STATE, SCHEDULING_STATE, FORECASTING_STATE, WATERING_STATE, REPORTING_STATE, RESP_WAIT_STATE };
State state = INITIALIZATION_STATE;

void setup() {
 80a0f78:	b0a9      	sub	sp, #164	; 0xa4
  pinMode(donePin,OUTPUT);                        // Allows us to pet the watchdog
 80a0f7a:	2006      	movs	r0, #6
 80a0f7c:	f001 fea8 	bl	80a2cd0 <pinMode>
  digitalWrite(donePin, HIGH);                    // Pet now while we are getting set up
 80a0f80:	2101      	movs	r1, #1
 80a0f82:	2006      	movs	r0, #6
 80a0f84:	f001 feb5 	bl	80a2cf2 <digitalWrite>
  digitalWrite(donePin, LOW);
 80a0f88:	2100      	movs	r1, #0
 80a0f8a:	2006      	movs	r0, #6
 80a0f8c:	f001 feb1 	bl	80a2cf2 <digitalWrite>
  pinMode(solenoidPin,OUTPUT);                    // Pin to control the water
 80a0f90:	2101      	movs	r1, #1
 80a0f92:	2002      	movs	r0, #2
 80a0f94:	f001 fe9c 	bl	80a2cd0 <pinMode>
  pinMode(solenoidPin2,OUTPUT);                   // Pin to control the water
 80a0f98:	2101      	movs	r1, #1
 80a0f9a:	2007      	movs	r0, #7
 80a0f9c:	f001 fe98 	bl	80a2cd0 <pinMode>
  digitalWrite(solenoidPin, LOW);                 // Make sure it is off
 80a0fa0:	2100      	movs	r1, #0
 80a0fa2:	2002      	movs	r0, #2
 80a0fa4:	f001 fea5 	bl	80a2cf2 <digitalWrite>
  digitalWrite(solenoidPin2, LOW);                // Make sure it is off
 80a0fa8:	2100      	movs	r1, #0
 80a0faa:	2007      	movs	r0, #7
  pinMode(wakeUpPin,INPUT_PULLDOWN);              // The signal from the watchdog is active HIGH
  attachInterrupt(wakeUpPin, watchdogISR, RISING);// The watchdog timer will signal us and we have to respond
 80a0fac:	2400      	movs	r4, #0
  digitalWrite(donePin, HIGH);                    // Pet now while we are getting set up
  digitalWrite(donePin, LOW);
  pinMode(solenoidPin,OUTPUT);                    // Pin to control the water
  pinMode(solenoidPin2,OUTPUT);                   // Pin to control the water
  digitalWrite(solenoidPin, LOW);                 // Make sure it is off
  digitalWrite(solenoidPin2, LOW);                // Make sure it is off
 80a0fae:	f001 fea0 	bl	80a2cf2 <digitalWrite>
  pinMode(wakeUpPin,INPUT_PULLDOWN);              // The signal from the watchdog is active HIGH
 80a0fb2:	2103      	movs	r1, #3
 80a0fb4:	2011      	movs	r0, #17
 80a0fb6:	f001 fe8b 	bl	80a2cd0 <pinMode>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);// The watchdog timer will signal us and we have to respond
 80a0fba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a0fbe:	2201      	movs	r2, #1
 80a0fc0:	4994      	ldr	r1, [pc, #592]	; (80a1214 <setup+0x2a0>)
 80a0fc2:	9400      	str	r4, [sp, #0]
 80a0fc4:	2011      	movs	r0, #17
 80a0fc6:	f001 f889 	bl	80a20dc <_Z15attachInterrupttPFvvE13InterruptModeah>

  Particle.variable("WiFiStrength", SignalString);      // These variables are used to monitor the device will reduce them over time
 80a0fca:	4993      	ldr	r1, [pc, #588]	; (80a1218 <setup+0x2a4>)
 80a0fcc:	4893      	ldr	r0, [pc, #588]	; (80a121c <setup+0x2a8>)
 80a0fce:	f7ff ffc7 	bl	80a0f60 <_ZN10CloudClass8variableIA10_cIA6_cEEEbRKT_DpRKT0_>
  Particle.variable("Moisture", Moisture);        // Soil moisture Level
 80a0fd2:	4993      	ldr	r1, [pc, #588]	; (80a1220 <setup+0x2ac>)
 80a0fd4:	4893      	ldr	r0, [pc, #588]	; (80a1224 <setup+0x2b0>)
 80a0fd6:	f7ff ffc3 	bl	80a0f60 <_ZN10CloudClass8variableIA10_cIA6_cEEEbRKT_DpRKT0_>
  Particle.variable("Enabled", Enabled);     // Shows whether watering is enabled
 80a0fda:	4993      	ldr	r1, [pc, #588]	; (80a1228 <setup+0x2b4>)
 80a0fdc:	4893      	ldr	r0, [pc, #588]	; (80a122c <setup+0x2b8>)
 80a0fde:	f7ff ffbf 	bl	80a0f60 <_ZN10CloudClass8variableIA10_cIA6_cEEEbRKT_DpRKT0_>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 80a0fe2:	4993      	ldr	r1, [pc, #588]	; (80a1230 <setup+0x2bc>)
 80a0fe4:	4623      	mov	r3, r4
 80a0fe6:	2204      	movs	r2, #4
 80a0fe8:	6809      	ldr	r1, [r1, #0]
 80a0fea:	4892      	ldr	r0, [pc, #584]	; (80a1234 <setup+0x2c0>)
 80a0fec:	f000 fc3e 	bl	80a186c <spark_variable>
  Particle.variable("Release",releaseNumber);     // So we can see the software release running
  Particle.variable("LastWater",lastWateredString);// When did we last water
 80a0ff0:	4991      	ldr	r1, [pc, #580]	; (80a1238 <setup+0x2c4>)
 80a0ff2:	4892      	ldr	r0, [pc, #584]	; (80a123c <setup+0x2c8>)
 80a0ff4:	f7ff ffb4 	bl	80a0f60 <_ZN10CloudClass8variableIA10_cIA6_cEEEbRKT_DpRKT0_>
  Particle.variable("RainFcst", Rainfall);        // How much rain is Forecasted
 80a0ff8:	4991      	ldr	r1, [pc, #580]	; (80a1240 <setup+0x2cc>)
 80a0ffa:	4892      	ldr	r0, [pc, #584]	; (80a1244 <setup+0x2d0>)
 80a0ffc:	f7ff ffb0 	bl	80a0f60 <_ZN10CloudClass8variableIA10_cIA6_cEEEbRKT_DpRKT0_>
  Particle.variable("SoilTemp",Temperature);      // Displays soil temp in degrees F
 80a1000:	4991      	ldr	r1, [pc, #580]	; (80a1248 <setup+0x2d4>)
 80a1002:	4892      	ldr	r0, [pc, #584]	; (80a124c <setup+0x2d8>)
 80a1004:	f7ff ffac 	bl	80a0f60 <_ZN10CloudClass8variableIA10_cIA6_cEEEbRKT_DpRKT0_>
  Particle.variable("StartWater",StartTime);
 80a1008:	4991      	ldr	r1, [pc, #580]	; (80a1250 <setup+0x2dc>)
 80a100a:	4892      	ldr	r0, [pc, #584]	; (80a1254 <setup+0x2e0>)
 80a100c:	f7ff ffa8 	bl	80a0f60 <_ZN10CloudClass8variableIA10_cIA6_cEEEbRKT_DpRKT0_>
  Particle.variable("StopWater",StopTime);
 80a1010:	4991      	ldr	r1, [pc, #580]	; (80a1258 <setup+0x2e4>)
 80a1012:	4892      	ldr	r0, [pc, #584]	; (80a125c <setup+0x2e8>)
 80a1014:	f7ff ffa4 	bl	80a0f60 <_ZN10CloudClass8variableIA10_cIA6_cEEEbRKT_DpRKT0_>
  Particle.variable("RainLimit",RainThreshold);
 80a1018:	4991      	ldr	r1, [pc, #580]	; (80a1260 <setup+0x2ec>)
 80a101a:	4892      	ldr	r0, [pc, #584]	; (80a1264 <setup+0x2f0>)
 80a101c:	f7ff ffa0 	bl	80a0f60 <_ZN10CloudClass8variableIA10_cIA6_cEEEbRKT_DpRKT0_>
  Particle.function("Start-Stop", startStop);     // Start and stop watering
 80a1020:	4991      	ldr	r1, [pc, #580]	; (80a1268 <setup+0x2f4>)
 80a1022:	4892      	ldr	r0, [pc, #584]	; (80a126c <setup+0x2f8>)
 80a1024:	f7ff ffa0 	bl	80a0f68 <_ZN10CloudClass8functionIA12_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Enabled", wateringEnabled);  // I can disable watering simply here
 80a1028:	4991      	ldr	r1, [pc, #580]	; (80a1270 <setup+0x2fc>)
 80a102a:	4880      	ldr	r0, [pc, #512]	; (80a122c <setup+0x2b8>)
 80a102c:	f7ff ff9c 	bl	80a0f68 <_ZN10CloudClass8functionIA12_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Measure", takeMeasurements); // If we want to see Temp / Moisture values updated
 80a1030:	4990      	ldr	r1, [pc, #576]	; (80a1274 <setup+0x300>)
 80a1032:	4891      	ldr	r0, [pc, #580]	; (80a1278 <setup+0x304>)
 80a1034:	f7ff ff98 	bl	80a0f68 <_ZN10CloudClass8functionIA12_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-Timezone",setTimeZone);  // Timezone for local as an offset from GMT (EDT is -4)
 80a1038:	4990      	ldr	r1, [pc, #576]	; (80a127c <setup+0x308>)
 80a103a:	4891      	ldr	r0, [pc, #580]	; (80a1280 <setup+0x30c>)
 80a103c:	f7ff ff94 	bl	80a0f68 <_ZN10CloudClass8functionIA12_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-Start",setStartWaterTime);  // Timezone for local as an offset from GMT (EDT is -4)
 80a1040:	4990      	ldr	r1, [pc, #576]	; (80a1284 <setup+0x310>)
 80a1042:	4891      	ldr	r0, [pc, #580]	; (80a1288 <setup+0x314>)
 80a1044:	f7ff ff90 	bl	80a0f68 <_ZN10CloudClass8functionIA12_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-Stop",setStopWaterTime);  // Timezone for local as an offset from GMT (EDT is -4)
 80a1048:	4990      	ldr	r1, [pc, #576]	; (80a128c <setup+0x318>)
 80a104a:	4891      	ldr	r0, [pc, #580]	; (80a1290 <setup+0x31c>)
 80a104c:	f7ff ff8c 	bl	80a0f68 <_ZN10CloudClass8functionIA12_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-Rain",setRainThreshold);  // Timezone for local as an offset from GMT (EDT is -4)
 80a1050:	4990      	ldr	r1, [pc, #576]	; (80a1294 <setup+0x320>)
 80a1052:	4891      	ldr	r0, [pc, #580]	; (80a1298 <setup+0x324>)
 80a1054:	f7ff ff88 	bl	80a0f68 <_ZN10CloudClass8functionIA12_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Set-Verbose",setVerboseMode);// Increases the amount of messaging from the AquaMaster
 80a1058:	4990      	ldr	r1, [pc, #576]	; (80a129c <setup+0x328>)
 80a105a:	4891      	ldr	r0, [pc, #580]	; (80a12a0 <setup+0x32c>)
 80a105c:	f7ff ff84 	bl	80a0f68 <_ZN10CloudClass8functionIA12_cIPFi6StringEEEEbRKT_DpT0_>

  Wire.begin();                                   // Start Wire
 80a1060:	f001 fe74 	bl	80a2d4c <_Z19__fetch_global_Wirev>
 80a1064:	f001 f812 	bl	80a208c <_ZN7TwoWire5beginEv>
  sensor.begin(true);                             // reset the Chirp sensor
 80a1068:	2101      	movs	r1, #1
 80a106a:	488e      	ldr	r0, [pc, #568]	; (80a12a4 <setup+0x330>)
 80a106c:	f000 f995 	bl	80a139a <_ZN21I2CSoilMoistureSensor5beginEb>
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
 80a1070:	a804      	add	r0, sp, #16
 80a1072:	f000 fc1b 	bl	80a18ac <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
 80a1076:	4623      	mov	r3, r4
 80a1078:	227d      	movs	r2, #125	; 0x7d
 80a107a:	a908      	add	r1, sp, #32
 80a107c:	a804      	add	r0, sp, #16
 80a107e:	f001 fa32 	bl	80a24e6 <_ZNK6String8getBytesEPhjj>
    particle::Future<bool> publish(const char* name, const char* data) PARTICLE_DEPRECATED_API_DEFAULT_PUBLISH_SCOPE;
    particle::Future<bool> publish(const char* name, const char* data, int ttl) PARTICLE_DEPRECATED_API_DEFAULT_PUBLISH_SCOPE;

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
 80a1082:	4623      	mov	r3, r4
 80a1084:	4622      	mov	r2, r4
 80a1086:	4988      	ldr	r1, [pc, #544]	; (80a12a8 <setup+0x334>)
 80a1088:	9401      	str	r4, [sp, #4]
 80a108a:	9400      	str	r4, [sp, #0]
 80a108c:	a808      	add	r0, sp, #32
 80a108e:	f000 fc1d 	bl	80a18cc <spark_subscribe>
  String deviceID = System.deviceID();            // Unique to your Photon
  deviceID.toCharArray(responseTopic,125);
  Particle.subscribe(responseTopic, AquaMasterHandler, MY_DEVICES);       // Subscribe to the integration response event
  //Particle.subscribe("hook-response/weatherU_hook", weatherHandler, MY_DEVICES);       // Subscribe to weather response

  int8_t tempTimeZoneOffset = EEPROM.read(timeZoneAddr);// Load Time zone data from EEPROM
 80a1092:	f001 fe47 	bl	80a2d24 <_Z21__fetch_global_EEPROMv>
 80a1096:	4b85      	ldr	r3, [pc, #532]	; (80a12ac <setup+0x338>)
 80a1098:	6818      	ldr	r0, [r3, #0]
 80a109a:	f7ff f82b 	bl	80a00f4 <_ZN11EEPROMClass4readEi.isra.35>
  if (tempTimeZoneOffset > -12 && tempTimeZoneOffset < 12) Time.zone((float)tempTimeZoneOffset);
 80a109e:	f100 030b 	add.w	r3, r0, #11
 80a10a2:	b2db      	uxtb	r3, r3
 80a10a4:	2b16      	cmp	r3, #22
 80a10a6:	d803      	bhi.n	80a10b0 <setup+0x13c>
 80a10a8:	b240      	sxtb	r0, r0
 80a10aa:	f002 fdb3 	bl	80a3c14 <__aeabi_i2f>
 80a10ae:	e000      	b.n	80a10b2 <setup+0x13e>
  else Time.zone(-4);                                   // Default if no valid number stored - Raleigh DST (watering is for the summer)
 80a10b0:	487f      	ldr	r0, [pc, #508]	; (80a12b0 <setup+0x33c>)

  resetCount = EEPROM.read(resetCountAddr);             // Retrive system recount data from EEPROM
 80a10b2:	4e80      	ldr	r6, [pc, #512]	; (80a12b4 <setup+0x340>)
  Particle.subscribe(responseTopic, AquaMasterHandler, MY_DEVICES);       // Subscribe to the integration response event
  //Particle.subscribe("hook-response/weatherU_hook", weatherHandler, MY_DEVICES);       // Subscribe to weather response

  int8_t tempTimeZoneOffset = EEPROM.read(timeZoneAddr);// Load Time zone data from EEPROM
  if (tempTimeZoneOffset > -12 && tempTimeZoneOffset < 12) Time.zone((float)tempTimeZoneOffset);
  else Time.zone(-4);                                   // Default if no valid number stored - Raleigh DST (watering is for the summer)
 80a10b4:	f001 fa8e 	bl	80a25d4 <_ZN9TimeClass4zoneEf>

  resetCount = EEPROM.read(resetCountAddr);             // Retrive system recount data from EEPROM
 80a10b8:	f001 fe34 	bl	80a2d24 <_Z21__fetch_global_EEPROMv>
 80a10bc:	6830      	ldr	r0, [r6, #0]
 80a10be:	f7ff f819 	bl	80a00f4 <_ZN11EEPROMClass4readEi.isra.35>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 80a10c2:	ac28      	add	r4, sp, #160	; 0xa0
 80a10c4:	2200      	movs	r2, #0
 80a10c6:	4d7c      	ldr	r5, [pc, #496]	; (80a12b8 <setup+0x344>)
 80a10c8:	f844 2d98 	str.w	r2, [r4, #-152]!
 80a10cc:	7028      	strb	r0, [r5, #0]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80a10ce:	4611      	mov	r1, r2
 80a10d0:	4620      	mov	r0, r4
 80a10d2:	f000 fa0d 	bl	80a14f0 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 80a10d6:	9b02      	ldr	r3, [sp, #8]
  if (System.resetReason() == RESET_REASON_PIN_RESET)   // Check to see if we are starting from a pin reset
 80a10d8:	2b14      	cmp	r3, #20
 80a10da:	d108      	bne.n	80a10ee <setup+0x17a>
  {
    resetCount++;
 80a10dc:	782b      	ldrb	r3, [r5, #0]
 80a10de:	3301      	adds	r3, #1
 80a10e0:	702b      	strb	r3, [r5, #0]
    EEPROM.write(resetCountAddr,resetCount);            // If so, store incremented number - watchdog must have done This
 80a10e2:	f001 fe1f 	bl	80a2d24 <_Z21__fetch_global_EEPROMv>
 80a10e6:	7829      	ldrb	r1, [r5, #0]
 80a10e8:	6830      	ldr	r0, [r6, #0]
 80a10ea:	f7ff f805 	bl	80a00f8 <_ZN11EEPROMClass5writeEih.isra.36>
  }

  // Load all the state values from EEPROM on startup
  controlRegister = EEPROM.read(controlRegisterAddr);   // Get the control register from EEMPROM to load state variables
 80a10ee:	f001 fe19 	bl	80a2d24 <_Z21__fetch_global_EEPROMv>
 80a10f2:	4b72      	ldr	r3, [pc, #456]	; (80a12bc <setup+0x348>)
  verboseMode = controlRegister  & 0b00000001;
 80a10f4:	4d72      	ldr	r5, [pc, #456]	; (80a12c0 <setup+0x34c>)
    resetCount++;
    EEPROM.write(resetCountAddr,resetCount);            // If so, store incremented number - watchdog must have done This
  }

  // Load all the state values from EEPROM on startup
  controlRegister = EEPROM.read(controlRegisterAddr);   // Get the control register from EEMPROM to load state variables
 80a10f6:	6818      	ldr	r0, [r3, #0]
 80a10f8:	f7fe fffc 	bl	80a00f4 <_ZN11EEPROMClass4readEi.isra.35>
 80a10fc:	4b71      	ldr	r3, [pc, #452]	; (80a12c4 <setup+0x350>)
  verboseMode = controlRegister  & 0b00000001;
  waterEnabled = controlRegister & 0b00000010;
  if (waterEnabled) sprintf(Enabled,"true");
  else sprintf(Enabled,"false");
  lastWateredHour = EEPROM.read(lastWateredHourAddr);   // Load the last watered period from EEPROM
 80a10fe:	4e72      	ldr	r6, [pc, #456]	; (80a12c8 <setup+0x354>)
    resetCount++;
    EEPROM.write(resetCountAddr,resetCount);            // If so, store incremented number - watchdog must have done This
  }

  // Load all the state values from EEPROM on startup
  controlRegister = EEPROM.read(controlRegisterAddr);   // Get the control register from EEMPROM to load state variables
 80a1100:	7018      	strb	r0, [r3, #0]
  verboseMode = controlRegister  & 0b00000001;
 80a1102:	f000 0301 	and.w	r3, r0, #1
 80a1106:	f000 0002 	and.w	r0, r0, #2
  waterEnabled = controlRegister & 0b00000010;
 80a110a:	2800      	cmp	r0, #0
    EEPROM.write(resetCountAddr,resetCount);            // If so, store incremented number - watchdog must have done This
  }

  // Load all the state values from EEPROM on startup
  controlRegister = EEPROM.read(controlRegisterAddr);   // Get the control register from EEMPROM to load state variables
  verboseMode = controlRegister  & 0b00000001;
 80a110c:	702b      	strb	r3, [r5, #0]
  waterEnabled = controlRegister & 0b00000010;
 80a110e:	4b6f      	ldr	r3, [pc, #444]	; (80a12cc <setup+0x358>)
 80a1110:	bf15      	itete	ne
 80a1112:	2201      	movne	r2, #1
 80a1114:	2200      	moveq	r2, #0
  if (waterEnabled) sprintf(Enabled,"true");
 80a1116:	496e      	ldrne	r1, [pc, #440]	; (80a12d0 <setup+0x35c>)
  else sprintf(Enabled,"false");
 80a1118:	496e      	ldreq	r1, [pc, #440]	; (80a12d4 <setup+0x360>)
 80a111a:	4843      	ldr	r0, [pc, #268]	; (80a1228 <setup+0x2b4>)
  }

  // Load all the state values from EEPROM on startup
  controlRegister = EEPROM.read(controlRegisterAddr);   // Get the control register from EEMPROM to load state variables
  verboseMode = controlRegister  & 0b00000001;
  waterEnabled = controlRegister & 0b00000010;
 80a111c:	701a      	strb	r2, [r3, #0]
  if (waterEnabled) sprintf(Enabled,"true");
  else sprintf(Enabled,"false");
 80a111e:	f003 f949 	bl	80a43b4 <strcpy>
  lastWateredHour = EEPROM.read(lastWateredHourAddr);   // Load the last watered period from EEPROM
 80a1122:	f001 fdff 	bl	80a2d24 <_Z21__fetch_global_EEPROMv>
 80a1126:	4b6c      	ldr	r3, [pc, #432]	; (80a12d8 <setup+0x364>)
  lastWateredDay = EEPROM.read(lastWateredDayAddr);     // Load the last watered day from EEPROM
 80a1128:	4f6c      	ldr	r7, [pc, #432]	; (80a12dc <setup+0x368>)
  controlRegister = EEPROM.read(controlRegisterAddr);   // Get the control register from EEMPROM to load state variables
  verboseMode = controlRegister  & 0b00000001;
  waterEnabled = controlRegister & 0b00000010;
  if (waterEnabled) sprintf(Enabled,"true");
  else sprintf(Enabled,"false");
  lastWateredHour = EEPROM.read(lastWateredHourAddr);   // Load the last watered period from EEPROM
 80a112a:	6818      	ldr	r0, [r3, #0]
 80a112c:	f7fe ffe2 	bl	80a00f4 <_ZN11EEPROMClass4readEi.isra.35>
 80a1130:	7030      	strb	r0, [r6, #0]
  lastWateredDay = EEPROM.read(lastWateredDayAddr);     // Load the last watered day from EEPROM
 80a1132:	f001 fdf7 	bl	80a2d24 <_Z21__fetch_global_EEPROMv>
 80a1136:	4b6a      	ldr	r3, [pc, #424]	; (80a12e0 <setup+0x36c>)
 80a1138:	6818      	ldr	r0, [r3, #0]
 80a113a:	f7fe ffdb 	bl	80a00f4 <_ZN11EEPROMClass4readEi.isra.35>
 80a113e:	7038      	strb	r0, [r7, #0]
  lastWateredMonth = EEPROM.read(lastWateredMonthAddr); // Load the last watered month from EEPROM
 80a1140:	f001 fdf0 	bl	80a2d24 <_Z21__fetch_global_EEPROMv>
 80a1144:	4b67      	ldr	r3, [pc, #412]	; (80a12e4 <setup+0x370>)
 80a1146:	6818      	ldr	r0, [r3, #0]
 80a1148:	f7fe ffd4 	bl	80a00f4 <_ZN11EEPROMClass4readEi.isra.35>
  sprintf(lastWateredString, "%u/%u %u:00", lastWateredMonth,lastWateredDay,lastWateredHour);  // Build the last watered string
 80a114c:	7831      	ldrb	r1, [r6, #0]
  waterEnabled = controlRegister & 0b00000010;
  if (waterEnabled) sprintf(Enabled,"true");
  else sprintf(Enabled,"false");
  lastWateredHour = EEPROM.read(lastWateredHourAddr);   // Load the last watered period from EEPROM
  lastWateredDay = EEPROM.read(lastWateredDayAddr);     // Load the last watered day from EEPROM
  lastWateredMonth = EEPROM.read(lastWateredMonthAddr); // Load the last watered month from EEPROM
 80a114e:	4b66      	ldr	r3, [pc, #408]	; (80a12e8 <setup+0x374>)
 80a1150:	4602      	mov	r2, r0
 80a1152:	7018      	strb	r0, [r3, #0]
  sprintf(lastWateredString, "%u/%u %u:00", lastWateredMonth,lastWateredDay,lastWateredHour);  // Build the last watered string
 80a1154:	783b      	ldrb	r3, [r7, #0]
 80a1156:	4838      	ldr	r0, [pc, #224]	; (80a1238 <setup+0x2c4>)
 80a1158:	9100      	str	r1, [sp, #0]
 80a115a:	4964      	ldr	r1, [pc, #400]	; (80a12ec <setup+0x378>)
 80a115c:	f000 fc36 	bl	80a19cc <sprintf>
  startWaterHour = EEPROM.read(startWaterHourAddr);     // When to start watering
 80a1160:	f001 fde0 	bl	80a2d24 <_Z21__fetch_global_EEPROMv>
 80a1164:	4b62      	ldr	r3, [pc, #392]	; (80a12f0 <setup+0x37c>)
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 80a1166:	4e63      	ldr	r6, [pc, #396]	; (80a12f4 <setup+0x380>)
 80a1168:	6818      	ldr	r0, [r3, #0]
 80a116a:	f7fe ffc3 	bl	80a00f4 <_ZN11EEPROMClass4readEi.isra.35>
 80a116e:	4b62      	ldr	r3, [pc, #392]	; (80a12f8 <setup+0x384>)
 80a1170:	4602      	mov	r2, r0
 80a1172:	7018      	strb	r0, [r3, #0]
  sprintf(StartTime, "%u:00",startWaterHour);
 80a1174:	4961      	ldr	r1, [pc, #388]	; (80a12fc <setup+0x388>)
 80a1176:	4836      	ldr	r0, [pc, #216]	; (80a1250 <setup+0x2dc>)
 80a1178:	f000 fc28 	bl	80a19cc <sprintf>
  stopWaterHour = EEPROM.read(stopWaterHourAddr);       // When to stop watering
 80a117c:	f001 fdd2 	bl	80a2d24 <_Z21__fetch_global_EEPROMv>
 80a1180:	4b5f      	ldr	r3, [pc, #380]	; (80a1300 <setup+0x38c>)
 80a1182:	6818      	ldr	r0, [r3, #0]
 80a1184:	f7fe ffb6 	bl	80a00f4 <_ZN11EEPROMClass4readEi.isra.35>
 80a1188:	4b5e      	ldr	r3, [pc, #376]	; (80a1304 <setup+0x390>)
 80a118a:	4602      	mov	r2, r0
 80a118c:	7018      	strb	r0, [r3, #0]
  sprintf(StopTime, "%u:00",stopWaterHour);
 80a118e:	495b      	ldr	r1, [pc, #364]	; (80a12fc <setup+0x388>)
 80a1190:	4831      	ldr	r0, [pc, #196]	; (80a1258 <setup+0x2e4>)
 80a1192:	f000 fc1b 	bl	80a19cc <sprintf>
  EEPROM.get(rainThresholdAddr,rainThreshold);        // Load the rain threshold from Memory
 80a1196:	f001 fdc5 	bl	80a2d24 <_Z21__fetch_global_EEPROMv>
 80a119a:	4b5b      	ldr	r3, [pc, #364]	; (80a1308 <setup+0x394>)
 80a119c:	2204      	movs	r2, #4
 80a119e:	6818      	ldr	r0, [r3, #0]
 80a11a0:	4631      	mov	r1, r6
 80a11a2:	f000 f9dd 	bl	80a1560 <HAL_EEPROM_Get>
  sprintf(RainThreshold, "%1.2f\"",rainThreshold);
 80a11a6:	6830      	ldr	r0, [r6, #0]
 80a11a8:	f002 f8de 	bl	80a3368 <__aeabi_f2d>
 80a11ac:	460b      	mov	r3, r1
 80a11ae:	4602      	mov	r2, r0
 80a11b0:	4956      	ldr	r1, [pc, #344]	; (80a130c <setup+0x398>)
 80a11b2:	482b      	ldr	r0, [pc, #172]	; (80a1260 <setup+0x2ec>)
 80a11b4:	f000 fc0a 	bl	80a19cc <sprintf>

  waitUntil(meterParticlePublish);
 80a11b8:	f7ff f860 	bl	80a027c <_ZN11SystemClass13waitConditionIZ11setTimeZone6StringEUlvE0_EEbT_.isra.105>
  if (sensor.getAddress() == 255)
 80a11bc:	4839      	ldr	r0, [pc, #228]	; (80a12a4 <setup+0x330>)
 80a11be:	f000 f96f 	bl	80a14a0 <_ZN21I2CSoilMoistureSensor10getAddressEv>
 80a11c2:	28ff      	cmp	r0, #255	; 0xff
 80a11c4:	4b52      	ldr	r3, [pc, #328]	; (80a1310 <setup+0x39c>)
 80a11c6:	d10a      	bne.n	80a11de <setup+0x26a>
  {
    state = IDLE_STATE; // Finished Initialization - time to enter main loop and get sensor data
 80a11c8:	2202      	movs	r2, #2
 80a11ca:	701a      	strb	r2, [r3, #0]
    if (verboseMode) Particle.publish("State","Idle", PRIVATE);
 80a11cc:	782b      	ldrb	r3, [r5, #0]
 80a11ce:	b1bb      	cbz	r3, 80a1200 <setup+0x28c>
 80a11d0:	4b50      	ldr	r3, [pc, #320]	; (80a1314 <setup+0x3a0>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 80a11d2:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 80a11d4:	781b      	ldrb	r3, [r3, #0]
 80a11d6:	f88d 2000 	strb.w	r2, [sp]
 80a11da:	4a4f      	ldr	r2, [pc, #316]	; (80a1318 <setup+0x3a4>)
 80a11dc:	e009      	b.n	80a11f2 <setup+0x27e>
  }
  else
  {
    state = ERROR_STATE;                             // If initialization fails, go straight to ERROR_STATE
 80a11de:	2201      	movs	r2, #1
 80a11e0:	701a      	strb	r2, [r3, #0]
    if (verboseMode) Particle.publish("State","Error", PRIVATE);
 80a11e2:	782b      	ldrb	r3, [r5, #0]
 80a11e4:	b163      	cbz	r3, 80a1200 <setup+0x28c>
 80a11e6:	4b4b      	ldr	r3, [pc, #300]	; (80a1314 <setup+0x3a0>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 80a11e8:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 80a11ea:	781b      	ldrb	r3, [r3, #0]
 80a11ec:	f88d 2000 	strb.w	r2, [sp]
 80a11f0:	4a4a      	ldr	r2, [pc, #296]	; (80a131c <setup+0x3a8>)
 80a11f2:	4620      	mov	r0, r4
 80a11f4:	494a      	ldr	r1, [pc, #296]	; (80a1320 <setup+0x3ac>)
 80a11f6:	f7fe ff81 	bl	80a00fc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.125.constprop.129>
 80a11fa:	a803      	add	r0, sp, #12
 80a11fc:	f7ff f849 	bl	80a0292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1200:	f000 f986 	bl	80a1510 <HAL_Timer_Get_Milli_Seconds>
  }
  lastPublish = millis();
 80a1204:	4b47      	ldr	r3, [pc, #284]	; (80a1324 <setup+0x3b0>)
 80a1206:	6018      	str	r0, [r3, #0]

  Wire.begin();                                   // Start Wire
  sensor.begin(true);                             // reset the Chirp sensor

  char responseTopic[125];                        // This is where we build a unique subscription handle
  String deviceID = System.deviceID();            // Unique to your Photon
 80a1208:	a804      	add	r0, sp, #16
 80a120a:	f001 f8e6 	bl	80a23da <_ZN6StringD1Ev>
  {
    state = ERROR_STATE;                             // If initialization fails, go straight to ERROR_STATE
    if (verboseMode) Particle.publish("State","Error", PRIVATE);
  }
  lastPublish = millis();
}
 80a120e:	b029      	add	sp, #164	; 0xa4
 80a1210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1212:	bf00      	nop
 80a1214:	080a00d1 	.word	0x080a00d1
 80a1218:	200004f8 	.word	0x200004f8
 80a121c:	080a6a70 	.word	0x080a6a70
 80a1220:	20000497 	.word	0x20000497
 80a1224:	080a6a7d 	.word	0x080a6a7d
 80a1228:	20000465 	.word	0x20000465
 80a122c:	080a69b2 	.word	0x080a69b2
 80a1230:	20000308 	.word	0x20000308
 80a1234:	080a6a86 	.word	0x080a6a86
 80a1238:	200004c0 	.word	0x200004c0
 80a123c:	080a6a8e 	.word	0x080a6a8e
 80a1240:	20000324 	.word	0x20000324
 80a1244:	080a6a98 	.word	0x080a6a98
 80a1248:	20000489 	.word	0x20000489
 80a124c:	080a6aa1 	.word	0x080a6aa1
 80a1250:	20000518 	.word	0x20000518
 80a1254:	080a6aaa 	.word	0x080a6aaa
 80a1258:	200004ac 	.word	0x200004ac
 80a125c:	080a6ab5 	.word	0x080a6ab5
 80a1260:	20000491 	.word	0x20000491
 80a1264:	080a6abf 	.word	0x080a6abf
 80a1268:	080a0a35 	.word	0x080a0a35
 80a126c:	080a6ac9 	.word	0x080a6ac9
 80a1270:	080a0afd 	.word	0x080a0afd
 80a1274:	080a00b5 	.word	0x080a00b5
 80a1278:	080a6ad4 	.word	0x080a6ad4
 80a127c:	080a0be1 	.word	0x080a0be1
 80a1280:	080a6adc 	.word	0x080a6adc
 80a1284:	080a0d71 	.word	0x080a0d71
 80a1288:	080a6ae9 	.word	0x080a6ae9
 80a128c:	080a0e09 	.word	0x080a0e09
 80a1290:	080a6af3 	.word	0x080a6af3
 80a1294:	080a0ea1 	.word	0x080a0ea1
 80a1298:	080a6afc 	.word	0x080a6afc
 80a129c:	080a0cad 	.word	0x080a0cad
 80a12a0:	080a6b05 	.word	0x080a6b05
 80a12a4:	20000520 	.word	0x20000520
 80a12a8:	080a0981 	.word	0x080a0981
 80a12ac:	20000348 	.word	0x20000348
 80a12b0:	c0800000 	.word	0xc0800000
 80a12b4:	20000318 	.word	0x20000318
 80a12b8:	200004da 	.word	0x200004da
 80a12bc:	200004e0 	.word	0x200004e0
 80a12c0:	200004f0 	.word	0x200004f0
 80a12c4:	2000051e 	.word	0x2000051e
 80a12c8:	200004b8 	.word	0x200004b8
 80a12cc:	200004d9 	.word	0x200004d9
 80a12d0:	080a69ba 	.word	0x080a69ba
 80a12d4:	080a69d1 	.word	0x080a69d1
 80a12d8:	20000354 	.word	0x20000354
 80a12dc:	200004b2 	.word	0x200004b2
 80a12e0:	20000314 	.word	0x20000314
 80a12e4:	20000310 	.word	0x20000310
 80a12e8:	200004ab 	.word	0x200004ab
 80a12ec:	080a6960 	.word	0x080a6960
 80a12f0:	2000030c 	.word	0x2000030c
 80a12f4:	200004bc 	.word	0x200004bc
 80a12f8:	20000464 	.word	0x20000464
 80a12fc:	080a6966 	.word	0x080a6966
 80a1300:	20000320 	.word	0x20000320
 80a1304:	200004e8 	.word	0x200004e8
 80a1308:	20000304 	.word	0x20000304
 80a130c:	080a6a62 	.word	0x080a6a62
 80a1310:	200004b3 	.word	0x200004b3
 80a1314:	20000487 	.word	0x20000487
 80a1318:	080a690e 	.word	0x080a690e
 80a131c:	080a676c 	.word	0x080a676c
 80a1320:	080a67e1 	.word	0x080a67e1
 80a1324:	2000050c 	.word	0x2000050c

080a1328 <_GLOBAL__sub_I_sensor>:

bool meterParticlePublish(void)
{
  if(millis() - lastPublish >= publishFrequency) return 1;
  else return 0;
}
 80a1328:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a132a:	4b0b      	ldr	r3, [pc, #44]	; (80a1358 <_GLOBAL__sub_I_sensor+0x30>)
 80a132c:	2401      	movs	r4, #1
 80a132e:	701c      	strb	r4, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a1330:	f000 f92e 	bl	80a1590 <HAL_Pin_Map>
    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
    }

    int selectAntenna(WLanSelectAntenna_TypeDef antenna) {
        return wlan_select_antenna(antenna);
 80a1334:	4620      	mov	r0, r4
 80a1336:	f000 fa3d 	bl	80a17b4 <wlan_select_antenna>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
 80a133a:	4621      	mov	r1, r4
 80a133c:	2004      	movs	r0, #4
 80a133e:	f000 f8c7 	bl	80a14d0 <HAL_Feature_Set>


STARTUP(WiFi.selectAntenna(ANT_EXTERNAL));      // Use this line to enable the external WiFi Antenna
//STARTUP(WiFi.selectAntenna(ANT_INTERNAL));    // Use this line to enable the external WiFi Antenna
STARTUP(System.enableFeature(FEATURE_RESET_INFO));  // Track why we reset
SYSTEM_THREAD(ENABLED);
 80a1342:	4620      	mov	r0, r4
 80a1344:	2100      	movs	r1, #0
 80a1346:	f000 fa5d 	bl	80a1804 <system_thread_set_state>

bool meterParticlePublish(void)
{
  if(millis() - lastPublish >= publishFrequency) return 1;
  else return 0;
}
 80a134a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

// Included Libraries
#include <I2CSoilMoistureSensor.h>          // Apollon77's Chirp Library: https://github.com/Apollon77/I2CSoilMoistureSensor

// Function Prototypes
I2CSoilMoistureSensor sensor;               // For the Chirp sensor
 80a134e:	2120      	movs	r1, #32
 80a1350:	4802      	ldr	r0, [pc, #8]	; (80a135c <_GLOBAL__sub_I_sensor+0x34>)
 80a1352:	f000 b809 	b.w	80a1368 <_ZN21I2CSoilMoistureSensorC1Eh>
 80a1356:	bf00      	nop
 80a1358:	20000487 	.word	0x20000487
 80a135c:	20000520 	.word	0x20000520

080a1360 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a1360:	6803      	ldr	r3, [r0, #0]
 80a1362:	b2c9      	uxtb	r1, r1
 80a1364:	689b      	ldr	r3, [r3, #8]
 80a1366:	4718      	bx	r3

080a1368 <_ZN21I2CSoilMoistureSensorC1Eh>:

/*----------------------------------------------------------------------*
 * Constructor.                                                         *
 * Optionally set sensor I2C address if different from default          *
 *----------------------------------------------------------------------*/
I2CSoilMoistureSensor::I2CSoilMoistureSensor(uint8_t addr) : sensorAddress(addr) {
 80a1368:	6001      	str	r1, [r0, #0]
  // nothing to do ... Wire.begin needs to be put outside of class
}
 80a136a:	4770      	bx	lr

080a136c <_ZN21I2CSoilMoistureSensor20writeI2CRegister8bitEii>:
}

/*----------------------------------------------------------------------*
 * Helper method to write an 8 bit value to the sensor via I2C          *
 *----------------------------------------------------------------------*/
void I2CSoilMoistureSensor::writeI2CRegister8bit(int addr, int value) {
 80a136c:	b538      	push	{r3, r4, r5, lr}
 80a136e:	460d      	mov	r5, r1
 80a1370:	4614      	mov	r4, r2
  i2cBeginTransmission(addr);
 80a1372:	f001 fceb 	bl	80a2d4c <_Z19__fetch_global_Wirev>
 80a1376:	4629      	mov	r1, r5
 80a1378:	f000 fea0 	bl	80a20bc <_ZN7TwoWire17beginTransmissionEi>
  i2cWrite(value);
 80a137c:	f001 fce6 	bl	80a2d4c <_Z19__fetch_global_Wirev>
 80a1380:	4621      	mov	r1, r4
 80a1382:	f7ff ffed 	bl	80a1360 <_ZN7TwoWire5writeEi>
  i2cEndTransmission();
 80a1386:	f001 fce1 	bl	80a2d4c <_Z19__fetch_global_Wirev>
}
 80a138a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 * Helper method to write an 8 bit value to the sensor via I2C          *
 *----------------------------------------------------------------------*/
void I2CSoilMoistureSensor::writeI2CRegister8bit(int addr, int value) {
  i2cBeginTransmission(addr);
  i2cWrite(value);
  i2cEndTransmission();
 80a138e:	f000 be9c 	b.w	80a20ca <_ZN7TwoWire15endTransmissionEv>

080a1392 <_ZN21I2CSoilMoistureSensor11resetSensorEv>:
/*----------------------------------------------------------------------*
 * Resets sensor. Give the sensor 0.5-1 second time to boot up after    *
 * reset.                                                               *
 *----------------------------------------------------------------------*/
void I2CSoilMoistureSensor::resetSensor() {
  writeI2CRegister8bit(sensorAddress, SOILMOISTURESENSOR_RESET);
 80a1392:	2206      	movs	r2, #6
 80a1394:	6801      	ldr	r1, [r0, #0]
 80a1396:	f7ff bfe9 	b.w	80a136c <_ZN21I2CSoilMoistureSensor20writeI2CRegister8bitEii>

080a139a <_ZN21I2CSoilMoistureSensor5beginEb>:
 * waiting time of at least 1 second is expected to give the sensor     *
 * some time to boot up.                                                *
 * Alternatively use true as parameter and the method waits for a       *
 * second and returns after that.                                       *
 *----------------------------------------------------------------------*/
void I2CSoilMoistureSensor::begin(bool wait) {
 80a139a:	b510      	push	{r4, lr}
 80a139c:	460c      	mov	r4, r1
  resetSensor();
 80a139e:	f7ff fff8 	bl	80a1392 <_ZN21I2CSoilMoistureSensor11resetSensorEv>
  if (wait) {
 80a13a2:	b12c      	cbz	r4, 80a13b0 <_ZN21I2CSoilMoistureSensor5beginEb+0x16>
    delay(1000);
  }
}
 80a13a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 * second and returns after that.                                       *
 *----------------------------------------------------------------------*/
void I2CSoilMoistureSensor::begin(bool wait) {
  resetSensor();
  if (wait) {
    delay(1000);
 80a13a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a13ac:	f000 bb4a 	b.w	80a1a44 <delay>
 80a13b0:	bd10      	pop	{r4, pc}

080a13b2 <_ZN21I2CSoilMoistureSensor28readI2CRegister16bitUnsignedEii>:
}

/*----------------------------------------------------------------------*
 * Helper method to read a 16 bit unsigned value from the given register*
 *----------------------------------------------------------------------*/
unsigned int I2CSoilMoistureSensor::readI2CRegister16bitUnsigned(int addr, int reg) {
 80a13b2:	b538      	push	{r3, r4, r5, lr}
 80a13b4:	460c      	mov	r4, r1
 80a13b6:	4615      	mov	r5, r2
  i2cBeginTransmission(addr);
 80a13b8:	f001 fcc8 	bl	80a2d4c <_Z19__fetch_global_Wirev>
 80a13bc:	4621      	mov	r1, r4
 80a13be:	f000 fe7d 	bl	80a20bc <_ZN7TwoWire17beginTransmissionEi>
  i2cWrite(reg);
 80a13c2:	f001 fcc3 	bl	80a2d4c <_Z19__fetch_global_Wirev>
 80a13c6:	4629      	mov	r1, r5
 80a13c8:	f7ff ffca 	bl	80a1360 <_ZN7TwoWire5writeEi>
  i2cEndTransmission();
 80a13cc:	f001 fcbe 	bl	80a2d4c <_Z19__fetch_global_Wirev>
 80a13d0:	f000 fe7b 	bl	80a20ca <_ZN7TwoWire15endTransmissionEv>
  delay(20);
 80a13d4:	2014      	movs	r0, #20
 80a13d6:	f000 fb35 	bl	80a1a44 <delay>
  i2cRequestFrom(addr, 2);
 80a13da:	f001 fcb7 	bl	80a2d4c <_Z19__fetch_global_Wirev>
 80a13de:	4621      	mov	r1, r4
 80a13e0:	2202      	movs	r2, #2
 80a13e2:	f000 fe62 	bl	80a20aa <_ZN7TwoWire11requestFromEii>
  unsigned int t = i2cRead() << 8;
 80a13e6:	f001 fcb1 	bl	80a2d4c <_Z19__fetch_global_Wirev>
 80a13ea:	6803      	ldr	r3, [r0, #0]
 80a13ec:	695b      	ldr	r3, [r3, #20]
 80a13ee:	4798      	blx	r3
 80a13f0:	0204      	lsls	r4, r0, #8
  t = t | i2cRead();
 80a13f2:	f001 fcab 	bl	80a2d4c <_Z19__fetch_global_Wirev>
 80a13f6:	6803      	ldr	r3, [r0, #0]
 80a13f8:	695b      	ldr	r3, [r3, #20]
 80a13fa:	4798      	blx	r3
  return t;
}
 80a13fc:	4320      	orrs	r0, r4
 80a13fe:	bd38      	pop	{r3, r4, r5, pc}

080a1400 <_ZN21I2CSoilMoistureSensor14getCapacitanceEv>:
 * Moisture is somewhat linear. More moisture will give you higher      *
 * reading. Normally all sensors give about 290 - 310 as value in free  *
 * air at 5V supply.                                                    *
 *----------------------------------------------------------------------*/
unsigned int I2CSoilMoistureSensor::getCapacitance() {
  return readI2CRegister16bitUnsigned(sensorAddress, SOILMOISTURESENSOR_GET_CAPACITANCE);
 80a1400:	2200      	movs	r2, #0
 80a1402:	6801      	ldr	r1, [r0, #0]
 80a1404:	f7ff bfd5 	b.w	80a13b2 <_ZN21I2CSoilMoistureSensor28readI2CRegister16bitUnsignedEii>

080a1408 <_ZN21I2CSoilMoistureSensor26readI2CRegister16bitSignedEii>:
}

/*----------------------------------------------------------------------*
 * Helper method to read a 16 bit signed value from the given register*
 *----------------------------------------------------------------------*/
int I2CSoilMoistureSensor::readI2CRegister16bitSigned(int addr, int reg) {
 80a1408:	b538      	push	{r3, r4, r5, lr}
 80a140a:	460c      	mov	r4, r1
 80a140c:	4615      	mov	r5, r2
  i2cBeginTransmission(addr);
 80a140e:	f001 fc9d 	bl	80a2d4c <_Z19__fetch_global_Wirev>
 80a1412:	4621      	mov	r1, r4
 80a1414:	f000 fe52 	bl	80a20bc <_ZN7TwoWire17beginTransmissionEi>
  i2cWrite(reg);
 80a1418:	f001 fc98 	bl	80a2d4c <_Z19__fetch_global_Wirev>
 80a141c:	4629      	mov	r1, r5
 80a141e:	f7ff ff9f 	bl	80a1360 <_ZN7TwoWire5writeEi>
  i2cEndTransmission();
 80a1422:	f001 fc93 	bl	80a2d4c <_Z19__fetch_global_Wirev>
 80a1426:	f000 fe50 	bl	80a20ca <_ZN7TwoWire15endTransmissionEv>
  delay(20);
 80a142a:	2014      	movs	r0, #20
 80a142c:	f000 fb0a 	bl	80a1a44 <delay>
  i2cRequestFrom(addr, 2);
 80a1430:	f001 fc8c 	bl	80a2d4c <_Z19__fetch_global_Wirev>
 80a1434:	4621      	mov	r1, r4
 80a1436:	2202      	movs	r2, #2
 80a1438:	f000 fe37 	bl	80a20aa <_ZN7TwoWire11requestFromEii>
  int t = i2cRead() << 8;
 80a143c:	f001 fc86 	bl	80a2d4c <_Z19__fetch_global_Wirev>
 80a1440:	6803      	ldr	r3, [r0, #0]
 80a1442:	695b      	ldr	r3, [r3, #20]
 80a1444:	4798      	blx	r3
 80a1446:	0204      	lsls	r4, r0, #8
  t = t | i2cRead();
 80a1448:	f001 fc80 	bl	80a2d4c <_Z19__fetch_global_Wirev>
 80a144c:	6803      	ldr	r3, [r0, #0]
 80a144e:	695b      	ldr	r3, [r3, #20]
 80a1450:	4798      	blx	r3
  return t;
}
 80a1452:	4320      	orrs	r0, r4
 80a1454:	bd38      	pop	{r3, r4, r5, pc}

080a1456 <_ZN21I2CSoilMoistureSensor14getTemperatureEv>:
 * thermistor on the tip of the sensor. Calculated absolute measurement *
 * accuracy is better than 2%. The returned value is in degrees Celsius *
 * with factor 10, so need to divide by 10 to get real value            *
 *----------------------------------------------------------------------*/
int I2CSoilMoistureSensor::getTemperature() {
  return readI2CRegister16bitSigned(sensorAddress, SOILMOISTURESENSOR_GET_TEMPERATURE);
 80a1456:	2205      	movs	r2, #5
 80a1458:	6801      	ldr	r1, [r0, #0]
 80a145a:	f7ff bfd5 	b.w	80a1408 <_ZN21I2CSoilMoistureSensor26readI2CRegister16bitSignedEii>

080a145e <_ZN21I2CSoilMoistureSensor19readI2CRegister8bitEii>:
}

/*----------------------------------------------------------------------*
 * Helper method to read a 8 bit value from the given register          *
 *----------------------------------------------------------------------*/
uint8_t I2CSoilMoistureSensor::readI2CRegister8bit(int addr, int reg) {
 80a145e:	b538      	push	{r3, r4, r5, lr}
 80a1460:	460c      	mov	r4, r1
 80a1462:	4615      	mov	r5, r2
  i2cBeginTransmission(addr);
 80a1464:	f001 fc72 	bl	80a2d4c <_Z19__fetch_global_Wirev>
 80a1468:	4621      	mov	r1, r4
 80a146a:	f000 fe27 	bl	80a20bc <_ZN7TwoWire17beginTransmissionEi>
  i2cWrite(reg);
 80a146e:	f001 fc6d 	bl	80a2d4c <_Z19__fetch_global_Wirev>
 80a1472:	4629      	mov	r1, r5
 80a1474:	f7ff ff74 	bl	80a1360 <_ZN7TwoWire5writeEi>
  i2cEndTransmission();
 80a1478:	f001 fc68 	bl	80a2d4c <_Z19__fetch_global_Wirev>
 80a147c:	f000 fe25 	bl	80a20ca <_ZN7TwoWire15endTransmissionEv>
  delay(20);
 80a1480:	2014      	movs	r0, #20
 80a1482:	f000 fadf 	bl	80a1a44 <delay>
  i2cRequestFrom(addr, 1);
 80a1486:	f001 fc61 	bl	80a2d4c <_Z19__fetch_global_Wirev>
 80a148a:	2201      	movs	r2, #1
 80a148c:	4621      	mov	r1, r4
 80a148e:	f000 fe0c 	bl	80a20aa <_ZN7TwoWire11requestFromEii>
  return i2cRead();
 80a1492:	f001 fc5b 	bl	80a2d4c <_Z19__fetch_global_Wirev>
 80a1496:	6803      	ldr	r3, [r0, #0]
 80a1498:	695b      	ldr	r3, [r3, #20]
 80a149a:	4798      	blx	r3
}
 80a149c:	b2c0      	uxtb	r0, r0
 80a149e:	bd38      	pop	{r3, r4, r5, pc}

080a14a0 <_ZN21I2CSoilMoistureSensor10getAddressEv>:

/*----------------------------------------------------------------------*
 * Return current Address of the Sensor                                 *
 *----------------------------------------------------------------------*/
uint8_t I2CSoilMoistureSensor::getAddress() {
     return readI2CRegister8bit(sensorAddress, SOILMOISTURESENSOR_GET_ADDRESS);
 80a14a0:	2202      	movs	r2, #2
 80a14a2:	6801      	ldr	r1, [r0, #0]
 80a14a4:	f7ff bfdb 	b.w	80a145e <_ZN21I2CSoilMoistureSensor19readI2CRegister8bitEii>

080a14a8 <_ZN21I2CSoilMoistureSensor6isBusyEv>:
}

/*----------------------------------------------------------------------*
 * Check if sensor is busy. Returns true if a measurement is running.   *
 *----------------------------------------------------------------------*/
bool I2CSoilMoistureSensor::isBusy() {
 80a14a8:	b508      	push	{r3, lr}
  return (readI2CRegister8bit(sensorAddress, SOILMOISTURESENSOR_GET_BUSY) == 1);
 80a14aa:	2209      	movs	r2, #9
 80a14ac:	6801      	ldr	r1, [r0, #0]
 80a14ae:	f7ff ffd6 	bl	80a145e <_ZN21I2CSoilMoistureSensor19readI2CRegister8bitEii>
}
 80a14b2:	1e43      	subs	r3, r0, #1
 80a14b4:	4258      	negs	r0, r3
 80a14b6:	4158      	adcs	r0, r3
 80a14b8:	bd08      	pop	{r3, pc}

080a14ba <_GLOBAL__sub_I__ZN21I2CSoilMoistureSensorC2Eh>:
 80a14ba:	f000 b869 	b.w	80a1590 <HAL_Pin_Map>
	...

080a14c0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a14c0:	b508      	push	{r3, lr}
 80a14c2:	4b02      	ldr	r3, [pc, #8]	; (80a14cc <os_mutex_create+0xc>)
 80a14c4:	681b      	ldr	r3, [r3, #0]
 80a14c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a14c8:	9301      	str	r3, [sp, #4]
 80a14ca:	bd08      	pop	{r3, pc}
 80a14cc:	080601d0 	.word	0x080601d0

080a14d0 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
 80a14d0:	b508      	push	{r3, lr}
 80a14d2:	4b02      	ldr	r3, [pc, #8]	; (80a14dc <HAL_Feature_Set+0xc>)
 80a14d4:	681b      	ldr	r3, [r3, #0]
 80a14d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a14d8:	9301      	str	r3, [sp, #4]
 80a14da:	bd08      	pop	{r3, pc}
 80a14dc:	080601b8 	.word	0x080601b8

080a14e0 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
 80a14e0:	b508      	push	{r3, lr}
 80a14e2:	4b02      	ldr	r3, [pc, #8]	; (80a14ec <HAL_Core_System_Reset_Ex+0xc>)
 80a14e4:	681b      	ldr	r3, [r3, #0]
 80a14e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a14e8:	9301      	str	r3, [sp, #4]
 80a14ea:	bd08      	pop	{r3, pc}
 80a14ec:	080601b8 	.word	0x080601b8

080a14f0 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 80a14f0:	b508      	push	{r3, lr}
 80a14f2:	4b02      	ldr	r3, [pc, #8]	; (80a14fc <HAL_Core_Get_Last_Reset_Info+0xc>)
 80a14f4:	681b      	ldr	r3, [r3, #0]
 80a14f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a14f8:	9301      	str	r3, [sp, #4]
 80a14fa:	bd08      	pop	{r3, pc}
 80a14fc:	080601b8 	.word	0x080601b8

080a1500 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1500:	b508      	push	{r3, lr}
 80a1502:	4b02      	ldr	r3, [pc, #8]	; (80a150c <HAL_RNG_GetRandomNumber+0xc>)
 80a1504:	681b      	ldr	r3, [r3, #0]
 80a1506:	685b      	ldr	r3, [r3, #4]
 80a1508:	9301      	str	r3, [sp, #4]
 80a150a:	bd08      	pop	{r3, pc}
 80a150c:	0806019c 	.word	0x0806019c

080a1510 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1510:	b508      	push	{r3, lr}
 80a1512:	4b02      	ldr	r3, [pc, #8]	; (80a151c <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1514:	681b      	ldr	r3, [r3, #0]
 80a1516:	695b      	ldr	r3, [r3, #20]
 80a1518:	9301      	str	r3, [sp, #4]
 80a151a:	bd08      	pop	{r3, pc}
 80a151c:	0806019c 	.word	0x0806019c

080a1520 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80a1520:	b508      	push	{r3, lr}
 80a1522:	4b02      	ldr	r3, [pc, #8]	; (80a152c <HAL_RTC_Get_UnixTime+0xc>)
 80a1524:	681b      	ldr	r3, [r3, #0]
 80a1526:	69db      	ldr	r3, [r3, #28]
 80a1528:	9301      	str	r3, [sp, #4]
 80a152a:	bd08      	pop	{r3, pc}
 80a152c:	0806019c 	.word	0x0806019c

080a1530 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 80a1530:	b508      	push	{r3, lr}
 80a1532:	4b02      	ldr	r3, [pc, #8]	; (80a153c <HAL_EEPROM_Init+0xc>)
 80a1534:	681b      	ldr	r3, [r3, #0]
 80a1536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1538:	9301      	str	r3, [sp, #4]
 80a153a:	bd08      	pop	{r3, pc}
 80a153c:	0806019c 	.word	0x0806019c

080a1540 <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
 80a1540:	b508      	push	{r3, lr}
 80a1542:	4b02      	ldr	r3, [pc, #8]	; (80a154c <HAL_EEPROM_Read+0xc>)
 80a1544:	681b      	ldr	r3, [r3, #0]
 80a1546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1548:	9301      	str	r3, [sp, #4]
 80a154a:	bd08      	pop	{r3, pc}
 80a154c:	0806019c 	.word	0x0806019c

080a1550 <HAL_EEPROM_Write>:
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
 80a1550:	b508      	push	{r3, lr}
 80a1552:	4b02      	ldr	r3, [pc, #8]	; (80a155c <HAL_EEPROM_Write+0xc>)
 80a1554:	681b      	ldr	r3, [r3, #0]
 80a1556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1558:	9301      	str	r3, [sp, #4]
 80a155a:	bd08      	pop	{r3, pc}
 80a155c:	0806019c 	.word	0x0806019c

080a1560 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 80a1560:	b508      	push	{r3, lr}
 80a1562:	4b02      	ldr	r3, [pc, #8]	; (80a156c <HAL_EEPROM_Get+0xc>)
 80a1564:	681b      	ldr	r3, [r3, #0]
 80a1566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1568:	9301      	str	r3, [sp, #4]
 80a156a:	bd08      	pop	{r3, pc}
 80a156c:	0806019c 	.word	0x0806019c

080a1570 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 80a1570:	b508      	push	{r3, lr}
 80a1572:	4b02      	ldr	r3, [pc, #8]	; (80a157c <HAL_EEPROM_Put+0xc>)
 80a1574:	681b      	ldr	r3, [r3, #0]
 80a1576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1578:	9301      	str	r3, [sp, #4]
 80a157a:	bd08      	pop	{r3, pc}
 80a157c:	0806019c 	.word	0x0806019c

080a1580 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80a1580:	b508      	push	{r3, lr}
 80a1582:	4b02      	ldr	r3, [pc, #8]	; (80a158c <HAL_RTC_Time_Is_Valid+0xc>)
 80a1584:	681b      	ldr	r3, [r3, #0]
 80a1586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1588:	9301      	str	r3, [sp, #4]
 80a158a:	bd08      	pop	{r3, pc}
 80a158c:	0806019c 	.word	0x0806019c

080a1590 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a1590:	b508      	push	{r3, lr}
 80a1592:	4b02      	ldr	r3, [pc, #8]	; (80a159c <HAL_Pin_Map+0xc>)
 80a1594:	681b      	ldr	r3, [r3, #0]
 80a1596:	681b      	ldr	r3, [r3, #0]
 80a1598:	9301      	str	r3, [sp, #4]
 80a159a:	bd08      	pop	{r3, pc}
 80a159c:	080601b0 	.word	0x080601b0

080a15a0 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a15a0:	b508      	push	{r3, lr}
 80a15a2:	4b02      	ldr	r3, [pc, #8]	; (80a15ac <HAL_Pin_Mode+0xc>)
 80a15a4:	681b      	ldr	r3, [r3, #0]
 80a15a6:	689b      	ldr	r3, [r3, #8]
 80a15a8:	9301      	str	r3, [sp, #4]
 80a15aa:	bd08      	pop	{r3, pc}
 80a15ac:	080601b0 	.word	0x080601b0

080a15b0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a15b0:	b508      	push	{r3, lr}
 80a15b2:	4b02      	ldr	r3, [pc, #8]	; (80a15bc <HAL_Get_Pin_Mode+0xc>)
 80a15b4:	681b      	ldr	r3, [r3, #0]
 80a15b6:	68db      	ldr	r3, [r3, #12]
 80a15b8:	9301      	str	r3, [sp, #4]
 80a15ba:	bd08      	pop	{r3, pc}
 80a15bc:	080601b0 	.word	0x080601b0

080a15c0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a15c0:	b508      	push	{r3, lr}
 80a15c2:	4b02      	ldr	r3, [pc, #8]	; (80a15cc <HAL_GPIO_Write+0xc>)
 80a15c4:	681b      	ldr	r3, [r3, #0]
 80a15c6:	691b      	ldr	r3, [r3, #16]
 80a15c8:	9301      	str	r3, [sp, #4]
 80a15ca:	bd08      	pop	{r3, pc}
 80a15cc:	080601b0 	.word	0x080601b0

080a15d0 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80a15d0:	b508      	push	{r3, lr}
 80a15d2:	4b02      	ldr	r3, [pc, #8]	; (80a15dc <HAL_Interrupts_Attach+0xc>)
 80a15d4:	681b      	ldr	r3, [r3, #0]
 80a15d6:	699b      	ldr	r3, [r3, #24]
 80a15d8:	9301      	str	r3, [sp, #4]
 80a15da:	bd08      	pop	{r3, pc}
 80a15dc:	080601b0 	.word	0x080601b0

080a15e0 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
 80a15e0:	b508      	push	{r3, lr}
 80a15e2:	4b02      	ldr	r3, [pc, #8]	; (80a15ec <HAL_Interrupts_Detach+0xc>)
 80a15e4:	681b      	ldr	r3, [r3, #0]
 80a15e6:	69db      	ldr	r3, [r3, #28]
 80a15e8:	9301      	str	r3, [sp, #4]
 80a15ea:	bd08      	pop	{r3, pc}
 80a15ec:	080601b0 	.word	0x080601b0

080a15f0 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a15f0:	b508      	push	{r3, lr}
 80a15f2:	4b02      	ldr	r3, [pc, #8]	; (80a15fc <HAL_I2C_Begin+0xc>)
 80a15f4:	681b      	ldr	r3, [r3, #0]
 80a15f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a15f8:	9301      	str	r3, [sp, #4]
 80a15fa:	bd08      	pop	{r3, pc}
 80a15fc:	080601ac 	.word	0x080601ac

080a1600 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a1600:	b508      	push	{r3, lr}
 80a1602:	4b02      	ldr	r3, [pc, #8]	; (80a160c <HAL_I2C_Request_Data+0xc>)
 80a1604:	681b      	ldr	r3, [r3, #0]
 80a1606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1608:	9301      	str	r3, [sp, #4]
 80a160a:	bd08      	pop	{r3, pc}
 80a160c:	080601ac 	.word	0x080601ac

080a1610 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a1610:	b508      	push	{r3, lr}
 80a1612:	4b02      	ldr	r3, [pc, #8]	; (80a161c <HAL_I2C_Begin_Transmission+0xc>)
 80a1614:	681b      	ldr	r3, [r3, #0]
 80a1616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1618:	9301      	str	r3, [sp, #4]
 80a161a:	bd08      	pop	{r3, pc}
 80a161c:	080601ac 	.word	0x080601ac

080a1620 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a1620:	b508      	push	{r3, lr}
 80a1622:	4b02      	ldr	r3, [pc, #8]	; (80a162c <HAL_I2C_End_Transmission+0xc>)
 80a1624:	681b      	ldr	r3, [r3, #0]
 80a1626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a1628:	9301      	str	r3, [sp, #4]
 80a162a:	bd08      	pop	{r3, pc}
 80a162c:	080601ac 	.word	0x080601ac

080a1630 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a1630:	b508      	push	{r3, lr}
 80a1632:	4b02      	ldr	r3, [pc, #8]	; (80a163c <HAL_I2C_Write_Data+0xc>)
 80a1634:	681b      	ldr	r3, [r3, #0]
 80a1636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1638:	9301      	str	r3, [sp, #4]
 80a163a:	bd08      	pop	{r3, pc}
 80a163c:	080601ac 	.word	0x080601ac

080a1640 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a1640:	b508      	push	{r3, lr}
 80a1642:	4b02      	ldr	r3, [pc, #8]	; (80a164c <HAL_I2C_Available_Data+0xc>)
 80a1644:	681b      	ldr	r3, [r3, #0]
 80a1646:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1648:	9301      	str	r3, [sp, #4]
 80a164a:	bd08      	pop	{r3, pc}
 80a164c:	080601ac 	.word	0x080601ac

080a1650 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a1650:	b508      	push	{r3, lr}
 80a1652:	4b02      	ldr	r3, [pc, #8]	; (80a165c <HAL_I2C_Read_Data+0xc>)
 80a1654:	681b      	ldr	r3, [r3, #0]
 80a1656:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1658:	9301      	str	r3, [sp, #4]
 80a165a:	bd08      	pop	{r3, pc}
 80a165c:	080601ac 	.word	0x080601ac

080a1660 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a1660:	b508      	push	{r3, lr}
 80a1662:	4b02      	ldr	r3, [pc, #8]	; (80a166c <HAL_I2C_Peek_Data+0xc>)
 80a1664:	681b      	ldr	r3, [r3, #0]
 80a1666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1668:	9301      	str	r3, [sp, #4]
 80a166a:	bd08      	pop	{r3, pc}
 80a166c:	080601ac 	.word	0x080601ac

080a1670 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a1670:	b508      	push	{r3, lr}
 80a1672:	4b02      	ldr	r3, [pc, #8]	; (80a167c <HAL_I2C_Flush_Data+0xc>)
 80a1674:	681b      	ldr	r3, [r3, #0]
 80a1676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1678:	9301      	str	r3, [sp, #4]
 80a167a:	bd08      	pop	{r3, pc}
 80a167c:	080601ac 	.word	0x080601ac

080a1680 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a1680:	b508      	push	{r3, lr}
 80a1682:	4b02      	ldr	r3, [pc, #8]	; (80a168c <HAL_I2C_Is_Enabled+0xc>)
 80a1684:	681b      	ldr	r3, [r3, #0]
 80a1686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1688:	9301      	str	r3, [sp, #4]
 80a168a:	bd08      	pop	{r3, pc}
 80a168c:	080601ac 	.word	0x080601ac

080a1690 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a1690:	b508      	push	{r3, lr}
 80a1692:	4b03      	ldr	r3, [pc, #12]	; (80a16a0 <HAL_I2C_Init+0x10>)
 80a1694:	681b      	ldr	r3, [r3, #0]
 80a1696:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a169a:	9301      	str	r3, [sp, #4]
 80a169c:	bd08      	pop	{r3, pc}
 80a169e:	0000      	.short	0x0000
 80a16a0:	080601ac 	.word	0x080601ac

080a16a4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a16a4:	b508      	push	{r3, lr}
 80a16a6:	4b02      	ldr	r3, [pc, #8]	; (80a16b0 <HAL_SPI_Init+0xc>)
 80a16a8:	681b      	ldr	r3, [r3, #0]
 80a16aa:	69db      	ldr	r3, [r3, #28]
 80a16ac:	9301      	str	r3, [sp, #4]
 80a16ae:	bd08      	pop	{r3, pc}
 80a16b0:	080601b4 	.word	0x080601b4

080a16b4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a16b4:	b508      	push	{r3, lr}
 80a16b6:	4b02      	ldr	r3, [pc, #8]	; (80a16c0 <HAL_SPI_Is_Enabled+0xc>)
 80a16b8:	681b      	ldr	r3, [r3, #0]
 80a16ba:	6a1b      	ldr	r3, [r3, #32]
 80a16bc:	9301      	str	r3, [sp, #4]
 80a16be:	bd08      	pop	{r3, pc}
 80a16c0:	080601b4 	.word	0x080601b4

080a16c4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a16c4:	b508      	push	{r3, lr}
 80a16c6:	4b02      	ldr	r3, [pc, #8]	; (80a16d0 <HAL_USART_Init+0xc>)
 80a16c8:	681b      	ldr	r3, [r3, #0]
 80a16ca:	699b      	ldr	r3, [r3, #24]
 80a16cc:	9301      	str	r3, [sp, #4]
 80a16ce:	bd08      	pop	{r3, pc}
 80a16d0:	080601c4 	.word	0x080601c4

080a16d4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a16d4:	b508      	push	{r3, lr}
 80a16d6:	4b02      	ldr	r3, [pc, #8]	; (80a16e0 <HAL_USART_Write_Data+0xc>)
 80a16d8:	681b      	ldr	r3, [r3, #0]
 80a16da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a16dc:	9301      	str	r3, [sp, #4]
 80a16de:	bd08      	pop	{r3, pc}
 80a16e0:	080601c4 	.word	0x080601c4

080a16e4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a16e4:	b508      	push	{r3, lr}
 80a16e6:	4b02      	ldr	r3, [pc, #8]	; (80a16f0 <HAL_USART_Available_Data+0xc>)
 80a16e8:	681b      	ldr	r3, [r3, #0]
 80a16ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a16ec:	9301      	str	r3, [sp, #4]
 80a16ee:	bd08      	pop	{r3, pc}
 80a16f0:	080601c4 	.word	0x080601c4

080a16f4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a16f4:	b508      	push	{r3, lr}
 80a16f6:	4b02      	ldr	r3, [pc, #8]	; (80a1700 <HAL_USART_Read_Data+0xc>)
 80a16f8:	681b      	ldr	r3, [r3, #0]
 80a16fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a16fc:	9301      	str	r3, [sp, #4]
 80a16fe:	bd08      	pop	{r3, pc}
 80a1700:	080601c4 	.word	0x080601c4

080a1704 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a1704:	b508      	push	{r3, lr}
 80a1706:	4b02      	ldr	r3, [pc, #8]	; (80a1710 <HAL_USART_Peek_Data+0xc>)
 80a1708:	681b      	ldr	r3, [r3, #0]
 80a170a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a170c:	9301      	str	r3, [sp, #4]
 80a170e:	bd08      	pop	{r3, pc}
 80a1710:	080601c4 	.word	0x080601c4

080a1714 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a1714:	b508      	push	{r3, lr}
 80a1716:	4b02      	ldr	r3, [pc, #8]	; (80a1720 <HAL_USART_Flush_Data+0xc>)
 80a1718:	681b      	ldr	r3, [r3, #0]
 80a171a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a171c:	9301      	str	r3, [sp, #4]
 80a171e:	bd08      	pop	{r3, pc}
 80a1720:	080601c4 	.word	0x080601c4

080a1724 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a1724:	b508      	push	{r3, lr}
 80a1726:	4b02      	ldr	r3, [pc, #8]	; (80a1730 <HAL_USART_Is_Enabled+0xc>)
 80a1728:	681b      	ldr	r3, [r3, #0]
 80a172a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a172c:	9301      	str	r3, [sp, #4]
 80a172e:	bd08      	pop	{r3, pc}
 80a1730:	080601c4 	.word	0x080601c4

080a1734 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a1734:	b508      	push	{r3, lr}
 80a1736:	4b02      	ldr	r3, [pc, #8]	; (80a1740 <HAL_USART_Available_Data_For_Write+0xc>)
 80a1738:	681b      	ldr	r3, [r3, #0]
 80a173a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a173c:	9301      	str	r3, [sp, #4]
 80a173e:	bd08      	pop	{r3, pc}
 80a1740:	080601c4 	.word	0x080601c4

080a1744 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1744:	b508      	push	{r3, lr}
 80a1746:	4b02      	ldr	r3, [pc, #8]	; (80a1750 <HAL_USB_USART_Init+0xc>)
 80a1748:	681b      	ldr	r3, [r3, #0]
 80a174a:	681b      	ldr	r3, [r3, #0]
 80a174c:	9301      	str	r3, [sp, #4]
 80a174e:	bd08      	pop	{r3, pc}
 80a1750:	080601d8 	.word	0x080601d8

080a1754 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1754:	b508      	push	{r3, lr}
 80a1756:	4b02      	ldr	r3, [pc, #8]	; (80a1760 <HAL_USB_USART_Available_Data+0xc>)
 80a1758:	681b      	ldr	r3, [r3, #0]
 80a175a:	691b      	ldr	r3, [r3, #16]
 80a175c:	9301      	str	r3, [sp, #4]
 80a175e:	bd08      	pop	{r3, pc}
 80a1760:	080601d8 	.word	0x080601d8

080a1764 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1764:	b508      	push	{r3, lr}
 80a1766:	4b02      	ldr	r3, [pc, #8]	; (80a1770 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1768:	681b      	ldr	r3, [r3, #0]
 80a176a:	695b      	ldr	r3, [r3, #20]
 80a176c:	9301      	str	r3, [sp, #4]
 80a176e:	bd08      	pop	{r3, pc}
 80a1770:	080601d8 	.word	0x080601d8

080a1774 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1774:	b508      	push	{r3, lr}
 80a1776:	4b02      	ldr	r3, [pc, #8]	; (80a1780 <HAL_USB_USART_Receive_Data+0xc>)
 80a1778:	681b      	ldr	r3, [r3, #0]
 80a177a:	699b      	ldr	r3, [r3, #24]
 80a177c:	9301      	str	r3, [sp, #4]
 80a177e:	bd08      	pop	{r3, pc}
 80a1780:	080601d8 	.word	0x080601d8

080a1784 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1784:	b508      	push	{r3, lr}
 80a1786:	4b02      	ldr	r3, [pc, #8]	; (80a1790 <HAL_USB_USART_Send_Data+0xc>)
 80a1788:	681b      	ldr	r3, [r3, #0]
 80a178a:	69db      	ldr	r3, [r3, #28]
 80a178c:	9301      	str	r3, [sp, #4]
 80a178e:	bd08      	pop	{r3, pc}
 80a1790:	080601d8 	.word	0x080601d8

080a1794 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1794:	b508      	push	{r3, lr}
 80a1796:	4b02      	ldr	r3, [pc, #8]	; (80a17a0 <HAL_USB_USART_Flush_Data+0xc>)
 80a1798:	681b      	ldr	r3, [r3, #0]
 80a179a:	6a1b      	ldr	r3, [r3, #32]
 80a179c:	9301      	str	r3, [sp, #4]
 80a179e:	bd08      	pop	{r3, pc}
 80a17a0:	080601d8 	.word	0x080601d8

080a17a4 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a17a4:	b508      	push	{r3, lr}
 80a17a6:	4b02      	ldr	r3, [pc, #8]	; (80a17b0 <inet_gethostbyname+0xc>)
 80a17a8:	681b      	ldr	r3, [r3, #0]
 80a17aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a17ac:	9301      	str	r3, [sp, #4]
 80a17ae:	bd08      	pop	{r3, pc}
 80a17b0:	080601c0 	.word	0x080601c0

080a17b4 <wlan_select_antenna>:
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
 80a17b4:	b508      	push	{r3, lr}
 80a17b6:	4b02      	ldr	r3, [pc, #8]	; (80a17c0 <wlan_select_antenna+0xc>)
 80a17b8:	681b      	ldr	r3, [r3, #0]
 80a17ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a17bc:	9301      	str	r3, [sp, #4]
 80a17be:	bd08      	pop	{r3, pc}
 80a17c0:	080601c0 	.word	0x080601c0

080a17c4 <wlan_connected_info>:
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
DYNALIB_FN(25, hal_wlan, softap_set_application_page_handler, int(PageProvider* provider, void* reserved))
DYNALIB_FN(26, hal_wlan, wlan_restart, int(void*))
DYNALIB_FN(27, hal_wlan, wlan_set_hostname, int(const char*, void*))
DYNALIB_FN(28, hal_wlan, wlan_get_hostname, int(char*, size_t, void*))
DYNALIB_FN(29, hal_wlan, wlan_connected_info, int(void*, wlan_connected_info_t*, void*))
 80a17c4:	b508      	push	{r3, lr}
 80a17c6:	4b02      	ldr	r3, [pc, #8]	; (80a17d0 <wlan_connected_info+0xc>)
 80a17c8:	681b      	ldr	r3, [r3, #0]
 80a17ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a17cc:	9301      	str	r3, [sp, #4]
 80a17ce:	bd08      	pop	{r3, pc}
 80a17d0:	080601c0 	.word	0x080601c0

080a17d4 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a17d4:	b508      	push	{r3, lr}
 80a17d6:	4b02      	ldr	r3, [pc, #8]	; (80a17e0 <system_mode+0xc>)
 80a17d8:	681b      	ldr	r3, [r3, #0]
 80a17da:	681b      	ldr	r3, [r3, #0]
 80a17dc:	9301      	str	r3, [sp, #4]
 80a17de:	bd08      	pop	{r3, pc}
 80a17e0:	080601a4 	.word	0x080601a4

080a17e4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a17e4:	b508      	push	{r3, lr}
 80a17e6:	4b02      	ldr	r3, [pc, #8]	; (80a17f0 <set_system_mode+0xc>)
 80a17e8:	681b      	ldr	r3, [r3, #0]
 80a17ea:	685b      	ldr	r3, [r3, #4]
 80a17ec:	9301      	str	r3, [sp, #4]
 80a17ee:	bd08      	pop	{r3, pc}
 80a17f0:	080601a4 	.word	0x080601a4

080a17f4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a17f4:	b508      	push	{r3, lr}
 80a17f6:	4b02      	ldr	r3, [pc, #8]	; (80a1800 <system_delay_ms+0xc>)
 80a17f8:	681b      	ldr	r3, [r3, #0]
 80a17fa:	695b      	ldr	r3, [r3, #20]
 80a17fc:	9301      	str	r3, [sp, #4]
 80a17fe:	bd08      	pop	{r3, pc}
 80a1800:	080601a4 	.word	0x080601a4

080a1804 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a1804:	b508      	push	{r3, lr}
 80a1806:	4b02      	ldr	r3, [pc, #8]	; (80a1810 <system_thread_set_state+0xc>)
 80a1808:	681b      	ldr	r3, [r3, #0]
 80a180a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a180c:	9301      	str	r3, [sp, #4]
 80a180e:	bd08      	pop	{r3, pc}
 80a1810:	080601a4 	.word	0x080601a4

080a1814 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a1814:	b508      	push	{r3, lr}
 80a1816:	4b02      	ldr	r3, [pc, #8]	; (80a1820 <application_thread_current+0xc>)
 80a1818:	681b      	ldr	r3, [r3, #0]
 80a181a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a181c:	9301      	str	r3, [sp, #4]
 80a181e:	bd08      	pop	{r3, pc}
 80a1820:	080601a4 	.word	0x080601a4

080a1824 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a1824:	b508      	push	{r3, lr}
 80a1826:	4b02      	ldr	r3, [pc, #8]	; (80a1830 <application_thread_invoke+0xc>)
 80a1828:	681b      	ldr	r3, [r3, #0]
 80a182a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a182c:	9301      	str	r3, [sp, #4]
 80a182e:	bd08      	pop	{r3, pc}
 80a1830:	080601a4 	.word	0x080601a4

080a1834 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a1834:	b508      	push	{r3, lr}
 80a1836:	4b02      	ldr	r3, [pc, #8]	; (80a1840 <system_thread_get_state+0xc>)
 80a1838:	681b      	ldr	r3, [r3, #0]
 80a183a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a183c:	9301      	str	r3, [sp, #4]
 80a183e:	bd08      	pop	{r3, pc}
 80a1840:	080601a4 	.word	0x080601a4

080a1844 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1844:	b508      	push	{r3, lr}
 80a1846:	4b03      	ldr	r3, [pc, #12]	; (80a1854 <system_ctrl_set_app_request_handler+0x10>)
 80a1848:	681b      	ldr	r3, [r3, #0]
 80a184a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a184e:	9301      	str	r3, [sp, #4]
 80a1850:	bd08      	pop	{r3, pc}
 80a1852:	0000      	.short	0x0000
 80a1854:	080601a4 	.word	0x080601a4

080a1858 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1858:	b508      	push	{r3, lr}
 80a185a:	4b03      	ldr	r3, [pc, #12]	; (80a1868 <system_ctrl_set_result+0x10>)
 80a185c:	681b      	ldr	r3, [r3, #0]
 80a185e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a1862:	9301      	str	r3, [sp, #4]
 80a1864:	bd08      	pop	{r3, pc}
 80a1866:	0000      	.short	0x0000
 80a1868:	080601a4 	.word	0x080601a4

080a186c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a186c:	b508      	push	{r3, lr}
 80a186e:	4b02      	ldr	r3, [pc, #8]	; (80a1878 <spark_variable+0xc>)
 80a1870:	681b      	ldr	r3, [r3, #0]
 80a1872:	681b      	ldr	r3, [r3, #0]
 80a1874:	9301      	str	r3, [sp, #4]
 80a1876:	bd08      	pop	{r3, pc}
 80a1878:	080601cc 	.word	0x080601cc

080a187c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a187c:	b508      	push	{r3, lr}
 80a187e:	4b02      	ldr	r3, [pc, #8]	; (80a1888 <spark_function+0xc>)
 80a1880:	681b      	ldr	r3, [r3, #0]
 80a1882:	685b      	ldr	r3, [r3, #4]
 80a1884:	9301      	str	r3, [sp, #4]
 80a1886:	bd08      	pop	{r3, pc}
 80a1888:	080601cc 	.word	0x080601cc

080a188c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a188c:	b508      	push	{r3, lr}
 80a188e:	4b02      	ldr	r3, [pc, #8]	; (80a1898 <spark_process+0xc>)
 80a1890:	681b      	ldr	r3, [r3, #0]
 80a1892:	689b      	ldr	r3, [r3, #8]
 80a1894:	9301      	str	r3, [sp, #4]
 80a1896:	bd08      	pop	{r3, pc}
 80a1898:	080601cc 	.word	0x080601cc

080a189c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a189c:	b508      	push	{r3, lr}
 80a189e:	4b02      	ldr	r3, [pc, #8]	; (80a18a8 <spark_cloud_flag_connected+0xc>)
 80a18a0:	681b      	ldr	r3, [r3, #0]
 80a18a2:	695b      	ldr	r3, [r3, #20]
 80a18a4:	9301      	str	r3, [sp, #4]
 80a18a6:	bd08      	pop	{r3, pc}
 80a18a8:	080601cc 	.word	0x080601cc

080a18ac <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 80a18ac:	b508      	push	{r3, lr}
 80a18ae:	4b02      	ldr	r3, [pc, #8]	; (80a18b8 <spark_deviceID+0xc>)
 80a18b0:	681b      	ldr	r3, [r3, #0]
 80a18b2:	69db      	ldr	r3, [r3, #28]
 80a18b4:	9301      	str	r3, [sp, #4]
 80a18b6:	bd08      	pop	{r3, pc}
 80a18b8:	080601cc 	.word	0x080601cc

080a18bc <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a18bc:	b508      	push	{r3, lr}
 80a18be:	4b02      	ldr	r3, [pc, #8]	; (80a18c8 <spark_send_event+0xc>)
 80a18c0:	681b      	ldr	r3, [r3, #0]
 80a18c2:	6a1b      	ldr	r3, [r3, #32]
 80a18c4:	9301      	str	r3, [sp, #4]
 80a18c6:	bd08      	pop	{r3, pc}
 80a18c8:	080601cc 	.word	0x080601cc

080a18cc <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 80a18cc:	b508      	push	{r3, lr}
 80a18ce:	4b02      	ldr	r3, [pc, #8]	; (80a18d8 <spark_subscribe+0xc>)
 80a18d0:	681b      	ldr	r3, [r3, #0]
 80a18d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a18d4:	9301      	str	r3, [sp, #4]
 80a18d6:	bd08      	pop	{r3, pc}
 80a18d8:	080601cc 	.word	0x080601cc

080a18dc <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a18dc:	b508      	push	{r3, lr}
 80a18de:	4b02      	ldr	r3, [pc, #8]	; (80a18e8 <spark_sync_time_pending+0xc>)
 80a18e0:	681b      	ldr	r3, [r3, #0]
 80a18e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a18e4:	9301      	str	r3, [sp, #4]
 80a18e6:	bd08      	pop	{r3, pc}
 80a18e8:	080601cc 	.word	0x080601cc

080a18ec <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a18ec:	b508      	push	{r3, lr}
 80a18ee:	4b02      	ldr	r3, [pc, #8]	; (80a18f8 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a18f0:	681b      	ldr	r3, [r3, #0]
 80a18f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a18f4:	9301      	str	r3, [sp, #4]
 80a18f6:	bd08      	pop	{r3, pc}
 80a18f8:	080601cc 	.word	0x080601cc

080a18fc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a18fc:	b508      	push	{r3, lr}
 80a18fe:	4b02      	ldr	r3, [pc, #8]	; (80a1908 <network_connect+0xc>)
 80a1900:	681b      	ldr	r3, [r3, #0]
 80a1902:	685b      	ldr	r3, [r3, #4]
 80a1904:	9301      	str	r3, [sp, #4]
 80a1906:	bd08      	pop	{r3, pc}
 80a1908:	080601c8 	.word	0x080601c8

080a190c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a190c:	b508      	push	{r3, lr}
 80a190e:	4b02      	ldr	r3, [pc, #8]	; (80a1918 <network_connecting+0xc>)
 80a1910:	681b      	ldr	r3, [r3, #0]
 80a1912:	689b      	ldr	r3, [r3, #8]
 80a1914:	9301      	str	r3, [sp, #4]
 80a1916:	bd08      	pop	{r3, pc}
 80a1918:	080601c8 	.word	0x080601c8

080a191c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a191c:	b508      	push	{r3, lr}
 80a191e:	4b02      	ldr	r3, [pc, #8]	; (80a1928 <network_disconnect+0xc>)
 80a1920:	681b      	ldr	r3, [r3, #0]
 80a1922:	68db      	ldr	r3, [r3, #12]
 80a1924:	9301      	str	r3, [sp, #4]
 80a1926:	bd08      	pop	{r3, pc}
 80a1928:	080601c8 	.word	0x080601c8

080a192c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a192c:	b508      	push	{r3, lr}
 80a192e:	4b02      	ldr	r3, [pc, #8]	; (80a1938 <network_ready+0xc>)
 80a1930:	681b      	ldr	r3, [r3, #0]
 80a1932:	691b      	ldr	r3, [r3, #16]
 80a1934:	9301      	str	r3, [sp, #4]
 80a1936:	bd08      	pop	{r3, pc}
 80a1938:	080601c8 	.word	0x080601c8

080a193c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a193c:	b508      	push	{r3, lr}
 80a193e:	4b02      	ldr	r3, [pc, #8]	; (80a1948 <network_on+0xc>)
 80a1940:	681b      	ldr	r3, [r3, #0]
 80a1942:	695b      	ldr	r3, [r3, #20]
 80a1944:	9301      	str	r3, [sp, #4]
 80a1946:	bd08      	pop	{r3, pc}
 80a1948:	080601c8 	.word	0x080601c8

080a194c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a194c:	b508      	push	{r3, lr}
 80a194e:	4b02      	ldr	r3, [pc, #8]	; (80a1958 <network_off+0xc>)
 80a1950:	681b      	ldr	r3, [r3, #0]
 80a1952:	699b      	ldr	r3, [r3, #24]
 80a1954:	9301      	str	r3, [sp, #4]
 80a1956:	bd08      	pop	{r3, pc}
 80a1958:	080601c8 	.word	0x080601c8

080a195c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a195c:	b508      	push	{r3, lr}
 80a195e:	4b02      	ldr	r3, [pc, #8]	; (80a1968 <network_listen+0xc>)
 80a1960:	681b      	ldr	r3, [r3, #0]
 80a1962:	69db      	ldr	r3, [r3, #28]
 80a1964:	9301      	str	r3, [sp, #4]
 80a1966:	bd08      	pop	{r3, pc}
 80a1968:	080601c8 	.word	0x080601c8

080a196c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a196c:	b508      	push	{r3, lr}
 80a196e:	4b02      	ldr	r3, [pc, #8]	; (80a1978 <network_listening+0xc>)
 80a1970:	681b      	ldr	r3, [r3, #0]
 80a1972:	6a1b      	ldr	r3, [r3, #32]
 80a1974:	9301      	str	r3, [sp, #4]
 80a1976:	bd08      	pop	{r3, pc}
 80a1978:	080601c8 	.word	0x080601c8

080a197c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a197c:	b508      	push	{r3, lr}
 80a197e:	4b02      	ldr	r3, [pc, #8]	; (80a1988 <network_set_listen_timeout+0xc>)
 80a1980:	681b      	ldr	r3, [r3, #0]
 80a1982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1984:	9301      	str	r3, [sp, #4]
 80a1986:	bd08      	pop	{r3, pc}
 80a1988:	080601c8 	.word	0x080601c8

080a198c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a198c:	b508      	push	{r3, lr}
 80a198e:	4b02      	ldr	r3, [pc, #8]	; (80a1998 <network_get_listen_timeout+0xc>)
 80a1990:	681b      	ldr	r3, [r3, #0]
 80a1992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1994:	9301      	str	r3, [sp, #4]
 80a1996:	bd08      	pop	{r3, pc}
 80a1998:	080601c8 	.word	0x080601c8

080a199c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a199c:	b508      	push	{r3, lr}
 80a199e:	4b02      	ldr	r3, [pc, #8]	; (80a19a8 <malloc+0xc>)
 80a19a0:	681b      	ldr	r3, [r3, #0]
 80a19a2:	681b      	ldr	r3, [r3, #0]
 80a19a4:	9301      	str	r3, [sp, #4]
 80a19a6:	bd08      	pop	{r3, pc}
 80a19a8:	080601a0 	.word	0x080601a0

080a19ac <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a19ac:	b508      	push	{r3, lr}
 80a19ae:	4b02      	ldr	r3, [pc, #8]	; (80a19b8 <free+0xc>)
 80a19b0:	681b      	ldr	r3, [r3, #0]
 80a19b2:	685b      	ldr	r3, [r3, #4]
 80a19b4:	9301      	str	r3, [sp, #4]
 80a19b6:	bd08      	pop	{r3, pc}
 80a19b8:	080601a0 	.word	0x080601a0

080a19bc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a19bc:	b508      	push	{r3, lr}
 80a19be:	4b02      	ldr	r3, [pc, #8]	; (80a19c8 <realloc+0xc>)
 80a19c0:	681b      	ldr	r3, [r3, #0]
 80a19c2:	689b      	ldr	r3, [r3, #8]
 80a19c4:	9301      	str	r3, [sp, #4]
 80a19c6:	bd08      	pop	{r3, pc}
 80a19c8:	080601a0 	.word	0x080601a0

080a19cc <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 80a19cc:	b508      	push	{r3, lr}
 80a19ce:	4b02      	ldr	r3, [pc, #8]	; (80a19d8 <sprintf+0xc>)
 80a19d0:	681b      	ldr	r3, [r3, #0]
 80a19d2:	68db      	ldr	r3, [r3, #12]
 80a19d4:	9301      	str	r3, [sp, #4]
 80a19d6:	bd08      	pop	{r3, pc}
 80a19d8:	080601a0 	.word	0x080601a0

080a19dc <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80a19dc:	b508      	push	{r3, lr}
 80a19de:	4b02      	ldr	r3, [pc, #8]	; (80a19e8 <siprintf+0xc>)
 80a19e0:	681b      	ldr	r3, [r3, #0]
 80a19e2:	691b      	ldr	r3, [r3, #16]
 80a19e4:	9301      	str	r3, [sp, #4]
 80a19e6:	bd08      	pop	{r3, pc}
 80a19e8:	080601a0 	.word	0x080601a0

080a19ec <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a19ec:	b508      	push	{r3, lr}
 80a19ee:	4b02      	ldr	r3, [pc, #8]	; (80a19f8 <siscanf+0xc>)
 80a19f0:	681b      	ldr	r3, [r3, #0]
 80a19f2:	699b      	ldr	r3, [r3, #24]
 80a19f4:	9301      	str	r3, [sp, #4]
 80a19f6:	bd08      	pop	{r3, pc}
 80a19f8:	080601a0 	.word	0x080601a0

080a19fc <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80a19fc:	b508      	push	{r3, lr}
 80a19fe:	4b02      	ldr	r3, [pc, #8]	; (80a1a08 <snprintf+0xc>)
 80a1a00:	681b      	ldr	r3, [r3, #0]
 80a1a02:	69db      	ldr	r3, [r3, #28]
 80a1a04:	9301      	str	r3, [sp, #4]
 80a1a06:	bd08      	pop	{r3, pc}
 80a1a08:	080601a0 	.word	0x080601a0

080a1a0c <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a1a0c:	b508      	push	{r3, lr}
 80a1a0e:	4b02      	ldr	r3, [pc, #8]	; (80a1a18 <abort+0xc>)
 80a1a10:	681b      	ldr	r3, [r3, #0]
 80a1a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1a14:	9301      	str	r3, [sp, #4]
 80a1a16:	bd08      	pop	{r3, pc}
 80a1a18:	080601a0 	.word	0x080601a0

080a1a1c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a1a1c:	b508      	push	{r3, lr}
 80a1a1e:	4b02      	ldr	r3, [pc, #8]	; (80a1a28 <_malloc_r+0xc>)
 80a1a20:	681b      	ldr	r3, [r3, #0]
 80a1a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1a24:	9301      	str	r3, [sp, #4]
 80a1a26:	bd08      	pop	{r3, pc}
 80a1a28:	080601a0 	.word	0x080601a0

080a1a2c <_Z3mapiiiii>:
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
 80a1a2c:	428a      	cmp	r2, r1
{
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
 80a1a2e:	b530      	push	{r4, r5, lr}
    if (fromEnd == fromStart) {
 80a1a30:	d007      	beq.n	80a1a42 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
 80a1a32:	9d03      	ldr	r5, [sp, #12]
 80a1a34:	1a44      	subs	r4, r0, r1
 80a1a36:	1aed      	subs	r5, r5, r3
 80a1a38:	436c      	muls	r4, r5
 80a1a3a:	1a52      	subs	r2, r2, r1
 80a1a3c:	fb94 f4f2 	sdiv	r4, r4, r2
 80a1a40:	18e0      	adds	r0, r4, r3
}
 80a1a42:	bd30      	pop	{r4, r5, pc}

080a1a44 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1a44:	2100      	movs	r1, #0
 80a1a46:	f7ff bed5 	b.w	80a17f4 <system_delay_ms>

080a1a4a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a1a4a:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1a4c:	6883      	ldr	r3, [r0, #8]
 80a1a4e:	4604      	mov	r4, r0
 80a1a50:	b90b      	cbnz	r3, 80a1a56 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a1a52:	f001 f9da 	bl	80a2e0a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1a56:	68c3      	ldr	r3, [r0, #12]
 80a1a58:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a1a5a:	68a3      	ldr	r3, [r4, #8]
 80a1a5c:	b11b      	cbz	r3, 80a1a66 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1a5e:	2203      	movs	r2, #3
 80a1a60:	4621      	mov	r1, r4
 80a1a62:	4620      	mov	r0, r4
 80a1a64:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a1a66:	4620      	mov	r0, r4
}
 80a1a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a1a6c:	f7fe bb17 	b.w	80a009e <_ZdlPv>

080a1a70 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a1a70:	4770      	bx	lr

080a1a72 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a1a72:	2000      	movs	r0, #0
 80a1a74:	4770      	bx	lr

080a1a76 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a1a76:	b510      	push	{r4, lr}
 80a1a78:	4604      	mov	r4, r0
 80a1a7a:	f7fe fb10 	bl	80a009e <_ZdlPv>
 80a1a7e:	4620      	mov	r0, r4
 80a1a80:	bd10      	pop	{r4, pc}

080a1a82 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a1a82:	b508      	push	{r3, lr}
      { delete this; }
 80a1a84:	b108      	cbz	r0, 80a1a8a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a1a86:	f7ff fff6 	bl	80a1a76 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a1a8a:	bd08      	pop	{r3, pc}

080a1a8c <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1a8c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a1a8e:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1a90:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a1a92:	b113      	cbz	r3, 80a1a9a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1a94:	2203      	movs	r2, #3
 80a1a96:	4601      	mov	r1, r0
 80a1a98:	4798      	blx	r3
    }
 80a1a9a:	4620      	mov	r0, r4
 80a1a9c:	bd10      	pop	{r4, pc}

080a1a9e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a1a9e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a1aa0:	68c4      	ldr	r4, [r0, #12]
 80a1aa2:	b1d4      	cbz	r4, 80a1ada <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a1aa4:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a1aa6:	2b02      	cmp	r3, #2
 80a1aa8:	d102      	bne.n	80a1ab0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a1aaa:	68e0      	ldr	r0, [r4, #12]
 80a1aac:	f7ff ff7e 	bl	80a19ac <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a1ab0:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a1ab2:	b12d      	cbz	r5, 80a1ac0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1ab4:	4628      	mov	r0, r5
 80a1ab6:	f7ff ffe9 	bl	80a1a8c <_ZNSt14_Function_baseD1Ev>
 80a1aba:	4628      	mov	r0, r5
 80a1abc:	f7fe faef 	bl	80a009e <_ZdlPv>
 80a1ac0:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a1ac2:	b12d      	cbz	r5, 80a1ad0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
 80a1ac4:	4628      	mov	r0, r5
 80a1ac6:	f7ff ffe1 	bl	80a1a8c <_ZNSt14_Function_baseD1Ev>
 80a1aca:	4628      	mov	r0, r5
 80a1acc:	f7fe fae7 	bl	80a009e <_ZdlPv>
 80a1ad0:	4620      	mov	r0, r4
 80a1ad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a1ad6:	f7fe bae2 	b.w	80a009e <_ZdlPv>
 80a1ada:	bd38      	pop	{r3, r4, r5, pc}

080a1adc <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}
#endif
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a1adc:	b510      	push	{r4, lr}
 80a1ade:	b088      	sub	sp, #32
 80a1ae0:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a1ae2:	4668      	mov	r0, sp
 80a1ae4:	f000 fcc0 	bl	80a2468 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80a1ae8:	4669      	mov	r1, sp
 80a1aea:	a804      	add	r0, sp, #16
 80a1aec:	f000 fcde 	bl	80a24ac <_ZN6StringC1ERKS_>
 80a1af0:	a804      	add	r0, sp, #16
 80a1af2:	47a0      	blx	r4
 80a1af4:	4604      	mov	r4, r0
 80a1af6:	a804      	add	r0, sp, #16
 80a1af8:	f000 fc6f 	bl	80a23da <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a1afc:	4668      	mov	r0, sp
 80a1afe:	f000 fc6c 	bl	80a23da <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80a1b02:	4620      	mov	r0, r4
 80a1b04:	b008      	add	sp, #32
 80a1b06:	bd10      	pop	{r4, pc}

080a1b08 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a1b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1b0a:	4607      	mov	r7, r0
 80a1b0c:	460e      	mov	r6, r1
 80a1b0e:	4615      	mov	r5, r2
 80a1b10:	b085      	sub	sp, #20
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
 80a1b12:	2410      	movs	r4, #16
 80a1b14:	4622      	mov	r2, r4
 80a1b16:	2100      	movs	r1, #0
 80a1b18:	4668      	mov	r0, sp
 80a1b1a:	f002 fc10 	bl	80a433e <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a1b1e:	2200      	movs	r2, #0
 80a1b20:	4669      	mov	r1, sp
 80a1b22:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
 80a1b24:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
 80a1b28:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80a1b2a:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80a1b2c:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a1b2e:	f7ff fea5 	bl	80a187c <spark_function>
}
 80a1b32:	b005      	add	sp, #20
 80a1b34:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1b36 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a1b36:	b513      	push	{r0, r1, r4, lr}
 80a1b38:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a1b3a:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a1b3e:	2300      	movs	r3, #0
 80a1b40:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a1b42:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a1b44:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a1b46:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1b48:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a1b4a:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a1b4c:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1b4e:	f7fe fba0 	bl	80a0292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1b52:	4620      	mov	r0, r4
 80a1b54:	b002      	add	sp, #8
 80a1b56:	bd10      	pop	{r4, pc}

080a1b58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a1b58:	680b      	ldr	r3, [r1, #0]
 80a1b5a:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a1b5c:	b113      	cbz	r3, 80a1b64 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a1b5e:	685a      	ldr	r2, [r3, #4]
 80a1b60:	3201      	adds	r2, #1
 80a1b62:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a1b64:	4770      	bx	lr

080a1b66 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a1b66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1b68:	460c      	mov	r4, r1
 80a1b6a:	4606      	mov	r6, r0
 80a1b6c:	460f      	mov	r7, r1
 80a1b6e:	f854 3b04 	ldr.w	r3, [r4], #4
 80a1b72:	ad02      	add	r5, sp, #8
 80a1b74:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a1b78:	4621      	mov	r1, r4
 80a1b7a:	a801      	add	r0, sp, #4
 80a1b7c:	f7ff ffec 	bl	80a1b58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a1b80:	4629      	mov	r1, r5
 80a1b82:	4630      	mov	r0, r6
 80a1b84:	f7ff ffd7 	bl	80a1b36 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1b88:	a801      	add	r0, sp, #4
 80a1b8a:	f7fe fb82 	bl	80a0292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1b8e:	4620      	mov	r0, r4
 80a1b90:	f7fe fb7f 	bl	80a0292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a1b94:	4638      	mov	r0, r7
 80a1b96:	f7fe fa82 	bl	80a009e <_ZdlPv>
        return p;
    }
 80a1b9a:	4630      	mov	r0, r6
 80a1b9c:	b003      	add	sp, #12
 80a1b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1ba0 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a1ba0:	b513      	push	{r0, r1, r4, lr}
 80a1ba2:	460b      	mov	r3, r1
 80a1ba4:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1ba6:	c803      	ldmia	r0, {r0, r1}
 80a1ba8:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a1bac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a1bb0:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a1bb4:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a1bb8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a1bbc:	b002      	add	sp, #8
 80a1bbe:	bd10      	pop	{r4, pc}

080a1bc0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1bc0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a1bc2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1bc4:	b90a      	cbnz	r2, 80a1bca <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a1bc6:	f001 f920 	bl	80a2e0a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1bca:	68c3      	ldr	r3, [r0, #12]
    }
 80a1bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1bd0:	4718      	bx	r3

080a1bd2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a1bd2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1bd4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a1bd6:	f100 0110 	add.w	r1, r0, #16
 80a1bda:	f7ff fff1 	bl	80a1bc0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a1bde:	bd08      	pop	{r3, pc}

080a1be0 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1be0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a1be2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1be4:	b90a      	cbnz	r2, 80a1bea <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a1be6:	f001 f910 	bl	80a2e0a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1bea:	68c3      	ldr	r3, [r0, #12]
    }
 80a1bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1bf0:	4718      	bx	r3

080a1bf2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a1bf2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1bf4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a1bf6:	f100 0110 	add.w	r1, r0, #16
 80a1bfa:	f7ff fff1 	bl	80a1be0 <_ZNKSt8functionIFvRKbEEclES1_>
 80a1bfe:	bd08      	pop	{r3, pc}

080a1c00 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1c00:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1c02:	2300      	movs	r3, #0
 80a1c04:	6083      	str	r3, [r0, #8]
 80a1c06:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1c08:	4604      	mov	r4, r0
 80a1c0a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1c0c:	b12b      	cbz	r3, 80a1c1a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1c0e:	2202      	movs	r2, #2
 80a1c10:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1c12:	68eb      	ldr	r3, [r5, #12]
 80a1c14:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1c16:	68ab      	ldr	r3, [r5, #8]
 80a1c18:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1c1a:	4620      	mov	r0, r4
 80a1c1c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1c20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a1c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
 80a1c24:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80a1c28:	6804      	ldr	r4, [r0, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a1c2a:	f04f 0002 	mov.w	r0, #2
 80a1c2e:	b086      	sub	sp, #24
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1c30:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1c34:	808b      	strh	r3, [r1, #4]
 80a1c36:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1c38:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a1c3a:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1c3e:	600b      	str	r3, [r1, #0]
 80a1c40:	e8d4 1f4f 	ldrexb	r1, [r4]
 80a1c44:	4299      	cmp	r1, r3
 80a1c46:	d103      	bne.n	80a1c50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
 80a1c48:	e8c4 0f45 	strexb	r5, r0, [r4]
 80a1c4c:	2d00      	cmp	r5, #0
 80a1c4e:	d1f7      	bne.n	80a1c40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a1c50:	d002      	beq.n	80a1c58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
 80a1c52:	f88d 1000 	strb.w	r1, [sp]
 80a1c56:	e06b      	b.n	80a1d30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a1c58:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1c5c:	bf1c      	itt	ne
 80a1c5e:	60e7      	strne	r7, [r4, #12]
 80a1c60:	8222      	strhne	r2, [r4, #16]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a1c62:	f3bf 8f5f 	dmb	sy
      __b = _GLIBCXX_MOVE(__tmp);
 80a1c66:	bf18      	it	ne
 80a1c68:	461f      	movne	r7, r3
 80a1c6a:	2301      	movs	r3, #1
 80a1c6c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a1c6e:	f3bf 8f5f 	dmb	sy
 80a1c72:	f104 0308 	add.w	r3, r4, #8
 80a1c76:	2000      	movs	r0, #0
 80a1c78:	e853 6f00 	ldrex	r6, [r3]
 80a1c7c:	e843 0200 	strex	r2, r0, [r3]
 80a1c80:	2a00      	cmp	r2, #0
 80a1c82:	d1f9      	bne.n	80a1c78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 80a1c84:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a1c88:	2e00      	cmp	r6, #0
 80a1c8a:	d051      	beq.n	80a1d30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a1c8c:	f7ff fdc2 	bl	80a1814 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a1c90:	b120      	cbz	r0, 80a1c9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7c>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a1c92:	4629      	mov	r1, r5
 80a1c94:	4630      	mov	r0, r6
 80a1c96:	f7ff ff93 	bl	80a1bc0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a1c9a:	e043      	b.n	80a1d24 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a1c9c:	4631      	mov	r1, r6
 80a1c9e:	4668      	mov	r0, sp
 80a1ca0:	f7ff ffae 	bl	80a1c00 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a1ca4:	68e0      	ldr	r0, [r4, #12]
 80a1ca6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a1caa:	b108      	cbz	r0, 80a1cb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x90>
 80a1cac:	f002 fb8a 	bl	80a43c4 <strdup>
 80a1cb0:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a1cb2:	2010      	movs	r0, #16
 80a1cb4:	f8ad 5014 	strh.w	r5, [sp, #20]
 80a1cb8:	f7fe f9ef 	bl	80a009a <_Znwj>
 80a1cbc:	4605      	mov	r5, r0
 80a1cbe:	b330      	cbz	r0, 80a1d0e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xee>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1cc0:	f04f 0800 	mov.w	r8, #0
 80a1cc4:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1cc8:	2018      	movs	r0, #24
 80a1cca:	f7fe f9e6 	bl	80a009a <_Znwj>
 80a1cce:	4604      	mov	r4, r0
 80a1cd0:	b1c0      	cbz	r0, 80a1d04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe4>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1cd2:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a1cd6:	4601      	mov	r1, r0
 80a1cd8:	4668      	mov	r0, sp
 80a1cda:	f7ff ff61 	bl	80a1ba0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1cde:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a1ce0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1ce2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1ce4:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a1ce6:	9202      	str	r2, [sp, #8]
 80a1ce8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1cea:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1cec:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80a1cf0:	9203      	str	r2, [sp, #12]
 80a1cf2:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1cf4:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80a1cf8:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1cfc:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1cfe:	f8cd 8010 	str.w	r8, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1d02:	6123      	str	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1d04:	4b0d      	ldr	r3, [pc, #52]	; (80a1d3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1d06:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1d08:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1d0a:	4b0d      	ldr	r3, [pc, #52]	; (80a1d40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
 80a1d0c:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a1d0e:	9804      	ldr	r0, [sp, #16]
 80a1d10:	f7ff fe4c 	bl	80a19ac <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1d14:	4668      	mov	r0, sp
 80a1d16:	f7ff feb9 	bl	80a1a8c <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1d1a:	2200      	movs	r2, #0
 80a1d1c:	4629      	mov	r1, r5
 80a1d1e:	4809      	ldr	r0, [pc, #36]	; (80a1d44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
 80a1d20:	f7ff fd80 	bl	80a1824 <application_thread_invoke>
 80a1d24:	4630      	mov	r0, r6
 80a1d26:	f7ff feb1 	bl	80a1a8c <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a1d2a:	4630      	mov	r0, r6
 80a1d2c:	f7fe f9b7 	bl	80a009e <_ZdlPv>
 80a1d30:	4638      	mov	r0, r7
 80a1d32:	f7ff fe3b 	bl	80a19ac <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
 80a1d36:	b006      	add	sp, #24
 80a1d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1d3c:	080a1bd3 	.word	0x080a1bd3
 80a1d40:	080a1e31 	.word	0x080a1e31
 80a1d44:	080a1a4b 	.word	0x080a1a4b

080a1d48 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a1d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1d4c:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a1d4e:	ad07      	add	r5, sp, #28
 80a1d50:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a1d54:	4606      	mov	r6, r0
 80a1d56:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a1d58:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a1d5a:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a1d5c:	460f      	mov	r7, r1
 80a1d5e:	4690      	mov	r8, r2
 80a1d60:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a1d64:	f8c5 b004 	str.w	fp, [r5, #4]
 80a1d68:	f8c5 b008 	str.w	fp, [r5, #8]
 80a1d6c:	9307      	str	r3, [sp, #28]
 80a1d6e:	f7fe f994 	bl	80a009a <_Znwj>
 80a1d72:	4604      	mov	r4, r0
 80a1d74:	b138      	cbz	r0, 80a1d86 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a1d76:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a1d7a:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a1d7e:	f8c0 b004 	str.w	fp, [r0, #4]
 80a1d82:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a1d86:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1d88:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a1d8a:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a1d8c:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1d8e:	f7fe f984 	bl	80a009a <_Znwj>
 80a1d92:	b128      	cbz	r0, 80a1da0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a1d94:	2301      	movs	r3, #1
 80a1d96:	6043      	str	r3, [r0, #4]
 80a1d98:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a1d9a:	4b23      	ldr	r3, [pc, #140]	; (80a1e28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
 80a1d9c:	60c4      	str	r4, [r0, #12]
 80a1d9e:	6003      	str	r3, [r0, #0]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a1da0:	4b22      	ldr	r3, [pc, #136]	; (80a1e2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1da2:	9004      	str	r0, [sp, #16]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a1da4:	2008      	movs	r0, #8
 80a1da6:	9308      	str	r3, [sp, #32]
 80a1da8:	f7fe f977 	bl	80a009a <_Znwj>
 80a1dac:	4604      	mov	r4, r0
 80a1dae:	b128      	cbz	r0, 80a1dbc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1db0:	9b03      	ldr	r3, [sp, #12]
 80a1db2:	a904      	add	r1, sp, #16
 80a1db4:	f840 3b04 	str.w	r3, [r0], #4
 80a1db8:	f7ff fece 	bl	80a1b58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1dbc:	9500      	str	r5, [sp, #0]
 80a1dbe:	fa5f f38a 	uxtb.w	r3, sl
 80a1dc2:	464a      	mov	r2, r9
 80a1dc4:	4641      	mov	r1, r8
 80a1dc6:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a1dc8:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1dca:	f7ff fd77 	bl	80a18bc <spark_send_event>
 80a1dce:	b9b8      	cbnz	r0, 80a1e00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a1dd0:	9b03      	ldr	r3, [sp, #12]
 80a1dd2:	785b      	ldrb	r3, [r3, #1]
 80a1dd4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a1dd8:	b993      	cbnz	r3, 80a1e00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a1dda:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a1dde:	a905      	add	r1, sp, #20
 80a1de0:	a803      	add	r0, sp, #12
 80a1de2:	9205      	str	r2, [sp, #20]
 80a1de4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a1de8:	f7ff ff1a 	bl	80a1c20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a1dec:	9805      	ldr	r0, [sp, #20]
 80a1dee:	f7ff fddd 	bl	80a19ac <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a1df2:	a805      	add	r0, sp, #20
 80a1df4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a1df6:	f7ff feb6 	bl	80a1b66 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1dfa:	a806      	add	r0, sp, #24
 80a1dfc:	f7fe fa49 	bl	80a0292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1e00:	9b03      	ldr	r3, [sp, #12]
 80a1e02:	a904      	add	r1, sp, #16
 80a1e04:	a806      	add	r0, sp, #24
 80a1e06:	9305      	str	r3, [sp, #20]
 80a1e08:	f7ff fea6 	bl	80a1b58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a1e0c:	a905      	add	r1, sp, #20
 80a1e0e:	4630      	mov	r0, r6
 80a1e10:	f7ff fe91 	bl	80a1b36 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1e14:	a806      	add	r0, sp, #24
 80a1e16:	f7fe fa3c 	bl	80a0292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1e1a:	a804      	add	r0, sp, #16
 80a1e1c:	f7fe fa39 	bl	80a0292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80a1e20:	4630      	mov	r0, r6
 80a1e22:	b00b      	add	sp, #44	; 0x2c
 80a1e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1e28:	080a6b50 	.word	0x080a6b50
 80a1e2c:	080a1f99 	.word	0x080a1f99

080a1e30 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1e30:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1e32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1e34:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1e36:	d006      	beq.n	80a1e46 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a1e38:	2a03      	cmp	r2, #3
 80a1e3a:	d017      	beq.n	80a1e6c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a1e3c:	2a01      	cmp	r2, #1
 80a1e3e:	d120      	bne.n	80a1e82 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1e40:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a1e42:	6003      	str	r3, [r0, #0]
	      break;
 80a1e44:	e01d      	b.n	80a1e82 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1e46:	2018      	movs	r0, #24
 80a1e48:	680e      	ldr	r6, [r1, #0]
 80a1e4a:	f7fe f926 	bl	80a009a <_Znwj>
 80a1e4e:	4605      	mov	r5, r0
 80a1e50:	b150      	cbz	r0, 80a1e68 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a1e52:	4631      	mov	r1, r6
 80a1e54:	f7ff fed4 	bl	80a1c00 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a1e58:	6930      	ldr	r0, [r6, #16]
 80a1e5a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a1e5e:	b108      	cbz	r0, 80a1e64 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a1e60:	f002 fab0 	bl	80a43c4 <strdup>
 80a1e64:	6128      	str	r0, [r5, #16]
 80a1e66:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1e68:	6025      	str	r5, [r4, #0]
 80a1e6a:	e00a      	b.n	80a1e82 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1e6c:	6804      	ldr	r4, [r0, #0]
 80a1e6e:	b144      	cbz	r4, 80a1e82 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a1e70:	6920      	ldr	r0, [r4, #16]
 80a1e72:	f7ff fd9b 	bl	80a19ac <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1e76:	4620      	mov	r0, r4
 80a1e78:	f7ff fe08 	bl	80a1a8c <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1e7c:	4620      	mov	r0, r4
 80a1e7e:	f7fe f90e 	bl	80a009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a1e82:	2000      	movs	r0, #0
 80a1e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1e86 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1e86:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1e88:	2300      	movs	r3, #0
 80a1e8a:	6083      	str	r3, [r0, #8]
 80a1e8c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1e8e:	4604      	mov	r4, r0
 80a1e90:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1e92:	b12b      	cbz	r3, 80a1ea0 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1e94:	2202      	movs	r2, #2
 80a1e96:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1e98:	68eb      	ldr	r3, [r5, #12]
 80a1e9a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1e9c:	68ab      	ldr	r3, [r5, #8]
 80a1e9e:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1ea0:	4620      	mov	r0, r4
 80a1ea2:	bd38      	pop	{r3, r4, r5, pc}

080a1ea4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1ea4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1ea6:	b570      	push	{r4, r5, r6, lr}
 80a1ea8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1eaa:	d006      	beq.n	80a1eba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a1eac:	2a03      	cmp	r2, #3
 80a1eae:	d011      	beq.n	80a1ed4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a1eb0:	2a01      	cmp	r2, #1
 80a1eb2:	d117      	bne.n	80a1ee4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1eb4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a1eb6:	6003      	str	r3, [r0, #0]
	      break;
 80a1eb8:	e014      	b.n	80a1ee4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1eba:	2014      	movs	r0, #20
 80a1ebc:	680e      	ldr	r6, [r1, #0]
 80a1ebe:	f7fe f8ec 	bl	80a009a <_Znwj>
 80a1ec2:	4605      	mov	r5, r0
 80a1ec4:	b120      	cbz	r0, 80a1ed0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a1ec6:	4631      	mov	r1, r6
 80a1ec8:	f7ff ffdd 	bl	80a1e86 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a1ecc:	7c33      	ldrb	r3, [r6, #16]
 80a1ece:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1ed0:	6025      	str	r5, [r4, #0]
 80a1ed2:	e007      	b.n	80a1ee4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1ed4:	6804      	ldr	r4, [r0, #0]
 80a1ed6:	b12c      	cbz	r4, 80a1ee4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1ed8:	4620      	mov	r0, r4
 80a1eda:	f7ff fdd7 	bl	80a1a8c <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1ede:	4620      	mov	r0, r4
 80a1ee0:	f7fe f8dd 	bl	80a009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a1ee4:	2000      	movs	r0, #0
 80a1ee6:	bd70      	pop	{r4, r5, r6, pc}

080a1ee8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a1ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1eea:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a1eec:	f3bf 8f5f 	dmb	sy
 80a1ef0:	b087      	sub	sp, #28
 80a1ef2:	2300      	movs	r3, #0
 80a1ef4:	e850 6f00 	ldrex	r6, [r0]
 80a1ef8:	e840 3200 	strex	r2, r3, [r0]
 80a1efc:	2a00      	cmp	r2, #0
 80a1efe:	d1f9      	bne.n	80a1ef4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a1f00:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a1f04:	2e00      	cmp	r6, #0
 80a1f06:	d03e      	beq.n	80a1f86 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a1f08:	4618      	mov	r0, r3
 80a1f0a:	f7ff fc83 	bl	80a1814 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a1f0e:	4607      	mov	r7, r0
 80a1f10:	b120      	cbz	r0, 80a1f1c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a1f12:	4621      	mov	r1, r4
 80a1f14:	4630      	mov	r0, r6
 80a1f16:	f7ff fe63 	bl	80a1be0 <_ZNKSt8functionIFvRKbEEclES1_>
 80a1f1a:	e02e      	b.n	80a1f7a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a1f1c:	4631      	mov	r1, r6
 80a1f1e:	a801      	add	r0, sp, #4
 80a1f20:	f7ff ffb1 	bl	80a1e86 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a1f24:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a1f26:	2010      	movs	r0, #16
 80a1f28:	f88d 3014 	strb.w	r3, [sp, #20]
 80a1f2c:	f7fe f8b5 	bl	80a009a <_Znwj>
 80a1f30:	4605      	mov	r5, r0
 80a1f32:	b1d0      	cbz	r0, 80a1f6a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1f34:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1f36:	2014      	movs	r0, #20
 80a1f38:	f7fe f8af 	bl	80a009a <_Znwj>
 80a1f3c:	4604      	mov	r4, r0
 80a1f3e:	b178      	cbz	r0, 80a1f60 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1f40:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a1f42:	4601      	mov	r1, r0
 80a1f44:	a801      	add	r0, sp, #4
 80a1f46:	f7ff fe2b 	bl	80a1ba0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1f4a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a1f4c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1f4e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1f50:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a1f52:	9203      	str	r2, [sp, #12]
 80a1f54:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1f56:	60e3      	str	r3, [r4, #12]
 80a1f58:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1f5c:	9204      	str	r2, [sp, #16]
 80a1f5e:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1f60:	4b0a      	ldr	r3, [pc, #40]	; (80a1f8c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1f62:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1f64:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1f66:	4b0a      	ldr	r3, [pc, #40]	; (80a1f90 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a1f68:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1f6a:	a801      	add	r0, sp, #4
 80a1f6c:	f7ff fd8e 	bl	80a1a8c <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1f70:	2200      	movs	r2, #0
 80a1f72:	4629      	mov	r1, r5
 80a1f74:	4807      	ldr	r0, [pc, #28]	; (80a1f94 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a1f76:	f7ff fc55 	bl	80a1824 <application_thread_invoke>
 80a1f7a:	4630      	mov	r0, r6
 80a1f7c:	f7ff fd86 	bl	80a1a8c <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a1f80:	4630      	mov	r0, r6
 80a1f82:	f7fe f88c 	bl	80a009e <_ZdlPv>
        }
    }
 80a1f86:	b007      	add	sp, #28
 80a1f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1f8a:	bf00      	nop
 80a1f8c:	080a1bf3 	.word	0x080a1bf3
 80a1f90:	080a1ea5 	.word	0x080a1ea5
 80a1f94:	080a1a4b 	.word	0x080a1a4b

080a1f98 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a1f98:	b530      	push	{r4, r5, lr}
 80a1f9a:	4604      	mov	r4, r0
 80a1f9c:	b085      	sub	sp, #20
 80a1f9e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a1fa0:	4668      	mov	r0, sp
 80a1fa2:	4611      	mov	r1, r2
 80a1fa4:	f7ff fddf 	bl	80a1b66 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a1fa8:	b17c      	cbz	r4, 80a1fca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a1faa:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a1fac:	4628      	mov	r0, r5
 80a1fae:	b10d      	cbz	r5, 80a1fb4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a1fb0:	f002 fa08 	bl	80a43c4 <strdup>
 80a1fb4:	9002      	str	r0, [sp, #8]
 80a1fb6:	a902      	add	r1, sp, #8
 80a1fb8:	4668      	mov	r0, sp
 80a1fba:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a1fbe:	f7ff fe2f 	bl	80a1c20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a1fc2:	9802      	ldr	r0, [sp, #8]
 80a1fc4:	f7ff fcf2 	bl	80a19ac <free>
 80a1fc8:	e01d      	b.n	80a2006 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a1fca:	f04f 0201 	mov.w	r2, #1
 80a1fce:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a1fd0:	f88d 4008 	strb.w	r4, [sp, #8]
 80a1fd4:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a1fd8:	42a3      	cmp	r3, r4
 80a1fda:	d103      	bne.n	80a1fe4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a1fdc:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a1fe0:	2900      	cmp	r1, #0
 80a1fe2:	d1f7      	bne.n	80a1fd4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a1fe4:	d002      	beq.n	80a1fec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a1fe6:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1fea:	e00c      	b.n	80a2006 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a1fec:	f110 010c 	adds.w	r1, r0, #12
 80a1ff0:	f04f 0301 	mov.w	r3, #1
 80a1ff4:	bf18      	it	ne
 80a1ff6:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a1ff8:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a1ffc:	3004      	adds	r0, #4
 80a1ffe:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a2002:	f7ff ff71 	bl	80a1ee8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a2006:	a801      	add	r0, sp, #4
 80a2008:	f7fe f943 	bl	80a0292 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a200c:	b005      	add	sp, #20
 80a200e:	bd30      	pop	{r4, r5, pc}

080a2010 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a2010:	4770      	bx	lr

080a2012 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a2012:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2014:	4606      	mov	r6, r0
 80a2016:	4615      	mov	r5, r2
 80a2018:	460c      	mov	r4, r1
 80a201a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a201c:	42bc      	cmp	r4, r7
 80a201e:	d006      	beq.n	80a202e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a2020:	6833      	ldr	r3, [r6, #0]
 80a2022:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a2026:	689b      	ldr	r3, [r3, #8]
 80a2028:	4630      	mov	r0, r6
 80a202a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a202c:	e7f6      	b.n	80a201c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a202e:	4628      	mov	r0, r5
 80a2030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2032 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a2032:	2200      	movs	r2, #0
 80a2034:	7c00      	ldrb	r0, [r0, #16]
 80a2036:	f7ff bafb 	b.w	80a1630 <HAL_I2C_Write_Data>

080a203a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a203a:	2100      	movs	r1, #0
 80a203c:	7c00      	ldrb	r0, [r0, #16]
 80a203e:	f7ff baff 	b.w	80a1640 <HAL_I2C_Available_Data>

080a2042 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a2042:	2100      	movs	r1, #0
 80a2044:	7c00      	ldrb	r0, [r0, #16]
 80a2046:	f7ff bb03 	b.w	80a1650 <HAL_I2C_Read_Data>

080a204a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a204a:	2100      	movs	r1, #0
 80a204c:	7c00      	ldrb	r0, [r0, #16]
 80a204e:	f7ff bb07 	b.w	80a1660 <HAL_I2C_Peek_Data>

080a2052 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a2052:	2100      	movs	r1, #0
 80a2054:	7c00      	ldrb	r0, [r0, #16]
 80a2056:	f7ff bb0b 	b.w	80a1670 <HAL_I2C_Flush_Data>

080a205a <_ZN7TwoWireD0Ev>:
 80a205a:	b510      	push	{r4, lr}
 80a205c:	4604      	mov	r4, r0
 80a205e:	f7fe f81e 	bl	80a009e <_ZdlPv>
 80a2062:	4620      	mov	r0, r4
 80a2064:	bd10      	pop	{r4, pc}
	...

080a2068 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a2068:	b510      	push	{r4, lr}
 80a206a:	4604      	mov	r4, r0
 80a206c:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a206e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2072:	60a3      	str	r3, [r4, #8]
 80a2074:	4b04      	ldr	r3, [pc, #16]	; (80a2088 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2076:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a2078:	7420      	strb	r0, [r4, #16]
 80a207a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a207c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a207e:	f7ff fb07 	bl	80a1690 <HAL_I2C_Init>

}
 80a2082:	4620      	mov	r0, r4
 80a2084:	bd10      	pop	{r4, pc}
 80a2086:	bf00      	nop
 80a2088:	080a6b6c 	.word	0x080a6b6c

080a208c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a208c:	2300      	movs	r3, #0
 80a208e:	461a      	mov	r2, r3
 80a2090:	4619      	mov	r1, r3
 80a2092:	7c00      	ldrb	r0, [r0, #16]
 80a2094:	f7ff baac 	b.w	80a15f0 <HAL_I2C_Begin>

080a2098 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a2098:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a209a:	2400      	movs	r4, #0
 80a209c:	7c00      	ldrb	r0, [r0, #16]
 80a209e:	9400      	str	r4, [sp, #0]
 80a20a0:	f7ff faae 	bl	80a1600 <HAL_I2C_Request_Data>
  return result;
}
 80a20a4:	b2c0      	uxtb	r0, r0
 80a20a6:	b002      	add	sp, #8
 80a20a8:	bd10      	pop	{r4, pc}

080a20aa <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a20aa:	2301      	movs	r3, #1
 80a20ac:	b2d2      	uxtb	r2, r2
 80a20ae:	b2c9      	uxtb	r1, r1
 80a20b0:	f7ff bff2 	b.w	80a2098 <_ZN7TwoWire11requestFromEhhh>

080a20b4 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a20b4:	2200      	movs	r2, #0
 80a20b6:	7c00      	ldrb	r0, [r0, #16]
 80a20b8:	f7ff baaa 	b.w	80a1610 <HAL_I2C_Begin_Transmission>

080a20bc <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80a20bc:	b2c9      	uxtb	r1, r1
 80a20be:	f7ff bff9 	b.w	80a20b4 <_ZN7TwoWire17beginTransmissionEh>

080a20c2 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a20c2:	2200      	movs	r2, #0
 80a20c4:	7c00      	ldrb	r0, [r0, #16]
 80a20c6:	f7ff baab 	b.w	80a1620 <HAL_I2C_End_Transmission>

080a20ca <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a20ca:	2101      	movs	r1, #1
 80a20cc:	f7ff bff9 	b.w	80a20c2 <_ZN7TwoWire15endTransmissionEh>

080a20d0 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a20d0:	2100      	movs	r1, #0
 80a20d2:	7c00      	ldrb	r0, [r0, #16]
 80a20d4:	f7ff bad4 	b.w	80a1680 <HAL_I2C_Is_Enabled>

080a20d8 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 80a20d8:	4700      	bx	r0
	...

080a20dc <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 80a20dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a20de:	461c      	mov	r4, r3
 80a20e0:	b085      	sub	sp, #20
 80a20e2:	4605      	mov	r5, r0
 80a20e4:	460e      	mov	r6, r1
 80a20e6:	4617      	mov	r7, r2
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
 80a20e8:	f7ff fa7a 	bl	80a15e0 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
 80a20ec:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
 80a20ee:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a20f0:	f04f 0304 	mov.w	r3, #4
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 80a20f4:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a20f6:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
  }
  return nullptr;
 80a20fa:	bfb4      	ite	lt
 80a20fc:	4603      	movlt	r3, r0
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a20fe:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a2102:	4628      	mov	r0, r5
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a2104:	bfa4      	itt	ge
 80a2106:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
 80a210a:	ab03      	addge	r3, sp, #12
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a210c:	9300      	str	r3, [sp, #0]
 80a210e:	4632      	mov	r2, r6
 80a2110:	463b      	mov	r3, r7
 80a2112:	4904      	ldr	r1, [pc, #16]	; (80a2124 <_Z15attachInterrupttPFvvE13InterruptModeah+0x48>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80a2114:	bfa8      	it	ge
 80a2116:	f88d 400d 	strbge.w	r4, [sp, #13]
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80a211a:	f7ff fa59 	bl	80a15d0 <HAL_Interrupts_Attach>
    return true;
}
 80a211e:	2001      	movs	r0, #1
 80a2120:	b005      	add	sp, #20
 80a2122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2124:	080a20d9 	.word	0x080a20d9

080a2128 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a2128:	4770      	bx	lr

080a212a <_ZN9IPAddressD0Ev>:
 80a212a:	b510      	push	{r4, lr}
 80a212c:	4604      	mov	r4, r0
 80a212e:	f7fd ffb6 	bl	80a009e <_ZdlPv>
 80a2132:	4620      	mov	r0, r4
 80a2134:	bd10      	pop	{r4, pc}

080a2136 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a2136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2138:	460f      	mov	r7, r1
 80a213a:	f100 0608 	add.w	r6, r0, #8
 80a213e:	1d05      	adds	r5, r0, #4
 80a2140:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a2142:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a2146:	220a      	movs	r2, #10
 80a2148:	4638      	mov	r0, r7
 80a214a:	f000 f910 	bl	80a236e <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a214e:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a2150:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2152:	d007      	beq.n	80a2164 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a2154:	2c00      	cmp	r4, #0
 80a2156:	d0f4      	beq.n	80a2142 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a2158:	212e      	movs	r1, #46	; 0x2e
 80a215a:	4638      	mov	r0, r7
 80a215c:	f000 f8da 	bl	80a2314 <_ZN5Print5printEc>
 80a2160:	4404      	add	r4, r0
 80a2162:	e7ee      	b.n	80a2142 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a2164:	4620      	mov	r0, r4
 80a2166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2168 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a2168:	b510      	push	{r4, lr}
 80a216a:	4604      	mov	r4, r0
 80a216c:	4b04      	ldr	r3, [pc, #16]	; (80a2180 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a216e:	2211      	movs	r2, #17
 80a2170:	f840 3b04 	str.w	r3, [r0], #4
 80a2174:	2100      	movs	r1, #0
 80a2176:	f002 f8e2 	bl	80a433e <memset>
{
    clear();
}
 80a217a:	4620      	mov	r0, r4
 80a217c:	bd10      	pop	{r4, pc}
 80a217e:	bf00      	nop
 80a2180:	080a6b94 	.word	0x080a6b94

080a2184 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a2184:	4603      	mov	r3, r0
 80a2186:	4a07      	ldr	r2, [pc, #28]	; (80a21a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a2188:	b510      	push	{r4, lr}
 80a218a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a218e:	f101 0210 	add.w	r2, r1, #16
 80a2192:	f851 4b04 	ldr.w	r4, [r1], #4
 80a2196:	4291      	cmp	r1, r2
 80a2198:	f843 4b04 	str.w	r4, [r3], #4
 80a219c:	d1f9      	bne.n	80a2192 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a219e:	780a      	ldrb	r2, [r1, #0]
 80a21a0:	701a      	strb	r2, [r3, #0]
}
 80a21a2:	bd10      	pop	{r4, pc}
 80a21a4:	080a6b94 	.word	0x080a6b94

080a21a8 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a21a8:	4a02      	ldr	r2, [pc, #8]	; (80a21b4 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a21aa:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a21ac:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a21ae:	2204      	movs	r2, #4
 80a21b0:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a21b2:	4770      	bx	lr
 80a21b4:	080a6b94 	.word	0x080a6b94

080a21b8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a21b8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a21ba:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a21be:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a21c2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a21c6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a21ca:	2304      	movs	r3, #4
 80a21cc:	6041      	str	r1, [r0, #4]
 80a21ce:	7503      	strb	r3, [r0, #20]
 80a21d0:	bd10      	pop	{r4, pc}
	...

080a21d4 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a21d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a21d6:	4d04      	ldr	r5, [pc, #16]	; (80a21e8 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a21d8:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a21da:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a21de:	9500      	str	r5, [sp, #0]
 80a21e0:	f7ff ffea 	bl	80a21b8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a21e4:	b003      	add	sp, #12
 80a21e6:	bd30      	pop	{r4, r5, pc}
 80a21e8:	080a6b94 	.word	0x080a6b94

080a21ec <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a21ec:	4a01      	ldr	r2, [pc, #4]	; (80a21f4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a21ee:	4b02      	ldr	r3, [pc, #8]	; (80a21f8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a21f0:	601a      	str	r2, [r3, #0]
 80a21f2:	4770      	bx	lr
 80a21f4:	080a6c53 	.word	0x080a6c53
 80a21f8:	20000524 	.word	0x20000524

080a21fc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a21fc:	2300      	movs	r3, #0
 80a21fe:	461a      	mov	r2, r3
 80a2200:	6840      	ldr	r0, [r0, #4]
 80a2202:	f7ff bb7b 	b.w	80a18fc <network_connect>

080a2206 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a2206:	2200      	movs	r2, #0
 80a2208:	2102      	movs	r1, #2
 80a220a:	6840      	ldr	r0, [r0, #4]
 80a220c:	f7ff bb86 	b.w	80a191c <network_disconnect>

080a2210 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a2210:	2200      	movs	r2, #0
 80a2212:	4611      	mov	r1, r2
 80a2214:	6840      	ldr	r0, [r0, #4]
 80a2216:	f7ff bb79 	b.w	80a190c <network_connecting>

080a221a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a221a:	2200      	movs	r2, #0
 80a221c:	4611      	mov	r1, r2
 80a221e:	6840      	ldr	r0, [r0, #4]
 80a2220:	f7ff bb84 	b.w	80a192c <network_ready>

080a2224 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a2224:	2300      	movs	r3, #0
 80a2226:	461a      	mov	r2, r3
 80a2228:	4619      	mov	r1, r3
 80a222a:	6840      	ldr	r0, [r0, #4]
 80a222c:	f7ff bb86 	b.w	80a193c <network_on>

080a2230 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a2230:	2300      	movs	r3, #0
 80a2232:	461a      	mov	r2, r3
 80a2234:	4619      	mov	r1, r3
 80a2236:	6840      	ldr	r0, [r0, #4]
 80a2238:	f7ff bb88 	b.w	80a194c <network_off>

080a223c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a223c:	2200      	movs	r2, #0
 80a223e:	f081 0101 	eor.w	r1, r1, #1
 80a2242:	6840      	ldr	r0, [r0, #4]
 80a2244:	f7ff bb8a 	b.w	80a195c <network_listen>

080a2248 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a2248:	2200      	movs	r2, #0
 80a224a:	6840      	ldr	r0, [r0, #4]
 80a224c:	f7ff bb96 	b.w	80a197c <network_set_listen_timeout>

080a2250 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a2250:	2200      	movs	r2, #0
 80a2252:	4611      	mov	r1, r2
 80a2254:	6840      	ldr	r0, [r0, #4]
 80a2256:	f7ff bb99 	b.w	80a198c <network_get_listen_timeout>

080a225a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a225a:	2200      	movs	r2, #0
 80a225c:	4611      	mov	r1, r2
 80a225e:	6840      	ldr	r0, [r0, #4]
 80a2260:	f7ff bb84 	b.w	80a196c <network_listening>

080a2264 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2264:	b570      	push	{r4, r5, r6, lr}
 80a2266:	4616      	mov	r6, r2
 80a2268:	b08e      	sub	sp, #56	; 0x38
 80a226a:	4604      	mov	r4, r0
    IPAddress addr;
 80a226c:	a808      	add	r0, sp, #32
 80a226e:	f7ff ff7b 	bl	80a2168 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a2272:	2211      	movs	r2, #17
 80a2274:	2100      	movs	r1, #0
 80a2276:	a803      	add	r0, sp, #12
 80a2278:	f002 f861 	bl	80a433e <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a227c:	4630      	mov	r0, r6
 80a227e:	f002 f8bc 	bl	80a43fa <strlen>
 80a2282:	2500      	movs	r5, #0
 80a2284:	4b0a      	ldr	r3, [pc, #40]	; (80a22b0 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a2286:	9500      	str	r5, [sp, #0]
 80a2288:	b281      	uxth	r1, r0
 80a228a:	685b      	ldr	r3, [r3, #4]
 80a228c:	aa03      	add	r2, sp, #12
 80a228e:	4630      	mov	r0, r6
 80a2290:	f7ff fa88 	bl	80a17a4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2294:	b120      	cbz	r0, 80a22a0 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a2296:	4629      	mov	r1, r5
 80a2298:	4620      	mov	r0, r4
 80a229a:	f7ff ff85 	bl	80a21a8 <_ZN9IPAddressC1Em>
 80a229e:	e003      	b.n	80a22a8 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a22a0:	a903      	add	r1, sp, #12
 80a22a2:	4620      	mov	r0, r4
 80a22a4:	f7ff ff6e 	bl	80a2184 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a22a8:	4620      	mov	r0, r4
 80a22aa:	b00e      	add	sp, #56	; 0x38
 80a22ac:	bd70      	pop	{r4, r5, r6, pc}
 80a22ae:	bf00      	nop
 80a22b0:	200009d8 	.word	0x200009d8

080a22b4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a22b4:	4b02      	ldr	r3, [pc, #8]	; (80a22c0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a22b6:	4a03      	ldr	r2, [pc, #12]	; (80a22c4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a22b8:	601a      	str	r2, [r3, #0]
 80a22ba:	2200      	movs	r2, #0
 80a22bc:	605a      	str	r2, [r3, #4]
 80a22be:	4770      	bx	lr
 80a22c0:	20000528 	.word	0x20000528
 80a22c4:	080a6c84 	.word	0x080a6c84

080a22c8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a22c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a22ca:	4606      	mov	r6, r0
 80a22cc:	460d      	mov	r5, r1
 80a22ce:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a22d0:	2400      	movs	r4, #0
  while (size--) {
 80a22d2:	42bd      	cmp	r5, r7
 80a22d4:	d00c      	beq.n	80a22f0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a22d6:	6833      	ldr	r3, [r6, #0]
 80a22d8:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a22dc:	689b      	ldr	r3, [r3, #8]
 80a22de:	4630      	mov	r0, r6
 80a22e0:	4798      	blx	r3
     if (chunk>=0)
 80a22e2:	2800      	cmp	r0, #0
 80a22e4:	db01      	blt.n	80a22ea <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a22e6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a22e8:	e7f3      	b.n	80a22d2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a22ea:	2c00      	cmp	r4, #0
 80a22ec:	bf08      	it	eq
 80a22ee:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a22f0:	4620      	mov	r0, r4
 80a22f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a22f4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a22f4:	b570      	push	{r4, r5, r6, lr}
 80a22f6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a22f8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a22fa:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a22fc:	b149      	cbz	r1, 80a2312 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a22fe:	f002 f87c 	bl	80a43fa <strlen>
 80a2302:	682b      	ldr	r3, [r5, #0]
 80a2304:	4602      	mov	r2, r0
 80a2306:	4621      	mov	r1, r4
 80a2308:	4628      	mov	r0, r5
    }
 80a230a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a230e:	68db      	ldr	r3, [r3, #12]
 80a2310:	4718      	bx	r3
    }
 80a2312:	bd70      	pop	{r4, r5, r6, pc}

080a2314 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a2314:	6803      	ldr	r3, [r0, #0]
 80a2316:	689b      	ldr	r3, [r3, #8]
 80a2318:	4718      	bx	r3

080a231a <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a231a:	2a01      	cmp	r2, #1
 80a231c:	bf98      	it	ls
 80a231e:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a2320:	b530      	push	{r4, r5, lr}
 80a2322:	460b      	mov	r3, r1
 80a2324:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a2326:	2100      	movs	r1, #0
 80a2328:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a232c:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a2330:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a2334:	fb05 3312 	mls	r3, r5, r2, r3
 80a2338:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a233a:	2b09      	cmp	r3, #9
 80a233c:	bf94      	ite	ls
 80a233e:	3330      	addls	r3, #48	; 0x30
 80a2340:	3337      	addhi	r3, #55	; 0x37
 80a2342:	b2db      	uxtb	r3, r3
 80a2344:	4621      	mov	r1, r4
 80a2346:	f804 3901 	strb.w	r3, [r4], #-1
 80a234a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a234c:	2d00      	cmp	r5, #0
 80a234e:	d1ef      	bne.n	80a2330 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a2350:	f7ff ffd0 	bl	80a22f4 <_ZN5Print5writeEPKc>
}
 80a2354:	b00b      	add	sp, #44	; 0x2c
 80a2356:	bd30      	pop	{r4, r5, pc}

080a2358 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a2358:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a235a:	b922      	cbnz	r2, 80a2366 <_ZN5Print5printEmi+0xe>
 80a235c:	6803      	ldr	r3, [r0, #0]
 80a235e:	b2c9      	uxtb	r1, r1
 80a2360:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a2362:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a2364:	4718      	bx	r3
  else return printNumber(n, base);
 80a2366:	b2d2      	uxtb	r2, r2
}
 80a2368:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a236a:	f7ff bfd6 	b.w	80a231a <_ZN5Print11printNumberEmh>

080a236e <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a236e:	f7ff bff3 	b.w	80a2358 <_ZN5Print5printEmi>

080a2372 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a2372:	b510      	push	{r4, lr}
 80a2374:	4604      	mov	r4, r0
 80a2376:	f7ff fb89 	bl	80a1a8c <_ZNSt14_Function_baseD1Ev>
 80a237a:	4620      	mov	r0, r4
 80a237c:	bd10      	pop	{r4, pc}
	...

080a2380 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2380:	4803      	ldr	r0, [pc, #12]	; (80a2390 <_GLOBAL__sub_I_RGB+0x10>)
 80a2382:	2300      	movs	r3, #0
 80a2384:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a2386:	4a03      	ldr	r2, [pc, #12]	; (80a2394 <_GLOBAL__sub_I_RGB+0x14>)
 80a2388:	4903      	ldr	r1, [pc, #12]	; (80a2398 <_GLOBAL__sub_I_RGB+0x18>)
 80a238a:	f000 bd39 	b.w	80a2e00 <__aeabi_atexit>
 80a238e:	bf00      	nop
 80a2390:	20000530 	.word	0x20000530
 80a2394:	20000460 	.word	0x20000460
 80a2398:	080a2373 	.word	0x080a2373

080a239c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a239c:	4770      	bx	lr

080a239e <_ZN8SPIClassD0Ev>:
 80a239e:	b510      	push	{r4, lr}
 80a23a0:	4604      	mov	r4, r0
 80a23a2:	f7fd fe7c 	bl	80a009e <_ZdlPv>
 80a23a6:	4620      	mov	r0, r4
 80a23a8:	bd10      	pop	{r4, pc}
	...

080a23ac <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a23ac:	b570      	push	{r4, r5, r6, lr}
 80a23ae:	4604      	mov	r4, r0
 80a23b0:	460e      	mov	r6, r1
 80a23b2:	4b07      	ldr	r3, [pc, #28]	; (80a23d0 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a23b4:	2500      	movs	r5, #0
 80a23b6:	6003      	str	r3, [r0, #0]
 80a23b8:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a23bc:	f7ff f880 	bl	80a14c0 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a23c0:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a23c2:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a23c4:	f7ff f96e 	bl	80a16a4 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a23c8:	60a5      	str	r5, [r4, #8]
}
 80a23ca:	4620      	mov	r0, r4
 80a23cc:	bd70      	pop	{r4, r5, r6, pc}
 80a23ce:	bf00      	nop
 80a23d0:	080a6cb8 	.word	0x080a6cb8

080a23d4 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a23d4:	7900      	ldrb	r0, [r0, #4]
 80a23d6:	f7ff b96d 	b.w	80a16b4 <HAL_SPI_Is_Enabled>

080a23da <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a23da:	b510      	push	{r4, lr}
 80a23dc:	4604      	mov	r4, r0
{
	free(buffer);
 80a23de:	6800      	ldr	r0, [r0, #0]
 80a23e0:	f7ff fae4 	bl	80a19ac <free>
}
 80a23e4:	4620      	mov	r0, r4
 80a23e6:	bd10      	pop	{r4, pc}

080a23e8 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a23e8:	b510      	push	{r4, lr}
 80a23ea:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a23ec:	6800      	ldr	r0, [r0, #0]
 80a23ee:	b108      	cbz	r0, 80a23f4 <_ZN6String10invalidateEv+0xc>
 80a23f0:	f7ff fadc 	bl	80a19ac <free>
	buffer = NULL;
 80a23f4:	2300      	movs	r3, #0
 80a23f6:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a23f8:	60a3      	str	r3, [r4, #8]
 80a23fa:	6063      	str	r3, [r4, #4]
 80a23fc:	bd10      	pop	{r4, pc}

080a23fe <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a23fe:	b538      	push	{r3, r4, r5, lr}
 80a2400:	4604      	mov	r4, r0
 80a2402:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a2404:	6800      	ldr	r0, [r0, #0]
 80a2406:	3101      	adds	r1, #1
 80a2408:	f7ff fad8 	bl	80a19bc <realloc>
	if (newbuffer) {
 80a240c:	b110      	cbz	r0, 80a2414 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a240e:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a2412:	2001      	movs	r0, #1
	}
	return 0;
}
 80a2414:	bd38      	pop	{r3, r4, r5, pc}

080a2416 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a2416:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a2418:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a241a:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a241c:	b113      	cbz	r3, 80a2424 <_ZN6String7reserveEj+0xe>
 80a241e:	6843      	ldr	r3, [r0, #4]
 80a2420:	428b      	cmp	r3, r1
 80a2422:	d207      	bcs.n	80a2434 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a2424:	4620      	mov	r0, r4
 80a2426:	f7ff ffea 	bl	80a23fe <_ZN6String12changeBufferEj>
 80a242a:	b120      	cbz	r0, 80a2436 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a242c:	68a3      	ldr	r3, [r4, #8]
 80a242e:	b90b      	cbnz	r3, 80a2434 <_ZN6String7reserveEj+0x1e>
 80a2430:	6822      	ldr	r2, [r4, #0]
 80a2432:	7013      	strb	r3, [r2, #0]
 80a2434:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a2436:	bd10      	pop	{r4, pc}

080a2438 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a2438:	b570      	push	{r4, r5, r6, lr}
 80a243a:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a243c:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a243e:	4604      	mov	r4, r0
 80a2440:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a2442:	f7ff ffe8 	bl	80a2416 <_ZN6String7reserveEj>
 80a2446:	b918      	cbnz	r0, 80a2450 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a2448:	4620      	mov	r0, r4
 80a244a:	f7ff ffcd 	bl	80a23e8 <_ZN6String10invalidateEv>
		return *this;
 80a244e:	e009      	b.n	80a2464 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a2450:	462a      	mov	r2, r5
 80a2452:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a2454:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a2456:	6820      	ldr	r0, [r4, #0]
 80a2458:	f001 ff66 	bl	80a4328 <memcpy>
	buffer[len] = 0;
 80a245c:	6822      	ldr	r2, [r4, #0]
 80a245e:	68a3      	ldr	r3, [r4, #8]
 80a2460:	2100      	movs	r1, #0
 80a2462:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a2464:	4620      	mov	r0, r4
 80a2466:	bd70      	pop	{r4, r5, r6, pc}

080a2468 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a2468:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a246a:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a246c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a246e:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a2470:	6043      	str	r3, [r0, #4]
	len = 0;
 80a2472:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a2474:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a2476:	460d      	mov	r5, r1
 80a2478:	b139      	cbz	r1, 80a248a <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a247a:	4608      	mov	r0, r1
 80a247c:	f001 ffbd 	bl	80a43fa <strlen>
 80a2480:	4629      	mov	r1, r5
 80a2482:	4602      	mov	r2, r0
 80a2484:	4620      	mov	r0, r4
 80a2486:	f7ff ffd7 	bl	80a2438 <_ZN6String4copyEPKcj>
}
 80a248a:	4620      	mov	r0, r4
 80a248c:	bd38      	pop	{r3, r4, r5, pc}

080a248e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a248e:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a2490:	b510      	push	{r4, lr}
 80a2492:	460b      	mov	r3, r1
 80a2494:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a2496:	d007      	beq.n	80a24a8 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a2498:	6809      	ldr	r1, [r1, #0]
 80a249a:	b119      	cbz	r1, 80a24a4 <_ZN6StringaSERKS_+0x16>
 80a249c:	689a      	ldr	r2, [r3, #8]
 80a249e:	f7ff ffcb 	bl	80a2438 <_ZN6String4copyEPKcj>
 80a24a2:	e001      	b.n	80a24a8 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a24a4:	f7ff ffa0 	bl	80a23e8 <_ZN6String10invalidateEv>

	return *this;
}
 80a24a8:	4620      	mov	r0, r4
 80a24aa:	bd10      	pop	{r4, pc}

080a24ac <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a24ac:	b510      	push	{r4, lr}
 80a24ae:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a24b0:	2300      	movs	r3, #0
 80a24b2:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a24b4:	6043      	str	r3, [r0, #4]
	len = 0;
 80a24b6:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a24b8:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a24ba:	f7ff ffe8 	bl	80a248e <_ZN6StringaSERKS_>
}
 80a24be:	4620      	mov	r0, r4
 80a24c0:	bd10      	pop	{r4, pc}

080a24c2 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a24c2:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a24c4:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a24c6:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a24c8:	b912      	cbnz	r2, 80a24d0 <_ZNK6String6equalsEPKc+0xe>
 80a24ca:	b919      	cbnz	r1, 80a24d4 <_ZNK6String6equalsEPKc+0x12>
 80a24cc:	2001      	movs	r0, #1
 80a24ce:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a24d0:	b911      	cbnz	r1, 80a24d8 <_ZNK6String6equalsEPKc+0x16>
 80a24d2:	6803      	ldr	r3, [r0, #0]
 80a24d4:	7818      	ldrb	r0, [r3, #0]
 80a24d6:	e002      	b.n	80a24de <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80a24d8:	6800      	ldr	r0, [r0, #0]
 80a24da:	f001 ff61 	bl	80a43a0 <strcmp>
 80a24de:	fab0 f080 	clz	r0, r0
 80a24e2:	0940      	lsrs	r0, r0, #5
}
 80a24e4:	bd08      	pop	{r3, pc}

080a24e6 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
 80a24e6:	b570      	push	{r4, r5, r6, lr}
 80a24e8:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
 80a24ea:	b19a      	cbz	r2, 80a2514 <_ZNK6String8getBytesEPhjj+0x2e>
 80a24ec:	b191      	cbz	r1, 80a2514 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
 80a24ee:	6885      	ldr	r5, [r0, #8]
 80a24f0:	429d      	cmp	r5, r3
 80a24f2:	d802      	bhi.n	80a24fa <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
 80a24f4:	2300      	movs	r3, #0
 80a24f6:	700b      	strb	r3, [r1, #0]
		return;
 80a24f8:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
 80a24fa:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
 80a24fc:	1aed      	subs	r5, r5, r3
 80a24fe:	42ac      	cmp	r4, r5
 80a2500:	bf28      	it	cs
 80a2502:	462c      	movcs	r4, r5
	strncpy((char *)buf, buffer + index, n);
 80a2504:	6801      	ldr	r1, [r0, #0]
 80a2506:	4622      	mov	r2, r4
 80a2508:	4419      	add	r1, r3
 80a250a:	4630      	mov	r0, r6
 80a250c:	f001 ff92 	bl	80a4434 <strncpy>
	buf[n] = 0;
 80a2510:	2300      	movs	r3, #0
 80a2512:	5533      	strb	r3, [r6, r4]
 80a2514:	bd70      	pop	{r4, r5, r6, pc}

080a2516 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
 80a2516:	4601      	mov	r1, r0
 80a2518:	2200      	movs	r2, #0
 80a251a:	208c      	movs	r0, #140	; 0x8c
 80a251c:	f7fe bfe0 	b.w	80a14e0 <HAL_Core_System_Reset_Ex>

080a2520 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
 80a2520:	2000      	movs	r0, #0
 80a2522:	f7ff bff8 	b.w	80a2516 <_ZN11SystemClass5resetEm>
	...

080a2528 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a2528:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a252c:	4b03      	ldr	r3, [pc, #12]	; (80a253c <_GLOBAL__sub_I_System+0x14>)
 80a252e:	2000      	movs	r0, #0
 80a2530:	7018      	strb	r0, [r3, #0]
 80a2532:	8058      	strh	r0, [r3, #2]
 80a2534:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a2536:	f7ff b955 	b.w	80a17e4 <set_system_mode>
 80a253a:	bf00      	nop
 80a253c:	20000540 	.word	0x20000540

080a2540 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a2540:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 80a2542:	4b14      	ldr	r3, [pc, #80]	; (80a2594 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a2544:	4f14      	ldr	r7, [pc, #80]	; (80a2598 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80a2546:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 80a2548:	4b14      	ldr	r3, [pc, #80]	; (80a259c <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80a254a:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 80a254c:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 80a254e:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 80a2550:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 80a2552:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a2554:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a2556:	d01b      	beq.n	80a2590 <_ZL22Refresh_UnixTime_Cachel+0x50>
 80a2558:	a80a      	add	r0, sp, #40	; 0x28
 80a255a:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 80a255e:	f001 fde7 	bl	80a4130 <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80a2562:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80a2564:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 80a2566:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80a2568:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80a256c:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 80a256e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a2570:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a2572:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a2574:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a2576:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a257a:	4c09      	ldr	r4, [pc, #36]	; (80a25a0 <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80a257c:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a2580:	ad01      	add	r5, sp, #4
 80a2582:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a2584:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a2586:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a2588:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 80a258a:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a258c:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 80a2590:	b00b      	add	sp, #44	; 0x2c
 80a2592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2594:	20000578 	.word	0x20000578
 80a2598:	20000574 	.word	0x20000574
 80a259c:	20000570 	.word	0x20000570
 80a25a0:	20000548 	.word	0x20000548

080a25a4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 80a25a4:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a25a6:	2000      	movs	r0, #0
 80a25a8:	f7ff f998 	bl	80a18dc <spark_sync_time_pending>
 80a25ac:	b128      	cbz	r0, 80a25ba <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a25ae:	f7ff f975 	bl	80a189c <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a25b2:	f080 0001 	eor.w	r0, r0, #1
 80a25b6:	b2c0      	uxtb	r0, r0
 80a25b8:	bd08      	pop	{r3, pc}
 80a25ba:	2001      	movs	r0, #1
    }
 80a25bc:	bd08      	pop	{r3, pc}
	...

080a25c0 <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 80a25c0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 80a25c2:	f7ff ffbd 	bl	80a2540 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 80a25c6:	4b02      	ldr	r3, [pc, #8]	; (80a25d0 <_ZN9TimeClass5monthEl+0x10>)
 80a25c8:	6918      	ldr	r0, [r3, #16]
}
 80a25ca:	3001      	adds	r0, #1
 80a25cc:	bd08      	pop	{r3, pc}
 80a25ce:	bf00      	nop
 80a25d0:	20000548 	.word	0x20000548

080a25d4 <_ZN9TimeClass4zoneEf>:
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a25d4:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a25d6:	4909      	ldr	r1, [pc, #36]	; (80a25fc <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a25d8:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a25da:	f001 fd0d 	bl	80a3ff8 <__aeabi_fcmplt>
 80a25de:	b960      	cbnz	r0, 80a25fa <_ZN9TimeClass4zoneEf+0x26>
 80a25e0:	4907      	ldr	r1, [pc, #28]	; (80a2600 <_ZN9TimeClass4zoneEf+0x2c>)
 80a25e2:	4620      	mov	r0, r4
 80a25e4:	f001 fd26 	bl	80a4034 <__aeabi_fcmpgt>
 80a25e8:	b938      	cbnz	r0, 80a25fa <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 80a25ea:	4906      	ldr	r1, [pc, #24]	; (80a2604 <_ZN9TimeClass4zoneEf+0x30>)
 80a25ec:	4620      	mov	r0, r4
 80a25ee:	f001 fb65 	bl	80a3cbc <__aeabi_fmul>
 80a25f2:	f001 fd29 	bl	80a4048 <__aeabi_f2iz>
 80a25f6:	4b04      	ldr	r3, [pc, #16]	; (80a2608 <_ZN9TimeClass4zoneEf+0x34>)
 80a25f8:	6018      	str	r0, [r3, #0]
 80a25fa:	bd10      	pop	{r4, pc}
 80a25fc:	c1400000 	.word	0xc1400000
 80a2600:	41600000 	.word	0x41600000
 80a2604:	45610000 	.word	0x45610000
 80a2608:	20000578 	.word	0x20000578

080a260c <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80a260c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 80a260e:	4b0e      	ldr	r3, [pc, #56]	; (80a2648 <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80a2610:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 80a2612:	681b      	ldr	r3, [r3, #0]
 80a2614:	a802      	add	r0, sp, #8
 80a2616:	4419      	add	r1, r3
 80a2618:	4b0c      	ldr	r3, [pc, #48]	; (80a264c <_ZN9TimeClass7timeStrEl+0x40>)
 80a261a:	681b      	ldr	r3, [r3, #0]
 80a261c:	4419      	add	r1, r3
 80a261e:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 80a2622:	f001 fd85 	bl	80a4130 <localtime>
        char* ascstr = asctime(calendar_time);
 80a2626:	f001 fd35 	bl	80a4094 <asctime>
 80a262a:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 80a262c:	f001 fee5 	bl	80a43fa <strlen>
        ascstr[len-1] = 0; // remove final newline
 80a2630:	2300      	movs	r3, #0
 80a2632:	4428      	add	r0, r5
 80a2634:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 80a2638:	4629      	mov	r1, r5
 80a263a:	4620      	mov	r0, r4
 80a263c:	f7ff ff14 	bl	80a2468 <_ZN6StringC1EPK19__FlashStringHelper>
}
 80a2640:	4620      	mov	r0, r4
 80a2642:	b003      	add	sp, #12
 80a2644:	bd30      	pop	{r4, r5, pc}
 80a2646:	bf00      	nop
 80a2648:	20000578 	.word	0x20000578
 80a264c:	20000570 	.word	0x20000570

080a2650 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a2650:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80a2652:	2000      	movs	r0, #0
 80a2654:	f7fe ff94 	bl	80a1580 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80a2658:	4604      	mov	r4, r0
 80a265a:	b968      	cbnz	r0, 80a2678 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a265c:	f7ff f8ba 	bl	80a17d4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a2660:	2801      	cmp	r0, #1
 80a2662:	d10b      	bne.n	80a267c <_ZN9TimeClass7isValidEv+0x2c>
 80a2664:	4620      	mov	r0, r4
 80a2666:	f7ff f8e5 	bl	80a1834 <system_thread_get_state>
 80a266a:	b938      	cbnz	r0, 80a267c <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80a266c:	f7ff ff9a 	bl	80a25a4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a2670:	b930      	cbnz	r0, 80a2680 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80a2672:	f7ff f90b 	bl	80a188c <spark_process>
 80a2676:	e7f9      	b.n	80a266c <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80a2678:	2001      	movs	r0, #1
 80a267a:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80a267c:	2000      	movs	r0, #0
 80a267e:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80a2680:	f7ff ff90 	bl	80a25a4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80a2684:	2000      	movs	r0, #0
 80a2686:	f7fe ff7b 	bl	80a1580 <HAL_RTC_Time_Is_Valid>
 80a268a:	3000      	adds	r0, #0
 80a268c:	bf18      	it	ne
 80a268e:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80a2690:	bd10      	pop	{r4, pc}

080a2692 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80a2692:	b508      	push	{r3, lr}
    (void)isValid();
 80a2694:	f7ff ffdc 	bl	80a2650 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80a2698:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 80a269c:	f7fe bf40 	b.w	80a1520 <HAL_RTC_Get_UnixTime>

080a26a0 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
 80a26a0:	b508      	push	{r3, lr}
	return hour(now());
 80a26a2:	f7ff fff6 	bl	80a2692 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a26a6:	f7ff ff4b 	bl	80a2540 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
 80a26aa:	4b01      	ldr	r3, [pc, #4]	; (80a26b0 <_ZN9TimeClass4hourEv+0x10>)
 80a26ac:	6898      	ldr	r0, [r3, #8]
 80a26ae:	bd08      	pop	{r3, pc}
 80a26b0:	20000548 	.word	0x20000548

080a26b4 <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
 80a26b4:	b508      	push	{r3, lr}
	return day(now());
 80a26b6:	f7ff ffec 	bl	80a2692 <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a26ba:	f7ff ff41 	bl	80a2540 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
 80a26be:	4b01      	ldr	r3, [pc, #4]	; (80a26c4 <_ZN9TimeClass3dayEv+0x10>)
 80a26c0:	68d8      	ldr	r0, [r3, #12]
 80a26c2:	bd08      	pop	{r3, pc}
 80a26c4:	20000548 	.word	0x20000548

080a26c8 <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
 80a26c8:	b508      	push	{r3, lr}
	return month(now());
 80a26ca:	f7ff ffe2 	bl	80a2692 <_ZN9TimeClass3nowEv>
}
 80a26ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
 80a26d2:	f7ff bf75 	b.w	80a25c0 <_ZN9TimeClass5monthEl>
	...

080a26d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a26d8:	4b02      	ldr	r3, [pc, #8]	; (80a26e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a26da:	681a      	ldr	r2, [r3, #0]
 80a26dc:	4b02      	ldr	r3, [pc, #8]	; (80a26e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a26de:	601a      	str	r2, [r3, #0]
 80a26e0:	4770      	bx	lr
 80a26e2:	bf00      	nop
 80a26e4:	20000370 	.word	0x20000370
 80a26e8:	2000056c 	.word	0x2000056c

080a26ec <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a26ec:	4770      	bx	lr

080a26ee <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a26ee:	7441      	strb	r1, [r0, #17]
 80a26f0:	4770      	bx	lr

080a26f2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a26f2:	7c00      	ldrb	r0, [r0, #16]
 80a26f4:	f7ff b81e 	b.w	80a1734 <HAL_USART_Available_Data_For_Write>

080a26f8 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a26f8:	7c00      	ldrb	r0, [r0, #16]
 80a26fa:	f7fe bff3 	b.w	80a16e4 <HAL_USART_Available_Data>

080a26fe <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a26fe:	7c00      	ldrb	r0, [r0, #16]
 80a2700:	f7ff b800 	b.w	80a1704 <HAL_USART_Peek_Data>

080a2704 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a2704:	7c00      	ldrb	r0, [r0, #16]
 80a2706:	f7fe bff5 	b.w	80a16f4 <HAL_USART_Read_Data>

080a270a <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a270a:	7c00      	ldrb	r0, [r0, #16]
 80a270c:	f7ff b802 	b.w	80a1714 <HAL_USART_Flush_Data>

080a2710 <_ZN11USARTSerialD0Ev>:
 80a2710:	b510      	push	{r4, lr}
 80a2712:	4604      	mov	r4, r0
 80a2714:	f7fd fcc3 	bl	80a009e <_ZdlPv>
 80a2718:	4620      	mov	r0, r4
 80a271a:	bd10      	pop	{r4, pc}

080a271c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a271c:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a271e:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a2720:	4604      	mov	r4, r0
 80a2722:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2724:	b925      	cbnz	r5, 80a2730 <_ZN11USARTSerial5writeEh+0x14>
 80a2726:	7c00      	ldrb	r0, [r0, #16]
 80a2728:	f7ff f804 	bl	80a1734 <HAL_USART_Available_Data_For_Write>
 80a272c:	2800      	cmp	r0, #0
 80a272e:	dd05      	ble.n	80a273c <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2730:	4631      	mov	r1, r6
 80a2732:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a2734:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2738:	f7fe bfcc 	b.w	80a16d4 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a273c:	4628      	mov	r0, r5
 80a273e:	bd70      	pop	{r4, r5, r6, pc}

080a2740 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2740:	b510      	push	{r4, lr}
 80a2742:	4604      	mov	r4, r0
 80a2744:	4608      	mov	r0, r1
 80a2746:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2748:	2200      	movs	r2, #0
 80a274a:	6062      	str	r2, [r4, #4]
 80a274c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2750:	60a2      	str	r2, [r4, #8]
 80a2752:	4a05      	ldr	r2, [pc, #20]	; (80a2768 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a2754:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2756:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a2758:	2201      	movs	r2, #1
 80a275a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a275c:	461a      	mov	r2, r3
 80a275e:	f7fe ffb1 	bl	80a16c4 <HAL_USART_Init>
}
 80a2762:	4620      	mov	r0, r4
 80a2764:	bd10      	pop	{r4, pc}
 80a2766:	bf00      	nop
 80a2768:	080a6cf0 	.word	0x080a6cf0

080a276c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a276c:	7c00      	ldrb	r0, [r0, #16]
 80a276e:	f7fe bfd9 	b.w	80a1724 <HAL_USART_Is_Enabled>
	...

080a2774 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a2774:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a2776:	4d0c      	ldr	r5, [pc, #48]	; (80a27a8 <_Z22__fetch_global_Serial1v+0x34>)
 80a2778:	6829      	ldr	r1, [r5, #0]
 80a277a:	f011 0401 	ands.w	r4, r1, #1
 80a277e:	d111      	bne.n	80a27a4 <_Z22__fetch_global_Serial1v+0x30>
 80a2780:	4628      	mov	r0, r5
 80a2782:	f7fd fc8e 	bl	80a00a2 <__cxa_guard_acquire>
 80a2786:	b168      	cbz	r0, 80a27a4 <_Z22__fetch_global_Serial1v+0x30>
 80a2788:	4a08      	ldr	r2, [pc, #32]	; (80a27ac <_Z22__fetch_global_Serial1v+0x38>)
 80a278a:	4621      	mov	r1, r4
 80a278c:	4b08      	ldr	r3, [pc, #32]	; (80a27b0 <_Z22__fetch_global_Serial1v+0x3c>)
 80a278e:	4809      	ldr	r0, [pc, #36]	; (80a27b4 <_Z22__fetch_global_Serial1v+0x40>)
 80a2790:	f7ff ffd6 	bl	80a2740 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a2794:	4628      	mov	r0, r5
 80a2796:	f7fd fc89 	bl	80a00ac <__cxa_guard_release>
 80a279a:	4a07      	ldr	r2, [pc, #28]	; (80a27b8 <_Z22__fetch_global_Serial1v+0x44>)
 80a279c:	4907      	ldr	r1, [pc, #28]	; (80a27bc <_Z22__fetch_global_Serial1v+0x48>)
 80a279e:	4805      	ldr	r0, [pc, #20]	; (80a27b4 <_Z22__fetch_global_Serial1v+0x40>)
 80a27a0:	f000 fb2e 	bl	80a2e00 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a27a4:	4803      	ldr	r0, [pc, #12]	; (80a27b4 <_Z22__fetch_global_Serial1v+0x40>)
 80a27a6:	bd38      	pop	{r3, r4, r5, pc}
 80a27a8:	20000614 	.word	0x20000614
 80a27ac:	20000618 	.word	0x20000618
 80a27b0:	20000590 	.word	0x20000590
 80a27b4:	2000057c 	.word	0x2000057c
 80a27b8:	20000460 	.word	0x20000460
 80a27bc:	080a26ed 	.word	0x080a26ed

080a27c0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a27c0:	7441      	strb	r1, [r0, #17]
 80a27c2:	4770      	bx	lr

080a27c4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a27c4:	4770      	bx	lr

080a27c6 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a27c6:	2100      	movs	r1, #0
 80a27c8:	7c00      	ldrb	r0, [r0, #16]
 80a27ca:	f7fe bfd3 	b.w	80a1774 <HAL_USB_USART_Receive_Data>

080a27ce <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a27ce:	2101      	movs	r1, #1
 80a27d0:	7c00      	ldrb	r0, [r0, #16]
 80a27d2:	f7fe bfcf 	b.w	80a1774 <HAL_USB_USART_Receive_Data>

080a27d6 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a27d6:	7c00      	ldrb	r0, [r0, #16]
 80a27d8:	f7fe bfc4 	b.w	80a1764 <HAL_USB_USART_Available_Data_For_Write>

080a27dc <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a27dc:	7c00      	ldrb	r0, [r0, #16]
 80a27de:	f7fe bfb9 	b.w	80a1754 <HAL_USB_USART_Available_Data>

080a27e2 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a27e2:	b538      	push	{r3, r4, r5, lr}
 80a27e4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a27e6:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a27e8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a27ea:	f7fe ffbb 	bl	80a1764 <HAL_USB_USART_Available_Data_For_Write>
 80a27ee:	2800      	cmp	r0, #0
 80a27f0:	dc01      	bgt.n	80a27f6 <_ZN9USBSerial5writeEh+0x14>
 80a27f2:	7c60      	ldrb	r0, [r4, #17]
 80a27f4:	b120      	cbz	r0, 80a2800 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a27f6:	4629      	mov	r1, r5
 80a27f8:	7c20      	ldrb	r0, [r4, #16]
 80a27fa:	f7fe ffc3 	bl	80a1784 <HAL_USB_USART_Send_Data>
    return 1;
 80a27fe:	2001      	movs	r0, #1
  }
  return 0;
}
 80a2800:	bd38      	pop	{r3, r4, r5, pc}

080a2802 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a2802:	7c00      	ldrb	r0, [r0, #16]
 80a2804:	f7fe bfc6 	b.w	80a1794 <HAL_USB_USART_Flush_Data>

080a2808 <_ZN9USBSerialD0Ev>:
 80a2808:	b510      	push	{r4, lr}
 80a280a:	4604      	mov	r4, r0
 80a280c:	f7fd fc47 	bl	80a009e <_ZdlPv>
 80a2810:	4620      	mov	r0, r4
 80a2812:	bd10      	pop	{r4, pc}

080a2814 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2814:	b510      	push	{r4, lr}
 80a2816:	4604      	mov	r4, r0
 80a2818:	2300      	movs	r3, #0
 80a281a:	6063      	str	r3, [r4, #4]
 80a281c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2820:	60a3      	str	r3, [r4, #8]
 80a2822:	4b05      	ldr	r3, [pc, #20]	; (80a2838 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a2824:	4608      	mov	r0, r1
 80a2826:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a2828:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a282a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a282c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a282e:	4611      	mov	r1, r2
 80a2830:	f7fe ff88 	bl	80a1744 <HAL_USB_USART_Init>
}
 80a2834:	4620      	mov	r0, r4
 80a2836:	bd10      	pop	{r4, pc}
 80a2838:	080a6d20 	.word	0x080a6d20

080a283c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a283c:	b510      	push	{r4, lr}
 80a283e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2840:	2214      	movs	r2, #20
 80a2842:	2100      	movs	r1, #0
 80a2844:	f001 fd7b 	bl	80a433e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2848:	4b05      	ldr	r3, [pc, #20]	; (80a2860 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a284a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a284c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a284e:	4b05      	ldr	r3, [pc, #20]	; (80a2864 <_Z19acquireSerialBufferv+0x28>)
 80a2850:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2852:	f240 1301 	movw	r3, #257	; 0x101
 80a2856:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2858:	2381      	movs	r3, #129	; 0x81
 80a285a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a285c:	bd10      	pop	{r4, pc}
 80a285e:	bf00      	nop
 80a2860:	20000721 	.word	0x20000721
 80a2864:	200006a0 	.word	0x200006a0

080a2868 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a2868:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a286a:	4d0e      	ldr	r5, [pc, #56]	; (80a28a4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a286c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a286e:	a801      	add	r0, sp, #4
 80a2870:	f7ff ffe4 	bl	80a283c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2874:	6829      	ldr	r1, [r5, #0]
 80a2876:	f011 0401 	ands.w	r4, r1, #1
 80a287a:	d110      	bne.n	80a289e <_Z16_fetch_usbserialv+0x36>
 80a287c:	4628      	mov	r0, r5
 80a287e:	f7fd fc10 	bl	80a00a2 <__cxa_guard_acquire>
 80a2882:	b160      	cbz	r0, 80a289e <_Z16_fetch_usbserialv+0x36>
 80a2884:	aa01      	add	r2, sp, #4
 80a2886:	4621      	mov	r1, r4
 80a2888:	4807      	ldr	r0, [pc, #28]	; (80a28a8 <_Z16_fetch_usbserialv+0x40>)
 80a288a:	f7ff ffc3 	bl	80a2814 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a288e:	4628      	mov	r0, r5
 80a2890:	f7fd fc0c 	bl	80a00ac <__cxa_guard_release>
 80a2894:	4a05      	ldr	r2, [pc, #20]	; (80a28ac <_Z16_fetch_usbserialv+0x44>)
 80a2896:	4906      	ldr	r1, [pc, #24]	; (80a28b0 <_Z16_fetch_usbserialv+0x48>)
 80a2898:	4803      	ldr	r0, [pc, #12]	; (80a28a8 <_Z16_fetch_usbserialv+0x40>)
 80a289a:	f000 fab1 	bl	80a2e00 <__aeabi_atexit>
	return _usbserial;
}
 80a289e:	4802      	ldr	r0, [pc, #8]	; (80a28a8 <_Z16_fetch_usbserialv+0x40>)
 80a28a0:	b007      	add	sp, #28
 80a28a2:	bd30      	pop	{r4, r5, pc}
 80a28a4:	2000069c 	.word	0x2000069c
 80a28a8:	20000824 	.word	0x20000824
 80a28ac:	20000460 	.word	0x20000460
 80a28b0:	080a27c5 	.word	0x080a27c5

080a28b4 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a28b4:	b510      	push	{r4, lr}
 80a28b6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a28b8:	2214      	movs	r2, #20
 80a28ba:	2100      	movs	r1, #0
 80a28bc:	f001 fd3f 	bl	80a433e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a28c0:	4b05      	ldr	r3, [pc, #20]	; (80a28d8 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a28c2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a28c4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a28c6:	4b05      	ldr	r3, [pc, #20]	; (80a28dc <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a28c8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a28ca:	f240 1301 	movw	r3, #257	; 0x101
 80a28ce:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a28d0:	2381      	movs	r3, #129	; 0x81
 80a28d2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a28d4:	bd10      	pop	{r4, pc}
 80a28d6:	bf00      	nop
 80a28d8:	200008d4 	.word	0x200008d4
 80a28dc:	2000083c 	.word	0x2000083c

080a28e0 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a28e0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a28e2:	4c0e      	ldr	r4, [pc, #56]	; (80a291c <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a28e4:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a28e6:	a801      	add	r0, sp, #4
 80a28e8:	f7ff ffe4 	bl	80a28b4 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a28ec:	6823      	ldr	r3, [r4, #0]
 80a28ee:	07db      	lsls	r3, r3, #31
 80a28f0:	d410      	bmi.n	80a2914 <_Z17_fetch_usbserial1v+0x34>
 80a28f2:	4620      	mov	r0, r4
 80a28f4:	f7fd fbd5 	bl	80a00a2 <__cxa_guard_acquire>
 80a28f8:	b160      	cbz	r0, 80a2914 <_Z17_fetch_usbserial1v+0x34>
 80a28fa:	aa01      	add	r2, sp, #4
 80a28fc:	2101      	movs	r1, #1
 80a28fe:	4808      	ldr	r0, [pc, #32]	; (80a2920 <_Z17_fetch_usbserial1v+0x40>)
 80a2900:	f7ff ff88 	bl	80a2814 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2904:	4620      	mov	r0, r4
 80a2906:	f7fd fbd1 	bl	80a00ac <__cxa_guard_release>
 80a290a:	4a06      	ldr	r2, [pc, #24]	; (80a2924 <_Z17_fetch_usbserial1v+0x44>)
 80a290c:	4906      	ldr	r1, [pc, #24]	; (80a2928 <_Z17_fetch_usbserial1v+0x48>)
 80a290e:	4804      	ldr	r0, [pc, #16]	; (80a2920 <_Z17_fetch_usbserial1v+0x40>)
 80a2910:	f000 fa76 	bl	80a2e00 <__aeabi_atexit>
  return _usbserial1;
}
 80a2914:	4802      	ldr	r0, [pc, #8]	; (80a2920 <_Z17_fetch_usbserial1v+0x40>)
 80a2916:	b006      	add	sp, #24
 80a2918:	bd10      	pop	{r4, pc}
 80a291a:	bf00      	nop
 80a291c:	20000838 	.word	0x20000838
 80a2920:	200008c0 	.word	0x200008c0
 80a2924:	20000460 	.word	0x20000460
 80a2928:	080a27c5 	.word	0x080a27c5

080a292c <_ZN10WiFiSignalD1Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
 80a292c:	4770      	bx	lr

080a292e <_ZNK10WiFiSignal19getAccessTechnologyEv>:
    return true;
}

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}
 80a292e:	2001      	movs	r0, #1
 80a2930:	4770      	bx	lr
	...

080a2934 <_ZNK10WiFiSignal16getStrengthValueEv>:
        return inf_.strength / 65535.0f * 100.0f;
    }
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
 80a2934:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
 80a2936:	8983      	ldrh	r3, [r0, #12]
 80a2938:	b11b      	cbz	r3, 80a2942 <_ZNK10WiFiSignal16getStrengthValueEv+0xe>
 80a293a:	6900      	ldr	r0, [r0, #16]
 80a293c:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80a2940:	d101      	bne.n	80a2946 <_ZNK10WiFiSignal16getStrengthValueEv+0x12>
        return inf_.rssi / 100.0f;
    }
    return 0.0f;
 80a2942:	2000      	movs	r0, #0
 80a2944:	bd08      	pop	{r3, pc}
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
        return inf_.rssi / 100.0f;
 80a2946:	f001 f965 	bl	80a3c14 <__aeabi_i2f>
 80a294a:	4902      	ldr	r1, [pc, #8]	; (80a2954 <_ZNK10WiFiSignal16getStrengthValueEv+0x20>)
 80a294c:	f001 fa6a 	bl	80a3e24 <__aeabi_fdiv>
    }
    return 0.0f;
}
 80a2950:	bd08      	pop	{r3, pc}
 80a2952:	bf00      	nop
 80a2954:	42c80000 	.word	0x42c80000

080a2958 <_ZNK10WiFiSignal15getQualityValueEv>:
        return inf_.quality / 65535.0f * 100.0f;
    }
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
 80a2958:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
 80a295a:	8983      	ldrh	r3, [r0, #12]
 80a295c:	b11b      	cbz	r3, 80a2966 <_ZNK10WiFiSignal15getQualityValueEv+0xe>
 80a295e:	6980      	ldr	r0, [r0, #24]
 80a2960:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80a2964:	d101      	bne.n	80a296a <_ZNK10WiFiSignal15getQualityValueEv+0x12>
        return inf_.snr / 100.0f;
    }
    return 0.0f;
 80a2966:	2000      	movs	r0, #0
 80a2968:	bd08      	pop	{r3, pc}
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
        return inf_.snr / 100.0f;
 80a296a:	f001 f953 	bl	80a3c14 <__aeabi_i2f>
 80a296e:	4902      	ldr	r1, [pc, #8]	; (80a2978 <_ZNK10WiFiSignal15getQualityValueEv+0x20>)
 80a2970:	f001 fa58 	bl	80a3e24 <__aeabi_fdiv>
    }
    return 0.0f;
}
 80a2974:	bd08      	pop	{r3, pc}
 80a2976:	bf00      	nop
 80a2978:	42c80000 	.word	0x42c80000

080a297c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a297c:	2200      	movs	r2, #0
 80a297e:	4611      	mov	r1, r2
 80a2980:	6840      	ldr	r0, [r0, #4]
 80a2982:	f7fe bfd3 	b.w	80a192c <network_ready>

080a2986 <_ZN10WiFiSignalD0Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
 80a2986:	b510      	push	{r4, lr}
 80a2988:	4604      	mov	r4, r0
 80a298a:	f7fd fb88 	bl	80a009e <_ZdlPv>
 80a298e:	4620      	mov	r0, r4
 80a2990:	bd10      	pop	{r4, pc}

080a2992 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2992:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2994:	4616      	mov	r6, r2
 80a2996:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2998:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a299a:	460f      	mov	r7, r1
 80a299c:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a299e:	2100      	movs	r1, #0
 80a29a0:	a803      	add	r0, sp, #12
 80a29a2:	f001 fccc 	bl	80a433e <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a29a6:	4630      	mov	r0, r6
 80a29a8:	f001 fd27 	bl	80a43fa <strlen>
 80a29ac:	2500      	movs	r5, #0
 80a29ae:	9500      	str	r5, [sp, #0]
 80a29b0:	b281      	uxth	r1, r0
 80a29b2:	687b      	ldr	r3, [r7, #4]
 80a29b4:	aa03      	add	r2, sp, #12
 80a29b6:	4630      	mov	r0, r6
 80a29b8:	f7fe fef4 	bl	80a17a4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a29bc:	b120      	cbz	r0, 80a29c8 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a29be:	4629      	mov	r1, r5
 80a29c0:	4620      	mov	r0, r4
 80a29c2:	f7ff fbf1 	bl	80a21a8 <_ZN9IPAddressC1Em>
 80a29c6:	e003      	b.n	80a29d0 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a29c8:	a903      	add	r1, sp, #12
 80a29ca:	4620      	mov	r0, r4
 80a29cc:	f7ff fbda 	bl	80a2184 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a29d0:	4620      	mov	r0, r4
 80a29d2:	b009      	add	sp, #36	; 0x24
 80a29d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a29d6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a29d6:	2200      	movs	r2, #0
 80a29d8:	4611      	mov	r1, r2
 80a29da:	6840      	ldr	r0, [r0, #4]
 80a29dc:	f7fe bfc6 	b.w	80a196c <network_listening>

080a29e0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a29e0:	2200      	movs	r2, #0
 80a29e2:	4611      	mov	r1, r2
 80a29e4:	6840      	ldr	r0, [r0, #4]
 80a29e6:	f7fe bfd1 	b.w	80a198c <network_get_listen_timeout>

080a29ea <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a29ea:	2200      	movs	r2, #0
 80a29ec:	6840      	ldr	r0, [r0, #4]
 80a29ee:	f7fe bfc5 	b.w	80a197c <network_set_listen_timeout>

080a29f2 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a29f2:	2200      	movs	r2, #0
 80a29f4:	f081 0101 	eor.w	r1, r1, #1
 80a29f8:	6840      	ldr	r0, [r0, #4]
 80a29fa:	f7fe bfaf 	b.w	80a195c <network_listen>

080a29fe <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a29fe:	2300      	movs	r3, #0
 80a2a00:	461a      	mov	r2, r3
 80a2a02:	4619      	mov	r1, r3
 80a2a04:	6840      	ldr	r0, [r0, #4]
 80a2a06:	f7fe bfa1 	b.w	80a194c <network_off>

080a2a0a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a2a0a:	2300      	movs	r3, #0
 80a2a0c:	461a      	mov	r2, r3
 80a2a0e:	4619      	mov	r1, r3
 80a2a10:	6840      	ldr	r0, [r0, #4]
 80a2a12:	f7fe bf93 	b.w	80a193c <network_on>

080a2a16 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a2a16:	2200      	movs	r2, #0
 80a2a18:	4611      	mov	r1, r2
 80a2a1a:	6840      	ldr	r0, [r0, #4]
 80a2a1c:	f7fe bf76 	b.w	80a190c <network_connecting>

080a2a20 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a2a20:	2200      	movs	r2, #0
 80a2a22:	2102      	movs	r1, #2
 80a2a24:	6840      	ldr	r0, [r0, #4]
 80a2a26:	f7fe bf79 	b.w	80a191c <network_disconnect>

080a2a2a <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a2a2a:	2300      	movs	r3, #0
 80a2a2c:	461a      	mov	r2, r3
 80a2a2e:	6840      	ldr	r0, [r0, #4]
 80a2a30:	f7fe bf64 	b.w	80a18fc <network_connect>

080a2a34 <_ZNK10WiFiSignal10getQualityEv>:
        return inf_.rssi / 100.0f;
    }
    return 0.0f;
}

float WiFiSignal::getQuality() const {
 80a2a34:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.quality >= 0) {
 80a2a36:	8983      	ldrh	r3, [r0, #12]
 80a2a38:	b15b      	cbz	r3, 80a2a52 <_ZNK10WiFiSignal10getQualityEv+0x1e>
 80a2a3a:	6a00      	ldr	r0, [r0, #32]
 80a2a3c:	2800      	cmp	r0, #0
 80a2a3e:	db08      	blt.n	80a2a52 <_ZNK10WiFiSignal10getQualityEv+0x1e>
        return inf_.quality / 65535.0f * 100.0f;
 80a2a40:	f001 f8e8 	bl	80a3c14 <__aeabi_i2f>
 80a2a44:	4904      	ldr	r1, [pc, #16]	; (80a2a58 <_ZNK10WiFiSignal10getQualityEv+0x24>)
 80a2a46:	f001 f9ed 	bl	80a3e24 <__aeabi_fdiv>
 80a2a4a:	4904      	ldr	r1, [pc, #16]	; (80a2a5c <_ZNK10WiFiSignal10getQualityEv+0x28>)
 80a2a4c:	f001 f936 	bl	80a3cbc <__aeabi_fmul>
 80a2a50:	bd08      	pop	{r3, pc}
    }
    return -1.0f;
 80a2a52:	4803      	ldr	r0, [pc, #12]	; (80a2a60 <_ZNK10WiFiSignal10getQualityEv+0x2c>)
}
 80a2a54:	bd08      	pop	{r3, pc}
 80a2a56:	bf00      	nop
 80a2a58:	477fff00 	.word	0x477fff00
 80a2a5c:	42c80000 	.word	0x42c80000
 80a2a60:	bf800000 	.word	0xbf800000

080a2a64 <_ZNK10WiFiSignal11getStrengthEv>:

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}

float WiFiSignal::getStrength() const {
 80a2a64:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.strength >= 0) {
 80a2a66:	8983      	ldrh	r3, [r0, #12]
 80a2a68:	b15b      	cbz	r3, 80a2a82 <_ZNK10WiFiSignal11getStrengthEv+0x1e>
 80a2a6a:	6940      	ldr	r0, [r0, #20]
 80a2a6c:	2800      	cmp	r0, #0
 80a2a6e:	db08      	blt.n	80a2a82 <_ZNK10WiFiSignal11getStrengthEv+0x1e>
        return inf_.strength / 65535.0f * 100.0f;
 80a2a70:	f001 f8d0 	bl	80a3c14 <__aeabi_i2f>
 80a2a74:	4904      	ldr	r1, [pc, #16]	; (80a2a88 <_ZNK10WiFiSignal11getStrengthEv+0x24>)
 80a2a76:	f001 f9d5 	bl	80a3e24 <__aeabi_fdiv>
 80a2a7a:	4904      	ldr	r1, [pc, #16]	; (80a2a8c <_ZNK10WiFiSignal11getStrengthEv+0x28>)
 80a2a7c:	f001 f91e 	bl	80a3cbc <__aeabi_fmul>
 80a2a80:	bd08      	pop	{r3, pc}
    }
    return -1.0f;
 80a2a82:	4803      	ldr	r0, [pc, #12]	; (80a2a90 <_ZNK10WiFiSignal11getStrengthEv+0x2c>)
}
 80a2a84:	bd08      	pop	{r3, pc}
 80a2a86:	bf00      	nop
 80a2a88:	477fff00 	.word	0x477fff00
 80a2a8c:	42c80000 	.word	0x42c80000
 80a2a90:	bf800000 	.word	0xbf800000

080a2a94 <_ZNK10WiFiSignalcvaEv>:
    : inf_(inf) {
}

WiFiSignal::operator int8_t() const {
    return this->rssi;
}
 80a2a94:	f990 0004 	ldrsb.w	r0, [r0, #4]
 80a2a98:	4770      	bx	lr

080a2a9a <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>:

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
 80a2a9a:	b570      	push	{r4, r5, r6, lr}
    inf_ = inf;
 80a2a9c:	460d      	mov	r5, r1

WiFiSignal::operator int8_t() const {
    return this->rssi;
}

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
 80a2a9e:	4606      	mov	r6, r0
    inf_ = inf;
 80a2aa0:	f100 040c 	add.w	r4, r0, #12
 80a2aa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a2aa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a2aa8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80a2aac:	e884 0003 	stmia.w	r4, {r0, r1}
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
 80a2ab0:	6933      	ldr	r3, [r6, #16]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
    return true;
}
 80a2ab2:	2001      	movs	r0, #1
    return this->rssi;
}

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
    inf_ = inf;
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
 80a2ab4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a2ab8:	bf1a      	itte	ne
 80a2aba:	2264      	movne	r2, #100	; 0x64
 80a2abc:	fb93 f3f2 	sdivne	r3, r3, r2
 80a2ac0:	2302      	moveq	r3, #2
 80a2ac2:	6073      	str	r3, [r6, #4]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
 80a2ac4:	69b3      	ldr	r3, [r6, #24]
 80a2ac6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a2aca:	bf1a      	itte	ne
 80a2acc:	2264      	movne	r2, #100	; 0x64
 80a2ace:	fb93 f3f2 	sdivne	r3, r3, r2
 80a2ad2:	2300      	moveq	r3, #0
 80a2ad4:	60b3      	str	r3, [r6, #8]
    return true;
}
 80a2ad6:	bd70      	pop	{r4, r5, r6, pc}

080a2ad8 <_ZN5spark9WiFiClass4RSSIEv>:
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
        APList apList(results, result_count);
        return apList.start();
    }

    WiFiSignal WiFiClass::RSSI() {
 80a2ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2adc:	4688      	mov	r8, r1
public:
    // In order to be compatible with CellularSignal
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
 80a2ade:	4b16      	ldr	r3, [pc, #88]	; (80a2b38 <_ZN5spark9WiFiClass4RSSIEv+0x60>)
 80a2ae0:	2500      	movs	r5, #0
 80a2ae2:	2702      	movs	r7, #2
 80a2ae4:	2618      	movs	r6, #24
 80a2ae6:	b086      	sub	sp, #24
 80a2ae8:	6003      	str	r3, [r0, #0]
 80a2aea:	6047      	str	r7, [r0, #4]
 80a2aec:	6085      	str	r5, [r0, #8]
 80a2aee:	4632      	mov	r2, r6
 80a2af0:	4629      	mov	r1, r5
 80a2af2:	4604      	mov	r4, r0
 80a2af4:	300c      	adds	r0, #12
 80a2af6:	f001 fc22 	bl	80a433e <memset>
        WiFiSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 80a2afa:	462a      	mov	r2, r5
 80a2afc:	4629      	mov	r1, r5
 80a2afe:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80a2b02:	f7fe ff13 	bl	80a192c <network_ready>
 80a2b06:	b190      	cbz	r0, 80a2b2e <_ZN5spark9WiFiClass4RSSIEv+0x56>
            return sig;
        }

        wlan_connected_info_t info = {0};
 80a2b08:	4632      	mov	r2, r6
 80a2b0a:	4629      	mov	r1, r5
 80a2b0c:	4668      	mov	r0, sp
 80a2b0e:	f001 fc16 	bl	80a433e <memset>
        info.size = sizeof(info);
        int r = wlan_connected_info(nullptr, &info, nullptr);
 80a2b12:	462a      	mov	r2, r5
 80a2b14:	4669      	mov	r1, sp
 80a2b16:	4628      	mov	r0, r5
        if (!network_ready(*this, 0, NULL)) {
            return sig;
        }

        wlan_connected_info_t info = {0};
        info.size = sizeof(info);
 80a2b18:	f8ad 6000 	strh.w	r6, [sp]
        int r = wlan_connected_info(nullptr, &info, nullptr);
 80a2b1c:	f7fe fe52 	bl	80a17c4 <wlan_connected_info>
        if (r == 0) {
 80a2b20:	b920      	cbnz	r0, 80a2b2c <_ZN5spark9WiFiClass4RSSIEv+0x54>
            sig.fromConnectedInfo(info);
 80a2b22:	4669      	mov	r1, sp
 80a2b24:	4620      	mov	r0, r4
 80a2b26:	f7ff ffb8 	bl	80a2a9a <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>
            return sig;
 80a2b2a:	e000      	b.n	80a2b2e <_ZN5spark9WiFiClass4RSSIEv+0x56>
        }

        sig.rssi = 2;
 80a2b2c:	6067      	str	r7, [r4, #4]
        return sig;
    }
 80a2b2e:	4620      	mov	r0, r4
 80a2b30:	b006      	add	sp, #24
 80a2b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2b36:	bf00      	nop
 80a2b38:	080a6d84 	.word	0x080a6d84

080a2b3c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a2b3c:	4b02      	ldr	r3, [pc, #8]	; (80a2b48 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a2b3e:	2204      	movs	r2, #4
 80a2b40:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a2b42:	4a02      	ldr	r2, [pc, #8]	; (80a2b4c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2b44:	601a      	str	r2, [r3, #0]
 80a2b46:	4770      	bx	lr
 80a2b48:	200009d8 	.word	0x200009d8
 80a2b4c:	080a6d50 	.word	0x080a6d50

080a2b50 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a2b50:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2b52:	4b14      	ldr	r3, [pc, #80]	; (80a2ba4 <serialEventRun+0x54>)
 80a2b54:	b133      	cbz	r3, 80a2b64 <serialEventRun+0x14>
 80a2b56:	f7ff fe87 	bl	80a2868 <_Z16_fetch_usbserialv>
 80a2b5a:	6803      	ldr	r3, [r0, #0]
 80a2b5c:	691b      	ldr	r3, [r3, #16]
 80a2b5e:	4798      	blx	r3
 80a2b60:	2800      	cmp	r0, #0
 80a2b62:	dc16      	bgt.n	80a2b92 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a2b64:	4b10      	ldr	r3, [pc, #64]	; (80a2ba8 <serialEventRun+0x58>)
 80a2b66:	b133      	cbz	r3, 80a2b76 <serialEventRun+0x26>
 80a2b68:	f7ff fe04 	bl	80a2774 <_Z22__fetch_global_Serial1v>
 80a2b6c:	6803      	ldr	r3, [r0, #0]
 80a2b6e:	691b      	ldr	r3, [r3, #16]
 80a2b70:	4798      	blx	r3
 80a2b72:	2800      	cmp	r0, #0
 80a2b74:	dc10      	bgt.n	80a2b98 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a2b76:	4b0d      	ldr	r3, [pc, #52]	; (80a2bac <serialEventRun+0x5c>)
 80a2b78:	b10b      	cbz	r3, 80a2b7e <serialEventRun+0x2e>
 80a2b7a:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2b7e:	4b0c      	ldr	r3, [pc, #48]	; (80a2bb0 <serialEventRun+0x60>)
 80a2b80:	b17b      	cbz	r3, 80a2ba2 <serialEventRun+0x52>
 80a2b82:	f7ff fead 	bl	80a28e0 <_Z17_fetch_usbserial1v>
 80a2b86:	6803      	ldr	r3, [r0, #0]
 80a2b88:	691b      	ldr	r3, [r3, #16]
 80a2b8a:	4798      	blx	r3
 80a2b8c:	2800      	cmp	r0, #0
 80a2b8e:	dc06      	bgt.n	80a2b9e <serialEventRun+0x4e>
 80a2b90:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a2b92:	f3af 8000 	nop.w
 80a2b96:	e7e5      	b.n	80a2b64 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a2b98:	f3af 8000 	nop.w
 80a2b9c:	e7eb      	b.n	80a2b76 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a2b9e:	f3af 8000 	nop.w
 80a2ba2:	bd08      	pop	{r3, pc}
	...

080a2bb4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a2bb4:	b508      	push	{r3, lr}
	serialEventRun();
 80a2bb6:	f7ff ffcb 	bl	80a2b50 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a2bba:	f7fe fca9 	bl	80a1510 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a2bbe:	4b01      	ldr	r3, [pc, #4]	; (80a2bc4 <_post_loop+0x10>)
 80a2bc0:	6018      	str	r0, [r3, #0]
 80a2bc2:	bd08      	pop	{r3, pc}
 80a2bc4:	200009e8 	.word	0x200009e8

080a2bc8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2bc8:	4802      	ldr	r0, [pc, #8]	; (80a2bd4 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a2bca:	4a03      	ldr	r2, [pc, #12]	; (80a2bd8 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a2bcc:	4903      	ldr	r1, [pc, #12]	; (80a2bdc <_Z33system_initialize_user_backup_ramv+0x14>)
 80a2bce:	1a12      	subs	r2, r2, r0
 80a2bd0:	f001 bbaa 	b.w	80a4328 <memcpy>
 80a2bd4:	40024000 	.word	0x40024000
 80a2bd8:	40024004 	.word	0x40024004
 80a2bdc:	080a71a0 	.word	0x080a71a0

080a2be0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2be0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2be2:	2300      	movs	r3, #0
 80a2be4:	9300      	str	r3, [sp, #0]
 80a2be6:	461a      	mov	r2, r3
 80a2be8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2bec:	f7fe fe34 	bl	80a1858 <system_ctrl_set_result>
}
 80a2bf0:	b003      	add	sp, #12
 80a2bf2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2bf8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a2bf8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2bfa:	8843      	ldrh	r3, [r0, #2]
 80a2bfc:	2b0a      	cmp	r3, #10
 80a2bfe:	d008      	beq.n	80a2c12 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2c00:	2b50      	cmp	r3, #80	; 0x50
 80a2c02:	d109      	bne.n	80a2c18 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a2c04:	4b09      	ldr	r3, [pc, #36]	; (80a2c2c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2c06:	681b      	ldr	r3, [r3, #0]
 80a2c08:	b13b      	cbz	r3, 80a2c1a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a2c0a:	b003      	add	sp, #12
 80a2c0c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a2c10:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a2c12:	f7ff ffe5 	bl	80a2be0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a2c16:	e006      	b.n	80a2c26 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2c18:	2300      	movs	r3, #0
 80a2c1a:	9300      	str	r3, [sp, #0]
 80a2c1c:	461a      	mov	r2, r3
 80a2c1e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2c22:	f7fe fe19 	bl	80a1858 <system_ctrl_set_result>
        break;
    }
}
 80a2c26:	b003      	add	sp, #12
 80a2c28:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2c2c:	200009e0 	.word	0x200009e0

080a2c30 <module_user_init_hook>:

void module_user_init_hook()
{
 80a2c30:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a2c32:	4c10      	ldr	r4, [pc, #64]	; (80a2c74 <module_user_init_hook+0x44>)
 80a2c34:	4d10      	ldr	r5, [pc, #64]	; (80a2c78 <module_user_init_hook+0x48>)
 80a2c36:	6823      	ldr	r3, [r4, #0]
 80a2c38:	42ab      	cmp	r3, r5
 80a2c3a:	4b10      	ldr	r3, [pc, #64]	; (80a2c7c <module_user_init_hook+0x4c>)
 80a2c3c:	bf0c      	ite	eq
 80a2c3e:	2201      	moveq	r2, #1
 80a2c40:	2200      	movne	r2, #0
 80a2c42:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2c44:	d002      	beq.n	80a2c4c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a2c46:	f7ff ffbf 	bl	80a2bc8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a2c4a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2c4c:	f7fe fc58 	bl	80a1500 <HAL_RNG_GetRandomNumber>
 80a2c50:	4604      	mov	r4, r0
    srand(seed);
 80a2c52:	f001 fb7d 	bl	80a4350 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2c56:	4b0a      	ldr	r3, [pc, #40]	; (80a2c80 <module_user_init_hook+0x50>)
 80a2c58:	b113      	cbz	r3, 80a2c60 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a2c5a:	4620      	mov	r0, r4
 80a2c5c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2c60:	2100      	movs	r1, #0
 80a2c62:	4807      	ldr	r0, [pc, #28]	; (80a2c80 <module_user_init_hook+0x50>)
 80a2c64:	f7fe fe42 	bl	80a18ec <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2c68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2c6c:	2100      	movs	r1, #0
 80a2c6e:	4805      	ldr	r0, [pc, #20]	; (80a2c84 <module_user_init_hook+0x54>)
 80a2c70:	f7fe bde8 	b.w	80a1844 <system_ctrl_set_app_request_handler>
 80a2c74:	40024000 	.word	0x40024000
 80a2c78:	9a271c1e 	.word	0x9a271c1e
 80a2c7c:	200009e4 	.word	0x200009e4
 80a2c80:	00000000 	.word	0x00000000
 80a2c84:	080a2bf9 	.word	0x080a2bf9

080a2c88 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a2c88:	b510      	push	{r4, lr}
 80a2c8a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a2c8c:	480f      	ldr	r0, [pc, #60]	; (80a2ccc <pinAvailable+0x44>)
 80a2c8e:	f7ff fba1 	bl	80a23d4 <_ZN8SPIClass9isEnabledEv>
 80a2c92:	b128      	cbz	r0, 80a2ca0 <pinAvailable+0x18>
 80a2c94:	f1a4 030d 	sub.w	r3, r4, #13
 80a2c98:	2b02      	cmp	r3, #2
 80a2c9a:	d801      	bhi.n	80a2ca0 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a2c9c:	2000      	movs	r0, #0
 80a2c9e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a2ca0:	f000 f854 	bl	80a2d4c <_Z19__fetch_global_Wirev>
 80a2ca4:	f7ff fa14 	bl	80a20d0 <_ZN7TwoWire9isEnabledEv>
 80a2ca8:	b108      	cbz	r0, 80a2cae <pinAvailable+0x26>
 80a2caa:	2c01      	cmp	r4, #1
 80a2cac:	d9f6      	bls.n	80a2c9c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a2cae:	f7ff fd61 	bl	80a2774 <_Z22__fetch_global_Serial1v>
 80a2cb2:	f7ff fd5b 	bl	80a276c <_ZN11USARTSerial9isEnabledEv>
 80a2cb6:	b118      	cbz	r0, 80a2cc0 <pinAvailable+0x38>
 80a2cb8:	f1a4 0312 	sub.w	r3, r4, #18
 80a2cbc:	2b01      	cmp	r3, #1
 80a2cbe:	d9ed      	bls.n	80a2c9c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a2cc0:	2c17      	cmp	r4, #23
 80a2cc2:	bf8c      	ite	hi
 80a2cc4:	2000      	movhi	r0, #0
 80a2cc6:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a2cc8:	bd10      	pop	{r4, pc}
 80a2cca:	bf00      	nop
 80a2ccc:	20000a24 	.word	0x20000a24

080a2cd0 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2cd0:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a2cd2:	b538      	push	{r3, r4, r5, lr}
 80a2cd4:	4604      	mov	r4, r0
 80a2cd6:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2cd8:	d80a      	bhi.n	80a2cf0 <pinMode+0x20>
 80a2cda:	29ff      	cmp	r1, #255	; 0xff
 80a2cdc:	d008      	beq.n	80a2cf0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a2cde:	f7ff ffd3 	bl	80a2c88 <pinAvailable>
 80a2ce2:	b128      	cbz	r0, 80a2cf0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2ce4:	4629      	mov	r1, r5
 80a2ce6:	4620      	mov	r0, r4
}
 80a2ce8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2cec:	f7fe bc58 	b.w	80a15a0 <HAL_Pin_Mode>
 80a2cf0:	bd38      	pop	{r3, r4, r5, pc}

080a2cf2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a2cf2:	b538      	push	{r3, r4, r5, lr}
 80a2cf4:	4604      	mov	r4, r0
 80a2cf6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2cf8:	f7fe fc5a 	bl	80a15b0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2cfc:	28ff      	cmp	r0, #255	; 0xff
 80a2cfe:	d010      	beq.n	80a2d22 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a2d00:	2806      	cmp	r0, #6
 80a2d02:	d804      	bhi.n	80a2d0e <digitalWrite+0x1c>
 80a2d04:	234d      	movs	r3, #77	; 0x4d
 80a2d06:	fa23 f000 	lsr.w	r0, r3, r0
 80a2d0a:	07c3      	lsls	r3, r0, #31
 80a2d0c:	d409      	bmi.n	80a2d22 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2d0e:	4620      	mov	r0, r4
 80a2d10:	f7ff ffba 	bl	80a2c88 <pinAvailable>
 80a2d14:	b128      	cbz	r0, 80a2d22 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2d16:	4629      	mov	r1, r5
 80a2d18:	4620      	mov	r0, r4
}
 80a2d1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2d1e:	f7fe bc4f 	b.w	80a15c0 <HAL_GPIO_Write>
 80a2d22:	bd38      	pop	{r3, r4, r5, pc}

080a2d24 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 80a2d24:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 80a2d26:	4c07      	ldr	r4, [pc, #28]	; (80a2d44 <_Z21__fetch_global_EEPROMv+0x20>)
 80a2d28:	6823      	ldr	r3, [r4, #0]
 80a2d2a:	07db      	lsls	r3, r3, #31
 80a2d2c:	d408      	bmi.n	80a2d40 <_Z21__fetch_global_EEPROMv+0x1c>
 80a2d2e:	4620      	mov	r0, r4
 80a2d30:	f7fd f9b7 	bl	80a00a2 <__cxa_guard_acquire>
 80a2d34:	b120      	cbz	r0, 80a2d40 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 80a2d36:	f7fe fbfb 	bl	80a1530 <HAL_EEPROM_Init>
 80a2d3a:	4620      	mov	r0, r4
 80a2d3c:	f7fd f9b6 	bl	80a00ac <__cxa_guard_release>
	return eeprom;
}
 80a2d40:	4801      	ldr	r0, [pc, #4]	; (80a2d48 <_Z21__fetch_global_EEPROMv+0x24>)
 80a2d42:	bd10      	pop	{r4, pc}
 80a2d44:	200009ec 	.word	0x200009ec
 80a2d48:	200009f0 	.word	0x200009f0

080a2d4c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a2d4c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a2d4e:	4d0b      	ldr	r5, [pc, #44]	; (80a2d7c <_Z19__fetch_global_Wirev+0x30>)
 80a2d50:	6829      	ldr	r1, [r5, #0]
 80a2d52:	f011 0401 	ands.w	r4, r1, #1
 80a2d56:	d10f      	bne.n	80a2d78 <_Z19__fetch_global_Wirev+0x2c>
 80a2d58:	4628      	mov	r0, r5
 80a2d5a:	f7fd f9a2 	bl	80a00a2 <__cxa_guard_acquire>
 80a2d5e:	b158      	cbz	r0, 80a2d78 <_Z19__fetch_global_Wirev+0x2c>
 80a2d60:	4621      	mov	r1, r4
 80a2d62:	4807      	ldr	r0, [pc, #28]	; (80a2d80 <_Z19__fetch_global_Wirev+0x34>)
 80a2d64:	f7ff f980 	bl	80a2068 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a2d68:	4628      	mov	r0, r5
 80a2d6a:	f7fd f99f 	bl	80a00ac <__cxa_guard_release>
 80a2d6e:	4a05      	ldr	r2, [pc, #20]	; (80a2d84 <_Z19__fetch_global_Wirev+0x38>)
 80a2d70:	4905      	ldr	r1, [pc, #20]	; (80a2d88 <_Z19__fetch_global_Wirev+0x3c>)
 80a2d72:	4803      	ldr	r0, [pc, #12]	; (80a2d80 <_Z19__fetch_global_Wirev+0x34>)
 80a2d74:	f000 f844 	bl	80a2e00 <__aeabi_atexit>
	return wire;
}
 80a2d78:	4801      	ldr	r0, [pc, #4]	; (80a2d80 <_Z19__fetch_global_Wirev+0x34>)
 80a2d7a:	bd38      	pop	{r3, r4, r5, pc}
 80a2d7c:	200009f4 	.word	0x200009f4
 80a2d80:	200009f8 	.word	0x200009f8
 80a2d84:	20000460 	.word	0x20000460
 80a2d88:	080a2011 	.word	0x080a2011

080a2d8c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2d8c:	b513      	push	{r0, r1, r4, lr}
 80a2d8e:	4c08      	ldr	r4, [pc, #32]	; (80a2db0 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a2d90:	2300      	movs	r3, #0
 80a2d92:	461a      	mov	r2, r3
 80a2d94:	4619      	mov	r1, r3
 80a2d96:	9300      	str	r3, [sp, #0]
 80a2d98:	4620      	mov	r0, r4
 80a2d9a:	f7ff fa1b 	bl	80a21d4 <_ZN9IPAddressC1Ehhhh>
 80a2d9e:	4620      	mov	r0, r4
 80a2da0:	4a04      	ldr	r2, [pc, #16]	; (80a2db4 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a2da2:	4905      	ldr	r1, [pc, #20]	; (80a2db8 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2da4:	b002      	add	sp, #8
 80a2da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a2daa:	f000 b829 	b.w	80a2e00 <__aeabi_atexit>
 80a2dae:	bf00      	nop
 80a2db0:	20000a0c 	.word	0x20000a0c
 80a2db4:	20000460 	.word	0x20000460
 80a2db8:	080a2129 	.word	0x080a2129

080a2dbc <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2dbc:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2dbe:	4c0c      	ldr	r4, [pc, #48]	; (80a2df0 <_GLOBAL__sub_I_SPI+0x34>)
 80a2dc0:	4e0c      	ldr	r6, [pc, #48]	; (80a2df4 <_GLOBAL__sub_I_SPI+0x38>)
 80a2dc2:	4d0d      	ldr	r5, [pc, #52]	; (80a2df8 <_GLOBAL__sub_I_SPI+0x3c>)
 80a2dc4:	2100      	movs	r1, #0
 80a2dc6:	4620      	mov	r0, r4
 80a2dc8:	f7ff faf0 	bl	80a23ac <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2dcc:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2dce:	4c0b      	ldr	r4, [pc, #44]	; (80a2dfc <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2dd0:	4632      	mov	r2, r6
 80a2dd2:	4629      	mov	r1, r5
 80a2dd4:	f000 f814 	bl	80a2e00 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2dd8:	2101      	movs	r1, #1
 80a2dda:	4620      	mov	r0, r4
 80a2ddc:	f7ff fae6 	bl	80a23ac <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2de0:	4632      	mov	r2, r6
 80a2de2:	4629      	mov	r1, r5
 80a2de4:	4620      	mov	r0, r4
 80a2de6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a2dea:	f000 b809 	b.w	80a2e00 <__aeabi_atexit>
 80a2dee:	bf00      	nop
 80a2df0:	20000a24 	.word	0x20000a24
 80a2df4:	20000460 	.word	0x20000460
 80a2df8:	080a239d 	.word	0x080a239d
 80a2dfc:	20000a34 	.word	0x20000a34

080a2e00 <__aeabi_atexit>:
 80a2e00:	460b      	mov	r3, r1
 80a2e02:	4601      	mov	r1, r0
 80a2e04:	4618      	mov	r0, r3
 80a2e06:	f001 b985 	b.w	80a4114 <__cxa_atexit>

080a2e0a <_ZSt25__throw_bad_function_callv>:
 80a2e0a:	b508      	push	{r3, lr}
 80a2e0c:	f7fe fdfe 	bl	80a1a0c <abort>

080a2e10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a2e10:	4b24      	ldr	r3, [pc, #144]	; (80a2ea4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a2e12:	681a      	ldr	r2, [r3, #0]
 80a2e14:	07d0      	lsls	r0, r2, #31
 80a2e16:	bf5c      	itt	pl
 80a2e18:	2201      	movpl	r2, #1
 80a2e1a:	601a      	strpl	r2, [r3, #0]
 80a2e1c:	4b22      	ldr	r3, [pc, #136]	; (80a2ea8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a2e1e:	681a      	ldr	r2, [r3, #0]
 80a2e20:	07d1      	lsls	r1, r2, #31
 80a2e22:	bf5c      	itt	pl
 80a2e24:	2201      	movpl	r2, #1
 80a2e26:	601a      	strpl	r2, [r3, #0]
 80a2e28:	4b20      	ldr	r3, [pc, #128]	; (80a2eac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a2e2a:	681a      	ldr	r2, [r3, #0]
 80a2e2c:	07d2      	lsls	r2, r2, #31
 80a2e2e:	bf5c      	itt	pl
 80a2e30:	2201      	movpl	r2, #1
 80a2e32:	601a      	strpl	r2, [r3, #0]
 80a2e34:	4b1e      	ldr	r3, [pc, #120]	; (80a2eb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a2e36:	681a      	ldr	r2, [r3, #0]
 80a2e38:	07d0      	lsls	r0, r2, #31
 80a2e3a:	bf5c      	itt	pl
 80a2e3c:	2201      	movpl	r2, #1
 80a2e3e:	601a      	strpl	r2, [r3, #0]
 80a2e40:	4b1c      	ldr	r3, [pc, #112]	; (80a2eb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a2e42:	681a      	ldr	r2, [r3, #0]
 80a2e44:	07d1      	lsls	r1, r2, #31
 80a2e46:	bf5c      	itt	pl
 80a2e48:	2201      	movpl	r2, #1
 80a2e4a:	601a      	strpl	r2, [r3, #0]
 80a2e4c:	4b1a      	ldr	r3, [pc, #104]	; (80a2eb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a2e4e:	681a      	ldr	r2, [r3, #0]
 80a2e50:	07d2      	lsls	r2, r2, #31
 80a2e52:	bf5c      	itt	pl
 80a2e54:	2201      	movpl	r2, #1
 80a2e56:	601a      	strpl	r2, [r3, #0]
 80a2e58:	4b18      	ldr	r3, [pc, #96]	; (80a2ebc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a2e5a:	681a      	ldr	r2, [r3, #0]
 80a2e5c:	07d0      	lsls	r0, r2, #31
 80a2e5e:	bf5c      	itt	pl
 80a2e60:	2201      	movpl	r2, #1
 80a2e62:	601a      	strpl	r2, [r3, #0]
 80a2e64:	4b16      	ldr	r3, [pc, #88]	; (80a2ec0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a2e66:	681a      	ldr	r2, [r3, #0]
 80a2e68:	07d1      	lsls	r1, r2, #31
 80a2e6a:	bf5c      	itt	pl
 80a2e6c:	2201      	movpl	r2, #1
 80a2e6e:	601a      	strpl	r2, [r3, #0]
 80a2e70:	4b14      	ldr	r3, [pc, #80]	; (80a2ec4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a2e72:	681a      	ldr	r2, [r3, #0]
 80a2e74:	07d2      	lsls	r2, r2, #31
 80a2e76:	bf5c      	itt	pl
 80a2e78:	2201      	movpl	r2, #1
 80a2e7a:	601a      	strpl	r2, [r3, #0]
 80a2e7c:	4b12      	ldr	r3, [pc, #72]	; (80a2ec8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a2e7e:	681a      	ldr	r2, [r3, #0]
 80a2e80:	07d0      	lsls	r0, r2, #31
 80a2e82:	bf5c      	itt	pl
 80a2e84:	2201      	movpl	r2, #1
 80a2e86:	601a      	strpl	r2, [r3, #0]
 80a2e88:	4b10      	ldr	r3, [pc, #64]	; (80a2ecc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a2e8a:	681a      	ldr	r2, [r3, #0]
 80a2e8c:	07d1      	lsls	r1, r2, #31
 80a2e8e:	bf5c      	itt	pl
 80a2e90:	2201      	movpl	r2, #1
 80a2e92:	601a      	strpl	r2, [r3, #0]
 80a2e94:	4b0e      	ldr	r3, [pc, #56]	; (80a2ed0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a2e96:	681a      	ldr	r2, [r3, #0]
 80a2e98:	07d2      	lsls	r2, r2, #31
 80a2e9a:	bf5c      	itt	pl
 80a2e9c:	2201      	movpl	r2, #1
 80a2e9e:	601a      	strpl	r2, [r3, #0]
 80a2ea0:	4770      	bx	lr
 80a2ea2:	bf00      	nop
 80a2ea4:	20000a70 	.word	0x20000a70
 80a2ea8:	20000a6c 	.word	0x20000a6c
 80a2eac:	20000a68 	.word	0x20000a68
 80a2eb0:	20000a64 	.word	0x20000a64
 80a2eb4:	20000a60 	.word	0x20000a60
 80a2eb8:	20000a5c 	.word	0x20000a5c
 80a2ebc:	20000a58 	.word	0x20000a58
 80a2ec0:	20000a54 	.word	0x20000a54
 80a2ec4:	20000a50 	.word	0x20000a50
 80a2ec8:	20000a4c 	.word	0x20000a4c
 80a2ecc:	20000a48 	.word	0x20000a48
 80a2ed0:	20000a44 	.word	0x20000a44

080a2ed4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2ed4:	4b18      	ldr	r3, [pc, #96]	; (80a2f38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2ed6:	681a      	ldr	r2, [r3, #0]
 80a2ed8:	07d1      	lsls	r1, r2, #31
 80a2eda:	bf5c      	itt	pl
 80a2edc:	2201      	movpl	r2, #1
 80a2ede:	601a      	strpl	r2, [r3, #0]
 80a2ee0:	4b16      	ldr	r3, [pc, #88]	; (80a2f3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2ee2:	681a      	ldr	r2, [r3, #0]
 80a2ee4:	07d2      	lsls	r2, r2, #31
 80a2ee6:	bf5c      	itt	pl
 80a2ee8:	2201      	movpl	r2, #1
 80a2eea:	601a      	strpl	r2, [r3, #0]
 80a2eec:	4b14      	ldr	r3, [pc, #80]	; (80a2f40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2eee:	681a      	ldr	r2, [r3, #0]
 80a2ef0:	07d0      	lsls	r0, r2, #31
 80a2ef2:	bf5c      	itt	pl
 80a2ef4:	2201      	movpl	r2, #1
 80a2ef6:	601a      	strpl	r2, [r3, #0]
 80a2ef8:	4b12      	ldr	r3, [pc, #72]	; (80a2f44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2efa:	681a      	ldr	r2, [r3, #0]
 80a2efc:	07d1      	lsls	r1, r2, #31
 80a2efe:	bf5c      	itt	pl
 80a2f00:	2201      	movpl	r2, #1
 80a2f02:	601a      	strpl	r2, [r3, #0]
 80a2f04:	4b10      	ldr	r3, [pc, #64]	; (80a2f48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2f06:	681a      	ldr	r2, [r3, #0]
 80a2f08:	07d2      	lsls	r2, r2, #31
 80a2f0a:	bf5c      	itt	pl
 80a2f0c:	2201      	movpl	r2, #1
 80a2f0e:	601a      	strpl	r2, [r3, #0]
 80a2f10:	4b0e      	ldr	r3, [pc, #56]	; (80a2f4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2f12:	681a      	ldr	r2, [r3, #0]
 80a2f14:	07d0      	lsls	r0, r2, #31
 80a2f16:	bf5c      	itt	pl
 80a2f18:	2201      	movpl	r2, #1
 80a2f1a:	601a      	strpl	r2, [r3, #0]
 80a2f1c:	4b0c      	ldr	r3, [pc, #48]	; (80a2f50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2f1e:	681a      	ldr	r2, [r3, #0]
 80a2f20:	07d1      	lsls	r1, r2, #31
 80a2f22:	bf5c      	itt	pl
 80a2f24:	2201      	movpl	r2, #1
 80a2f26:	601a      	strpl	r2, [r3, #0]
 80a2f28:	4b0a      	ldr	r3, [pc, #40]	; (80a2f54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2f2a:	681a      	ldr	r2, [r3, #0]
 80a2f2c:	07d2      	lsls	r2, r2, #31
 80a2f2e:	bf5c      	itt	pl
 80a2f30:	2201      	movpl	r2, #1
 80a2f32:	601a      	strpl	r2, [r3, #0]
 80a2f34:	4770      	bx	lr
 80a2f36:	bf00      	nop
 80a2f38:	20000a90 	.word	0x20000a90
 80a2f3c:	20000a8c 	.word	0x20000a8c
 80a2f40:	20000a88 	.word	0x20000a88
 80a2f44:	20000a84 	.word	0x20000a84
 80a2f48:	20000a80 	.word	0x20000a80
 80a2f4c:	20000a7c 	.word	0x20000a7c
 80a2f50:	20000a78 	.word	0x20000a78
 80a2f54:	20000a74 	.word	0x20000a74

080a2f58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2f58:	4b18      	ldr	r3, [pc, #96]	; (80a2fbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2f5a:	681a      	ldr	r2, [r3, #0]
 80a2f5c:	07d1      	lsls	r1, r2, #31
 80a2f5e:	bf5c      	itt	pl
 80a2f60:	2201      	movpl	r2, #1
 80a2f62:	601a      	strpl	r2, [r3, #0]
 80a2f64:	4b16      	ldr	r3, [pc, #88]	; (80a2fc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2f66:	681a      	ldr	r2, [r3, #0]
 80a2f68:	07d2      	lsls	r2, r2, #31
 80a2f6a:	bf5c      	itt	pl
 80a2f6c:	2201      	movpl	r2, #1
 80a2f6e:	601a      	strpl	r2, [r3, #0]
 80a2f70:	4b14      	ldr	r3, [pc, #80]	; (80a2fc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2f72:	681a      	ldr	r2, [r3, #0]
 80a2f74:	07d0      	lsls	r0, r2, #31
 80a2f76:	bf5c      	itt	pl
 80a2f78:	2201      	movpl	r2, #1
 80a2f7a:	601a      	strpl	r2, [r3, #0]
 80a2f7c:	4b12      	ldr	r3, [pc, #72]	; (80a2fc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2f7e:	681a      	ldr	r2, [r3, #0]
 80a2f80:	07d1      	lsls	r1, r2, #31
 80a2f82:	bf5c      	itt	pl
 80a2f84:	2201      	movpl	r2, #1
 80a2f86:	601a      	strpl	r2, [r3, #0]
 80a2f88:	4b10      	ldr	r3, [pc, #64]	; (80a2fcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2f8a:	681a      	ldr	r2, [r3, #0]
 80a2f8c:	07d2      	lsls	r2, r2, #31
 80a2f8e:	bf5c      	itt	pl
 80a2f90:	2201      	movpl	r2, #1
 80a2f92:	601a      	strpl	r2, [r3, #0]
 80a2f94:	4b0e      	ldr	r3, [pc, #56]	; (80a2fd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2f96:	681a      	ldr	r2, [r3, #0]
 80a2f98:	07d0      	lsls	r0, r2, #31
 80a2f9a:	bf5c      	itt	pl
 80a2f9c:	2201      	movpl	r2, #1
 80a2f9e:	601a      	strpl	r2, [r3, #0]
 80a2fa0:	4b0c      	ldr	r3, [pc, #48]	; (80a2fd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2fa2:	681a      	ldr	r2, [r3, #0]
 80a2fa4:	07d1      	lsls	r1, r2, #31
 80a2fa6:	bf5c      	itt	pl
 80a2fa8:	2201      	movpl	r2, #1
 80a2faa:	601a      	strpl	r2, [r3, #0]
 80a2fac:	4b0a      	ldr	r3, [pc, #40]	; (80a2fd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2fae:	681a      	ldr	r2, [r3, #0]
 80a2fb0:	07d2      	lsls	r2, r2, #31
 80a2fb2:	bf5c      	itt	pl
 80a2fb4:	2201      	movpl	r2, #1
 80a2fb6:	601a      	strpl	r2, [r3, #0]
 80a2fb8:	4770      	bx	lr
 80a2fba:	bf00      	nop
 80a2fbc:	20000ab0 	.word	0x20000ab0
 80a2fc0:	20000aac 	.word	0x20000aac
 80a2fc4:	20000aa8 	.word	0x20000aa8
 80a2fc8:	20000aa4 	.word	0x20000aa4
 80a2fcc:	20000aa0 	.word	0x20000aa0
 80a2fd0:	20000a9c 	.word	0x20000a9c
 80a2fd4:	20000a98 	.word	0x20000a98
 80a2fd8:	20000a94 	.word	0x20000a94

080a2fdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2fdc:	4b24      	ldr	r3, [pc, #144]	; (80a3070 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a2fde:	681a      	ldr	r2, [r3, #0]
 80a2fe0:	07d0      	lsls	r0, r2, #31
 80a2fe2:	bf5c      	itt	pl
 80a2fe4:	2201      	movpl	r2, #1
 80a2fe6:	601a      	strpl	r2, [r3, #0]
 80a2fe8:	4b22      	ldr	r3, [pc, #136]	; (80a3074 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a2fea:	681a      	ldr	r2, [r3, #0]
 80a2fec:	07d1      	lsls	r1, r2, #31
 80a2fee:	bf5c      	itt	pl
 80a2ff0:	2201      	movpl	r2, #1
 80a2ff2:	601a      	strpl	r2, [r3, #0]
 80a2ff4:	4b20      	ldr	r3, [pc, #128]	; (80a3078 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a2ff6:	681a      	ldr	r2, [r3, #0]
 80a2ff8:	07d2      	lsls	r2, r2, #31
 80a2ffa:	bf5c      	itt	pl
 80a2ffc:	2201      	movpl	r2, #1
 80a2ffe:	601a      	strpl	r2, [r3, #0]
 80a3000:	4b1e      	ldr	r3, [pc, #120]	; (80a307c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a3002:	681a      	ldr	r2, [r3, #0]
 80a3004:	07d0      	lsls	r0, r2, #31
 80a3006:	bf5c      	itt	pl
 80a3008:	2201      	movpl	r2, #1
 80a300a:	601a      	strpl	r2, [r3, #0]
 80a300c:	4b1c      	ldr	r3, [pc, #112]	; (80a3080 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a300e:	681a      	ldr	r2, [r3, #0]
 80a3010:	07d1      	lsls	r1, r2, #31
 80a3012:	bf5c      	itt	pl
 80a3014:	2201      	movpl	r2, #1
 80a3016:	601a      	strpl	r2, [r3, #0]
 80a3018:	4b1a      	ldr	r3, [pc, #104]	; (80a3084 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a301a:	681a      	ldr	r2, [r3, #0]
 80a301c:	07d2      	lsls	r2, r2, #31
 80a301e:	bf5c      	itt	pl
 80a3020:	2201      	movpl	r2, #1
 80a3022:	601a      	strpl	r2, [r3, #0]
 80a3024:	4b18      	ldr	r3, [pc, #96]	; (80a3088 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a3026:	681a      	ldr	r2, [r3, #0]
 80a3028:	07d0      	lsls	r0, r2, #31
 80a302a:	bf5c      	itt	pl
 80a302c:	2201      	movpl	r2, #1
 80a302e:	601a      	strpl	r2, [r3, #0]
 80a3030:	4b16      	ldr	r3, [pc, #88]	; (80a308c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a3032:	681a      	ldr	r2, [r3, #0]
 80a3034:	07d1      	lsls	r1, r2, #31
 80a3036:	bf5c      	itt	pl
 80a3038:	2201      	movpl	r2, #1
 80a303a:	601a      	strpl	r2, [r3, #0]
 80a303c:	4b14      	ldr	r3, [pc, #80]	; (80a3090 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a303e:	681a      	ldr	r2, [r3, #0]
 80a3040:	07d2      	lsls	r2, r2, #31
 80a3042:	bf5c      	itt	pl
 80a3044:	2201      	movpl	r2, #1
 80a3046:	601a      	strpl	r2, [r3, #0]
 80a3048:	4b12      	ldr	r3, [pc, #72]	; (80a3094 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a304a:	681a      	ldr	r2, [r3, #0]
 80a304c:	07d0      	lsls	r0, r2, #31
 80a304e:	bf5c      	itt	pl
 80a3050:	2201      	movpl	r2, #1
 80a3052:	601a      	strpl	r2, [r3, #0]
 80a3054:	4b10      	ldr	r3, [pc, #64]	; (80a3098 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a3056:	681a      	ldr	r2, [r3, #0]
 80a3058:	07d1      	lsls	r1, r2, #31
 80a305a:	bf5c      	itt	pl
 80a305c:	2201      	movpl	r2, #1
 80a305e:	601a      	strpl	r2, [r3, #0]
 80a3060:	4b0e      	ldr	r3, [pc, #56]	; (80a309c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a3062:	681a      	ldr	r2, [r3, #0]
 80a3064:	07d2      	lsls	r2, r2, #31
 80a3066:	bf5c      	itt	pl
 80a3068:	2201      	movpl	r2, #1
 80a306a:	601a      	strpl	r2, [r3, #0]
 80a306c:	4770      	bx	lr
 80a306e:	bf00      	nop
 80a3070:	20000ae0 	.word	0x20000ae0
 80a3074:	20000adc 	.word	0x20000adc
 80a3078:	20000ad8 	.word	0x20000ad8
 80a307c:	20000ad4 	.word	0x20000ad4
 80a3080:	20000ad0 	.word	0x20000ad0
 80a3084:	20000acc 	.word	0x20000acc
 80a3088:	20000ac8 	.word	0x20000ac8
 80a308c:	20000ac4 	.word	0x20000ac4
 80a3090:	20000ac0 	.word	0x20000ac0
 80a3094:	20000abc 	.word	0x20000abc
 80a3098:	20000ab8 	.word	0x20000ab8
 80a309c:	20000ab4 	.word	0x20000ab4

080a30a0 <__aeabi_drsub>:
 80a30a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a30a4:	e002      	b.n	80a30ac <__adddf3>
 80a30a6:	bf00      	nop

080a30a8 <__aeabi_dsub>:
 80a30a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a30ac <__adddf3>:
 80a30ac:	b530      	push	{r4, r5, lr}
 80a30ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a30b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a30b6:	ea94 0f05 	teq	r4, r5
 80a30ba:	bf08      	it	eq
 80a30bc:	ea90 0f02 	teqeq	r0, r2
 80a30c0:	bf1f      	itttt	ne
 80a30c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a30c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a30ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a30ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a30d2:	f000 80e2 	beq.w	80a329a <__adddf3+0x1ee>
 80a30d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a30da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a30de:	bfb8      	it	lt
 80a30e0:	426d      	neglt	r5, r5
 80a30e2:	dd0c      	ble.n	80a30fe <__adddf3+0x52>
 80a30e4:	442c      	add	r4, r5
 80a30e6:	ea80 0202 	eor.w	r2, r0, r2
 80a30ea:	ea81 0303 	eor.w	r3, r1, r3
 80a30ee:	ea82 0000 	eor.w	r0, r2, r0
 80a30f2:	ea83 0101 	eor.w	r1, r3, r1
 80a30f6:	ea80 0202 	eor.w	r2, r0, r2
 80a30fa:	ea81 0303 	eor.w	r3, r1, r3
 80a30fe:	2d36      	cmp	r5, #54	; 0x36
 80a3100:	bf88      	it	hi
 80a3102:	bd30      	pophi	{r4, r5, pc}
 80a3104:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3108:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a310c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a3110:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a3114:	d002      	beq.n	80a311c <__adddf3+0x70>
 80a3116:	4240      	negs	r0, r0
 80a3118:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a311c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a3120:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3124:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a3128:	d002      	beq.n	80a3130 <__adddf3+0x84>
 80a312a:	4252      	negs	r2, r2
 80a312c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a3130:	ea94 0f05 	teq	r4, r5
 80a3134:	f000 80a7 	beq.w	80a3286 <__adddf3+0x1da>
 80a3138:	f1a4 0401 	sub.w	r4, r4, #1
 80a313c:	f1d5 0e20 	rsbs	lr, r5, #32
 80a3140:	db0d      	blt.n	80a315e <__adddf3+0xb2>
 80a3142:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a3146:	fa22 f205 	lsr.w	r2, r2, r5
 80a314a:	1880      	adds	r0, r0, r2
 80a314c:	f141 0100 	adc.w	r1, r1, #0
 80a3150:	fa03 f20e 	lsl.w	r2, r3, lr
 80a3154:	1880      	adds	r0, r0, r2
 80a3156:	fa43 f305 	asr.w	r3, r3, r5
 80a315a:	4159      	adcs	r1, r3
 80a315c:	e00e      	b.n	80a317c <__adddf3+0xd0>
 80a315e:	f1a5 0520 	sub.w	r5, r5, #32
 80a3162:	f10e 0e20 	add.w	lr, lr, #32
 80a3166:	2a01      	cmp	r2, #1
 80a3168:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a316c:	bf28      	it	cs
 80a316e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a3172:	fa43 f305 	asr.w	r3, r3, r5
 80a3176:	18c0      	adds	r0, r0, r3
 80a3178:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a317c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3180:	d507      	bpl.n	80a3192 <__adddf3+0xe6>
 80a3182:	f04f 0e00 	mov.w	lr, #0
 80a3186:	f1dc 0c00 	rsbs	ip, ip, #0
 80a318a:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a318e:	eb6e 0101 	sbc.w	r1, lr, r1
 80a3192:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a3196:	d31b      	bcc.n	80a31d0 <__adddf3+0x124>
 80a3198:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a319c:	d30c      	bcc.n	80a31b8 <__adddf3+0x10c>
 80a319e:	0849      	lsrs	r1, r1, #1
 80a31a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80a31a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a31a8:	f104 0401 	add.w	r4, r4, #1
 80a31ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a31b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a31b4:	f080 809a 	bcs.w	80a32ec <__adddf3+0x240>
 80a31b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a31bc:	bf08      	it	eq
 80a31be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a31c2:	f150 0000 	adcs.w	r0, r0, #0
 80a31c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a31ca:	ea41 0105 	orr.w	r1, r1, r5
 80a31ce:	bd30      	pop	{r4, r5, pc}
 80a31d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a31d4:	4140      	adcs	r0, r0
 80a31d6:	eb41 0101 	adc.w	r1, r1, r1
 80a31da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a31de:	f1a4 0401 	sub.w	r4, r4, #1
 80a31e2:	d1e9      	bne.n	80a31b8 <__adddf3+0x10c>
 80a31e4:	f091 0f00 	teq	r1, #0
 80a31e8:	bf04      	itt	eq
 80a31ea:	4601      	moveq	r1, r0
 80a31ec:	2000      	moveq	r0, #0
 80a31ee:	fab1 f381 	clz	r3, r1
 80a31f2:	bf08      	it	eq
 80a31f4:	3320      	addeq	r3, #32
 80a31f6:	f1a3 030b 	sub.w	r3, r3, #11
 80a31fa:	f1b3 0220 	subs.w	r2, r3, #32
 80a31fe:	da0c      	bge.n	80a321a <__adddf3+0x16e>
 80a3200:	320c      	adds	r2, #12
 80a3202:	dd08      	ble.n	80a3216 <__adddf3+0x16a>
 80a3204:	f102 0c14 	add.w	ip, r2, #20
 80a3208:	f1c2 020c 	rsb	r2, r2, #12
 80a320c:	fa01 f00c 	lsl.w	r0, r1, ip
 80a3210:	fa21 f102 	lsr.w	r1, r1, r2
 80a3214:	e00c      	b.n	80a3230 <__adddf3+0x184>
 80a3216:	f102 0214 	add.w	r2, r2, #20
 80a321a:	bfd8      	it	le
 80a321c:	f1c2 0c20 	rsble	ip, r2, #32
 80a3220:	fa01 f102 	lsl.w	r1, r1, r2
 80a3224:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a3228:	bfdc      	itt	le
 80a322a:	ea41 010c 	orrle.w	r1, r1, ip
 80a322e:	4090      	lslle	r0, r2
 80a3230:	1ae4      	subs	r4, r4, r3
 80a3232:	bfa2      	ittt	ge
 80a3234:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a3238:	4329      	orrge	r1, r5
 80a323a:	bd30      	popge	{r4, r5, pc}
 80a323c:	ea6f 0404 	mvn.w	r4, r4
 80a3240:	3c1f      	subs	r4, #31
 80a3242:	da1c      	bge.n	80a327e <__adddf3+0x1d2>
 80a3244:	340c      	adds	r4, #12
 80a3246:	dc0e      	bgt.n	80a3266 <__adddf3+0x1ba>
 80a3248:	f104 0414 	add.w	r4, r4, #20
 80a324c:	f1c4 0220 	rsb	r2, r4, #32
 80a3250:	fa20 f004 	lsr.w	r0, r0, r4
 80a3254:	fa01 f302 	lsl.w	r3, r1, r2
 80a3258:	ea40 0003 	orr.w	r0, r0, r3
 80a325c:	fa21 f304 	lsr.w	r3, r1, r4
 80a3260:	ea45 0103 	orr.w	r1, r5, r3
 80a3264:	bd30      	pop	{r4, r5, pc}
 80a3266:	f1c4 040c 	rsb	r4, r4, #12
 80a326a:	f1c4 0220 	rsb	r2, r4, #32
 80a326e:	fa20 f002 	lsr.w	r0, r0, r2
 80a3272:	fa01 f304 	lsl.w	r3, r1, r4
 80a3276:	ea40 0003 	orr.w	r0, r0, r3
 80a327a:	4629      	mov	r1, r5
 80a327c:	bd30      	pop	{r4, r5, pc}
 80a327e:	fa21 f004 	lsr.w	r0, r1, r4
 80a3282:	4629      	mov	r1, r5
 80a3284:	bd30      	pop	{r4, r5, pc}
 80a3286:	f094 0f00 	teq	r4, #0
 80a328a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a328e:	bf06      	itte	eq
 80a3290:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a3294:	3401      	addeq	r4, #1
 80a3296:	3d01      	subne	r5, #1
 80a3298:	e74e      	b.n	80a3138 <__adddf3+0x8c>
 80a329a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a329e:	bf18      	it	ne
 80a32a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a32a4:	d029      	beq.n	80a32fa <__adddf3+0x24e>
 80a32a6:	ea94 0f05 	teq	r4, r5
 80a32aa:	bf08      	it	eq
 80a32ac:	ea90 0f02 	teqeq	r0, r2
 80a32b0:	d005      	beq.n	80a32be <__adddf3+0x212>
 80a32b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80a32b6:	bf04      	itt	eq
 80a32b8:	4619      	moveq	r1, r3
 80a32ba:	4610      	moveq	r0, r2
 80a32bc:	bd30      	pop	{r4, r5, pc}
 80a32be:	ea91 0f03 	teq	r1, r3
 80a32c2:	bf1e      	ittt	ne
 80a32c4:	2100      	movne	r1, #0
 80a32c6:	2000      	movne	r0, #0
 80a32c8:	bd30      	popne	{r4, r5, pc}
 80a32ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a32ce:	d105      	bne.n	80a32dc <__adddf3+0x230>
 80a32d0:	0040      	lsls	r0, r0, #1
 80a32d2:	4149      	adcs	r1, r1
 80a32d4:	bf28      	it	cs
 80a32d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a32da:	bd30      	pop	{r4, r5, pc}
 80a32dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a32e0:	bf3c      	itt	cc
 80a32e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a32e6:	bd30      	popcc	{r4, r5, pc}
 80a32e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a32ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a32f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a32f4:	f04f 0000 	mov.w	r0, #0
 80a32f8:	bd30      	pop	{r4, r5, pc}
 80a32fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a32fe:	bf1a      	itte	ne
 80a3300:	4619      	movne	r1, r3
 80a3302:	4610      	movne	r0, r2
 80a3304:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a3308:	bf1c      	itt	ne
 80a330a:	460b      	movne	r3, r1
 80a330c:	4602      	movne	r2, r0
 80a330e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3312:	bf06      	itte	eq
 80a3314:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a3318:	ea91 0f03 	teqeq	r1, r3
 80a331c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a3320:	bd30      	pop	{r4, r5, pc}
 80a3322:	bf00      	nop

080a3324 <__aeabi_ui2d>:
 80a3324:	f090 0f00 	teq	r0, #0
 80a3328:	bf04      	itt	eq
 80a332a:	2100      	moveq	r1, #0
 80a332c:	4770      	bxeq	lr
 80a332e:	b530      	push	{r4, r5, lr}
 80a3330:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3334:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3338:	f04f 0500 	mov.w	r5, #0
 80a333c:	f04f 0100 	mov.w	r1, #0
 80a3340:	e750      	b.n	80a31e4 <__adddf3+0x138>
 80a3342:	bf00      	nop

080a3344 <__aeabi_i2d>:
 80a3344:	f090 0f00 	teq	r0, #0
 80a3348:	bf04      	itt	eq
 80a334a:	2100      	moveq	r1, #0
 80a334c:	4770      	bxeq	lr
 80a334e:	b530      	push	{r4, r5, lr}
 80a3350:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3354:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3358:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a335c:	bf48      	it	mi
 80a335e:	4240      	negmi	r0, r0
 80a3360:	f04f 0100 	mov.w	r1, #0
 80a3364:	e73e      	b.n	80a31e4 <__adddf3+0x138>
 80a3366:	bf00      	nop

080a3368 <__aeabi_f2d>:
 80a3368:	0042      	lsls	r2, r0, #1
 80a336a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a336e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a3372:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a3376:	bf1f      	itttt	ne
 80a3378:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a337c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a3380:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a3384:	4770      	bxne	lr
 80a3386:	f092 0f00 	teq	r2, #0
 80a338a:	bf14      	ite	ne
 80a338c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a3390:	4770      	bxeq	lr
 80a3392:	b530      	push	{r4, r5, lr}
 80a3394:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a3398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a339c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a33a0:	e720      	b.n	80a31e4 <__adddf3+0x138>
 80a33a2:	bf00      	nop

080a33a4 <__aeabi_ul2d>:
 80a33a4:	ea50 0201 	orrs.w	r2, r0, r1
 80a33a8:	bf08      	it	eq
 80a33aa:	4770      	bxeq	lr
 80a33ac:	b530      	push	{r4, r5, lr}
 80a33ae:	f04f 0500 	mov.w	r5, #0
 80a33b2:	e00a      	b.n	80a33ca <__aeabi_l2d+0x16>

080a33b4 <__aeabi_l2d>:
 80a33b4:	ea50 0201 	orrs.w	r2, r0, r1
 80a33b8:	bf08      	it	eq
 80a33ba:	4770      	bxeq	lr
 80a33bc:	b530      	push	{r4, r5, lr}
 80a33be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a33c2:	d502      	bpl.n	80a33ca <__aeabi_l2d+0x16>
 80a33c4:	4240      	negs	r0, r0
 80a33c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a33ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a33ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a33d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a33d6:	f43f aedc 	beq.w	80a3192 <__adddf3+0xe6>
 80a33da:	f04f 0203 	mov.w	r2, #3
 80a33de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a33e2:	bf18      	it	ne
 80a33e4:	3203      	addne	r2, #3
 80a33e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a33ea:	bf18      	it	ne
 80a33ec:	3203      	addne	r2, #3
 80a33ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a33f2:	f1c2 0320 	rsb	r3, r2, #32
 80a33f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80a33fa:	fa20 f002 	lsr.w	r0, r0, r2
 80a33fe:	fa01 fe03 	lsl.w	lr, r1, r3
 80a3402:	ea40 000e 	orr.w	r0, r0, lr
 80a3406:	fa21 f102 	lsr.w	r1, r1, r2
 80a340a:	4414      	add	r4, r2
 80a340c:	e6c1      	b.n	80a3192 <__adddf3+0xe6>
 80a340e:	bf00      	nop

080a3410 <__aeabi_dmul>:
 80a3410:	b570      	push	{r4, r5, r6, lr}
 80a3412:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3416:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a341a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a341e:	bf1d      	ittte	ne
 80a3420:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3424:	ea94 0f0c 	teqne	r4, ip
 80a3428:	ea95 0f0c 	teqne	r5, ip
 80a342c:	f000 f8de 	bleq	80a35ec <__aeabi_dmul+0x1dc>
 80a3430:	442c      	add	r4, r5
 80a3432:	ea81 0603 	eor.w	r6, r1, r3
 80a3436:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a343a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a343e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a3442:	bf18      	it	ne
 80a3444:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a3448:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a344c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a3450:	d038      	beq.n	80a34c4 <__aeabi_dmul+0xb4>
 80a3452:	fba0 ce02 	umull	ip, lr, r0, r2
 80a3456:	f04f 0500 	mov.w	r5, #0
 80a345a:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a345e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a3462:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a3466:	f04f 0600 	mov.w	r6, #0
 80a346a:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a346e:	f09c 0f00 	teq	ip, #0
 80a3472:	bf18      	it	ne
 80a3474:	f04e 0e01 	orrne.w	lr, lr, #1
 80a3478:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a347c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a3480:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a3484:	d204      	bcs.n	80a3490 <__aeabi_dmul+0x80>
 80a3486:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a348a:	416d      	adcs	r5, r5
 80a348c:	eb46 0606 	adc.w	r6, r6, r6
 80a3490:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a3494:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a3498:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a349c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a34a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a34a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a34a8:	bf88      	it	hi
 80a34aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a34ae:	d81e      	bhi.n	80a34ee <__aeabi_dmul+0xde>
 80a34b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a34b4:	bf08      	it	eq
 80a34b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a34ba:	f150 0000 	adcs.w	r0, r0, #0
 80a34be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a34c2:	bd70      	pop	{r4, r5, r6, pc}
 80a34c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a34c8:	ea46 0101 	orr.w	r1, r6, r1
 80a34cc:	ea40 0002 	orr.w	r0, r0, r2
 80a34d0:	ea81 0103 	eor.w	r1, r1, r3
 80a34d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a34d8:	bfc2      	ittt	gt
 80a34da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a34de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a34e2:	bd70      	popgt	{r4, r5, r6, pc}
 80a34e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a34e8:	f04f 0e00 	mov.w	lr, #0
 80a34ec:	3c01      	subs	r4, #1
 80a34ee:	f300 80ab 	bgt.w	80a3648 <__aeabi_dmul+0x238>
 80a34f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a34f6:	bfde      	ittt	le
 80a34f8:	2000      	movle	r0, #0
 80a34fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a34fe:	bd70      	pople	{r4, r5, r6, pc}
 80a3500:	f1c4 0400 	rsb	r4, r4, #0
 80a3504:	3c20      	subs	r4, #32
 80a3506:	da35      	bge.n	80a3574 <__aeabi_dmul+0x164>
 80a3508:	340c      	adds	r4, #12
 80a350a:	dc1b      	bgt.n	80a3544 <__aeabi_dmul+0x134>
 80a350c:	f104 0414 	add.w	r4, r4, #20
 80a3510:	f1c4 0520 	rsb	r5, r4, #32
 80a3514:	fa00 f305 	lsl.w	r3, r0, r5
 80a3518:	fa20 f004 	lsr.w	r0, r0, r4
 80a351c:	fa01 f205 	lsl.w	r2, r1, r5
 80a3520:	ea40 0002 	orr.w	r0, r0, r2
 80a3524:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a3528:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a352c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a3530:	fa21 f604 	lsr.w	r6, r1, r4
 80a3534:	eb42 0106 	adc.w	r1, r2, r6
 80a3538:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a353c:	bf08      	it	eq
 80a353e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3542:	bd70      	pop	{r4, r5, r6, pc}
 80a3544:	f1c4 040c 	rsb	r4, r4, #12
 80a3548:	f1c4 0520 	rsb	r5, r4, #32
 80a354c:	fa00 f304 	lsl.w	r3, r0, r4
 80a3550:	fa20 f005 	lsr.w	r0, r0, r5
 80a3554:	fa01 f204 	lsl.w	r2, r1, r4
 80a3558:	ea40 0002 	orr.w	r0, r0, r2
 80a355c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3560:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a3564:	f141 0100 	adc.w	r1, r1, #0
 80a3568:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a356c:	bf08      	it	eq
 80a356e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3572:	bd70      	pop	{r4, r5, r6, pc}
 80a3574:	f1c4 0520 	rsb	r5, r4, #32
 80a3578:	fa00 f205 	lsl.w	r2, r0, r5
 80a357c:	ea4e 0e02 	orr.w	lr, lr, r2
 80a3580:	fa20 f304 	lsr.w	r3, r0, r4
 80a3584:	fa01 f205 	lsl.w	r2, r1, r5
 80a3588:	ea43 0302 	orr.w	r3, r3, r2
 80a358c:	fa21 f004 	lsr.w	r0, r1, r4
 80a3590:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3594:	fa21 f204 	lsr.w	r2, r1, r4
 80a3598:	ea20 0002 	bic.w	r0, r0, r2
 80a359c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a35a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a35a4:	bf08      	it	eq
 80a35a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a35aa:	bd70      	pop	{r4, r5, r6, pc}
 80a35ac:	f094 0f00 	teq	r4, #0
 80a35b0:	d10f      	bne.n	80a35d2 <__aeabi_dmul+0x1c2>
 80a35b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a35b6:	0040      	lsls	r0, r0, #1
 80a35b8:	eb41 0101 	adc.w	r1, r1, r1
 80a35bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a35c0:	bf08      	it	eq
 80a35c2:	3c01      	subeq	r4, #1
 80a35c4:	d0f7      	beq.n	80a35b6 <__aeabi_dmul+0x1a6>
 80a35c6:	ea41 0106 	orr.w	r1, r1, r6
 80a35ca:	f095 0f00 	teq	r5, #0
 80a35ce:	bf18      	it	ne
 80a35d0:	4770      	bxne	lr
 80a35d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a35d6:	0052      	lsls	r2, r2, #1
 80a35d8:	eb43 0303 	adc.w	r3, r3, r3
 80a35dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a35e0:	bf08      	it	eq
 80a35e2:	3d01      	subeq	r5, #1
 80a35e4:	d0f7      	beq.n	80a35d6 <__aeabi_dmul+0x1c6>
 80a35e6:	ea43 0306 	orr.w	r3, r3, r6
 80a35ea:	4770      	bx	lr
 80a35ec:	ea94 0f0c 	teq	r4, ip
 80a35f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a35f4:	bf18      	it	ne
 80a35f6:	ea95 0f0c 	teqne	r5, ip
 80a35fa:	d00c      	beq.n	80a3616 <__aeabi_dmul+0x206>
 80a35fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3600:	bf18      	it	ne
 80a3602:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3606:	d1d1      	bne.n	80a35ac <__aeabi_dmul+0x19c>
 80a3608:	ea81 0103 	eor.w	r1, r1, r3
 80a360c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3610:	f04f 0000 	mov.w	r0, #0
 80a3614:	bd70      	pop	{r4, r5, r6, pc}
 80a3616:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a361a:	bf06      	itte	eq
 80a361c:	4610      	moveq	r0, r2
 80a361e:	4619      	moveq	r1, r3
 80a3620:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3624:	d019      	beq.n	80a365a <__aeabi_dmul+0x24a>
 80a3626:	ea94 0f0c 	teq	r4, ip
 80a362a:	d102      	bne.n	80a3632 <__aeabi_dmul+0x222>
 80a362c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a3630:	d113      	bne.n	80a365a <__aeabi_dmul+0x24a>
 80a3632:	ea95 0f0c 	teq	r5, ip
 80a3636:	d105      	bne.n	80a3644 <__aeabi_dmul+0x234>
 80a3638:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a363c:	bf1c      	itt	ne
 80a363e:	4610      	movne	r0, r2
 80a3640:	4619      	movne	r1, r3
 80a3642:	d10a      	bne.n	80a365a <__aeabi_dmul+0x24a>
 80a3644:	ea81 0103 	eor.w	r1, r1, r3
 80a3648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a364c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a3650:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3654:	f04f 0000 	mov.w	r0, #0
 80a3658:	bd70      	pop	{r4, r5, r6, pc}
 80a365a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a365e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a3662:	bd70      	pop	{r4, r5, r6, pc}

080a3664 <__aeabi_ddiv>:
 80a3664:	b570      	push	{r4, r5, r6, lr}
 80a3666:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a366a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a366e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a3672:	bf1d      	ittte	ne
 80a3674:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3678:	ea94 0f0c 	teqne	r4, ip
 80a367c:	ea95 0f0c 	teqne	r5, ip
 80a3680:	f000 f8a7 	bleq	80a37d2 <__aeabi_ddiv+0x16e>
 80a3684:	eba4 0405 	sub.w	r4, r4, r5
 80a3688:	ea81 0e03 	eor.w	lr, r1, r3
 80a368c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a3690:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3694:	f000 8088 	beq.w	80a37a8 <__aeabi_ddiv+0x144>
 80a3698:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a369c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a36a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a36a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a36a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a36ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a36b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a36b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a36b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a36bc:	429d      	cmp	r5, r3
 80a36be:	bf08      	it	eq
 80a36c0:	4296      	cmpeq	r6, r2
 80a36c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a36c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a36ca:	d202      	bcs.n	80a36d2 <__aeabi_ddiv+0x6e>
 80a36cc:	085b      	lsrs	r3, r3, #1
 80a36ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80a36d2:	1ab6      	subs	r6, r6, r2
 80a36d4:	eb65 0503 	sbc.w	r5, r5, r3
 80a36d8:	085b      	lsrs	r3, r3, #1
 80a36da:	ea4f 0232 	mov.w	r2, r2, rrx
 80a36de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a36e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a36e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a36ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a36ee:	bf22      	ittt	cs
 80a36f0:	1ab6      	subcs	r6, r6, r2
 80a36f2:	4675      	movcs	r5, lr
 80a36f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80a36f8:	085b      	lsrs	r3, r3, #1
 80a36fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80a36fe:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3702:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3706:	bf22      	ittt	cs
 80a3708:	1ab6      	subcs	r6, r6, r2
 80a370a:	4675      	movcs	r5, lr
 80a370c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a3710:	085b      	lsrs	r3, r3, #1
 80a3712:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3716:	ebb6 0e02 	subs.w	lr, r6, r2
 80a371a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a371e:	bf22      	ittt	cs
 80a3720:	1ab6      	subcs	r6, r6, r2
 80a3722:	4675      	movcs	r5, lr
 80a3724:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a3728:	085b      	lsrs	r3, r3, #1
 80a372a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a372e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3732:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3736:	bf22      	ittt	cs
 80a3738:	1ab6      	subcs	r6, r6, r2
 80a373a:	4675      	movcs	r5, lr
 80a373c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a3740:	ea55 0e06 	orrs.w	lr, r5, r6
 80a3744:	d018      	beq.n	80a3778 <__aeabi_ddiv+0x114>
 80a3746:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a374a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a374e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a3752:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a3756:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a375a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a375e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a3762:	d1c0      	bne.n	80a36e6 <__aeabi_ddiv+0x82>
 80a3764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3768:	d10b      	bne.n	80a3782 <__aeabi_ddiv+0x11e>
 80a376a:	ea41 0100 	orr.w	r1, r1, r0
 80a376e:	f04f 0000 	mov.w	r0, #0
 80a3772:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a3776:	e7b6      	b.n	80a36e6 <__aeabi_ddiv+0x82>
 80a3778:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a377c:	bf04      	itt	eq
 80a377e:	4301      	orreq	r1, r0
 80a3780:	2000      	moveq	r0, #0
 80a3782:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3786:	bf88      	it	hi
 80a3788:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a378c:	f63f aeaf 	bhi.w	80a34ee <__aeabi_dmul+0xde>
 80a3790:	ebb5 0c03 	subs.w	ip, r5, r3
 80a3794:	bf04      	itt	eq
 80a3796:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a379a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a379e:	f150 0000 	adcs.w	r0, r0, #0
 80a37a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a37a6:	bd70      	pop	{r4, r5, r6, pc}
 80a37a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a37ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a37b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a37b4:	bfc2      	ittt	gt
 80a37b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a37ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a37be:	bd70      	popgt	{r4, r5, r6, pc}
 80a37c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a37c4:	f04f 0e00 	mov.w	lr, #0
 80a37c8:	3c01      	subs	r4, #1
 80a37ca:	e690      	b.n	80a34ee <__aeabi_dmul+0xde>
 80a37cc:	ea45 0e06 	orr.w	lr, r5, r6
 80a37d0:	e68d      	b.n	80a34ee <__aeabi_dmul+0xde>
 80a37d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a37d6:	ea94 0f0c 	teq	r4, ip
 80a37da:	bf08      	it	eq
 80a37dc:	ea95 0f0c 	teqeq	r5, ip
 80a37e0:	f43f af3b 	beq.w	80a365a <__aeabi_dmul+0x24a>
 80a37e4:	ea94 0f0c 	teq	r4, ip
 80a37e8:	d10a      	bne.n	80a3800 <__aeabi_ddiv+0x19c>
 80a37ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a37ee:	f47f af34 	bne.w	80a365a <__aeabi_dmul+0x24a>
 80a37f2:	ea95 0f0c 	teq	r5, ip
 80a37f6:	f47f af25 	bne.w	80a3644 <__aeabi_dmul+0x234>
 80a37fa:	4610      	mov	r0, r2
 80a37fc:	4619      	mov	r1, r3
 80a37fe:	e72c      	b.n	80a365a <__aeabi_dmul+0x24a>
 80a3800:	ea95 0f0c 	teq	r5, ip
 80a3804:	d106      	bne.n	80a3814 <__aeabi_ddiv+0x1b0>
 80a3806:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a380a:	f43f aefd 	beq.w	80a3608 <__aeabi_dmul+0x1f8>
 80a380e:	4610      	mov	r0, r2
 80a3810:	4619      	mov	r1, r3
 80a3812:	e722      	b.n	80a365a <__aeabi_dmul+0x24a>
 80a3814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3818:	bf18      	it	ne
 80a381a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a381e:	f47f aec5 	bne.w	80a35ac <__aeabi_dmul+0x19c>
 80a3822:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a3826:	f47f af0d 	bne.w	80a3644 <__aeabi_dmul+0x234>
 80a382a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a382e:	f47f aeeb 	bne.w	80a3608 <__aeabi_dmul+0x1f8>
 80a3832:	e712      	b.n	80a365a <__aeabi_dmul+0x24a>

080a3834 <__gedf2>:
 80a3834:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a3838:	e006      	b.n	80a3848 <__cmpdf2+0x4>
 80a383a:	bf00      	nop

080a383c <__ledf2>:
 80a383c:	f04f 0c01 	mov.w	ip, #1
 80a3840:	e002      	b.n	80a3848 <__cmpdf2+0x4>
 80a3842:	bf00      	nop

080a3844 <__cmpdf2>:
 80a3844:	f04f 0c01 	mov.w	ip, #1
 80a3848:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a384c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3850:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3854:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3858:	bf18      	it	ne
 80a385a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a385e:	d01b      	beq.n	80a3898 <__cmpdf2+0x54>
 80a3860:	b001      	add	sp, #4
 80a3862:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a3866:	bf0c      	ite	eq
 80a3868:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a386c:	ea91 0f03 	teqne	r1, r3
 80a3870:	bf02      	ittt	eq
 80a3872:	ea90 0f02 	teqeq	r0, r2
 80a3876:	2000      	moveq	r0, #0
 80a3878:	4770      	bxeq	lr
 80a387a:	f110 0f00 	cmn.w	r0, #0
 80a387e:	ea91 0f03 	teq	r1, r3
 80a3882:	bf58      	it	pl
 80a3884:	4299      	cmppl	r1, r3
 80a3886:	bf08      	it	eq
 80a3888:	4290      	cmpeq	r0, r2
 80a388a:	bf2c      	ite	cs
 80a388c:	17d8      	asrcs	r0, r3, #31
 80a388e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a3892:	f040 0001 	orr.w	r0, r0, #1
 80a3896:	4770      	bx	lr
 80a3898:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a389c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a38a0:	d102      	bne.n	80a38a8 <__cmpdf2+0x64>
 80a38a2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a38a6:	d107      	bne.n	80a38b8 <__cmpdf2+0x74>
 80a38a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a38ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a38b0:	d1d6      	bne.n	80a3860 <__cmpdf2+0x1c>
 80a38b2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a38b6:	d0d3      	beq.n	80a3860 <__cmpdf2+0x1c>
 80a38b8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a38bc:	4770      	bx	lr
 80a38be:	bf00      	nop

080a38c0 <__aeabi_cdrcmple>:
 80a38c0:	4684      	mov	ip, r0
 80a38c2:	4610      	mov	r0, r2
 80a38c4:	4662      	mov	r2, ip
 80a38c6:	468c      	mov	ip, r1
 80a38c8:	4619      	mov	r1, r3
 80a38ca:	4663      	mov	r3, ip
 80a38cc:	e000      	b.n	80a38d0 <__aeabi_cdcmpeq>
 80a38ce:	bf00      	nop

080a38d0 <__aeabi_cdcmpeq>:
 80a38d0:	b501      	push	{r0, lr}
 80a38d2:	f7ff ffb7 	bl	80a3844 <__cmpdf2>
 80a38d6:	2800      	cmp	r0, #0
 80a38d8:	bf48      	it	mi
 80a38da:	f110 0f00 	cmnmi.w	r0, #0
 80a38de:	bd01      	pop	{r0, pc}

080a38e0 <__aeabi_dcmpeq>:
 80a38e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a38e4:	f7ff fff4 	bl	80a38d0 <__aeabi_cdcmpeq>
 80a38e8:	bf0c      	ite	eq
 80a38ea:	2001      	moveq	r0, #1
 80a38ec:	2000      	movne	r0, #0
 80a38ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80a38f2:	bf00      	nop

080a38f4 <__aeabi_dcmplt>:
 80a38f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a38f8:	f7ff ffea 	bl	80a38d0 <__aeabi_cdcmpeq>
 80a38fc:	bf34      	ite	cc
 80a38fe:	2001      	movcc	r0, #1
 80a3900:	2000      	movcs	r0, #0
 80a3902:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3906:	bf00      	nop

080a3908 <__aeabi_dcmple>:
 80a3908:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a390c:	f7ff ffe0 	bl	80a38d0 <__aeabi_cdcmpeq>
 80a3910:	bf94      	ite	ls
 80a3912:	2001      	movls	r0, #1
 80a3914:	2000      	movhi	r0, #0
 80a3916:	f85d fb08 	ldr.w	pc, [sp], #8
 80a391a:	bf00      	nop

080a391c <__aeabi_dcmpge>:
 80a391c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3920:	f7ff ffce 	bl	80a38c0 <__aeabi_cdrcmple>
 80a3924:	bf94      	ite	ls
 80a3926:	2001      	movls	r0, #1
 80a3928:	2000      	movhi	r0, #0
 80a392a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a392e:	bf00      	nop

080a3930 <__aeabi_dcmpgt>:
 80a3930:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3934:	f7ff ffc4 	bl	80a38c0 <__aeabi_cdrcmple>
 80a3938:	bf34      	ite	cc
 80a393a:	2001      	movcc	r0, #1
 80a393c:	2000      	movcs	r0, #0
 80a393e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3942:	bf00      	nop

080a3944 <__aeabi_dcmpun>:
 80a3944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a394c:	d102      	bne.n	80a3954 <__aeabi_dcmpun+0x10>
 80a394e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a3952:	d10a      	bne.n	80a396a <__aeabi_dcmpun+0x26>
 80a3954:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3958:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a395c:	d102      	bne.n	80a3964 <__aeabi_dcmpun+0x20>
 80a395e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a3962:	d102      	bne.n	80a396a <__aeabi_dcmpun+0x26>
 80a3964:	f04f 0000 	mov.w	r0, #0
 80a3968:	4770      	bx	lr
 80a396a:	f04f 0001 	mov.w	r0, #1
 80a396e:	4770      	bx	lr

080a3970 <__aeabi_d2iz>:
 80a3970:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a3974:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a3978:	d215      	bcs.n	80a39a6 <__aeabi_d2iz+0x36>
 80a397a:	d511      	bpl.n	80a39a0 <__aeabi_d2iz+0x30>
 80a397c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a3980:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3984:	d912      	bls.n	80a39ac <__aeabi_d2iz+0x3c>
 80a3986:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a398a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a398e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a3992:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3996:	fa23 f002 	lsr.w	r0, r3, r2
 80a399a:	bf18      	it	ne
 80a399c:	4240      	negne	r0, r0
 80a399e:	4770      	bx	lr
 80a39a0:	f04f 0000 	mov.w	r0, #0
 80a39a4:	4770      	bx	lr
 80a39a6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a39aa:	d105      	bne.n	80a39b8 <__aeabi_d2iz+0x48>
 80a39ac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a39b0:	bf08      	it	eq
 80a39b2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a39b6:	4770      	bx	lr
 80a39b8:	f04f 0000 	mov.w	r0, #0
 80a39bc:	4770      	bx	lr
 80a39be:	bf00      	nop

080a39c0 <__aeabi_d2uiz>:
 80a39c0:	004a      	lsls	r2, r1, #1
 80a39c2:	d211      	bcs.n	80a39e8 <__aeabi_d2uiz+0x28>
 80a39c4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a39c8:	d211      	bcs.n	80a39ee <__aeabi_d2uiz+0x2e>
 80a39ca:	d50d      	bpl.n	80a39e8 <__aeabi_d2uiz+0x28>
 80a39cc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a39d0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a39d4:	d40e      	bmi.n	80a39f4 <__aeabi_d2uiz+0x34>
 80a39d6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a39da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a39de:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a39e2:	fa23 f002 	lsr.w	r0, r3, r2
 80a39e6:	4770      	bx	lr
 80a39e8:	f04f 0000 	mov.w	r0, #0
 80a39ec:	4770      	bx	lr
 80a39ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a39f2:	d102      	bne.n	80a39fa <__aeabi_d2uiz+0x3a>
 80a39f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a39f8:	4770      	bx	lr
 80a39fa:	f04f 0000 	mov.w	r0, #0
 80a39fe:	4770      	bx	lr

080a3a00 <__aeabi_d2f>:
 80a3a00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a3a04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a3a08:	bf24      	itt	cs
 80a3a0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a3a0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a3a12:	d90d      	bls.n	80a3a30 <__aeabi_d2f+0x30>
 80a3a14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a3a18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a3a1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a3a20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a3a24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a3a28:	bf08      	it	eq
 80a3a2a:	f020 0001 	biceq.w	r0, r0, #1
 80a3a2e:	4770      	bx	lr
 80a3a30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a3a34:	d121      	bne.n	80a3a7a <__aeabi_d2f+0x7a>
 80a3a36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a3a3a:	bfbc      	itt	lt
 80a3a3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a3a40:	4770      	bxlt	lr
 80a3a42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3a46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a3a4a:	f1c2 0218 	rsb	r2, r2, #24
 80a3a4e:	f1c2 0c20 	rsb	ip, r2, #32
 80a3a52:	fa10 f30c 	lsls.w	r3, r0, ip
 80a3a56:	fa20 f002 	lsr.w	r0, r0, r2
 80a3a5a:	bf18      	it	ne
 80a3a5c:	f040 0001 	orrne.w	r0, r0, #1
 80a3a60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3a64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a3a68:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a3a6c:	ea40 000c 	orr.w	r0, r0, ip
 80a3a70:	fa23 f302 	lsr.w	r3, r3, r2
 80a3a74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a3a78:	e7cc      	b.n	80a3a14 <__aeabi_d2f+0x14>
 80a3a7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a3a7e:	d107      	bne.n	80a3a90 <__aeabi_d2f+0x90>
 80a3a80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a3a84:	bf1e      	ittt	ne
 80a3a86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a3a8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a3a8e:	4770      	bxne	lr
 80a3a90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a3a94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3a98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3a9c:	4770      	bx	lr
 80a3a9e:	bf00      	nop

080a3aa0 <__aeabi_frsub>:
 80a3aa0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a3aa4:	e002      	b.n	80a3aac <__addsf3>
 80a3aa6:	bf00      	nop

080a3aa8 <__aeabi_fsub>:
 80a3aa8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a3aac <__addsf3>:
 80a3aac:	0042      	lsls	r2, r0, #1
 80a3aae:	bf1f      	itttt	ne
 80a3ab0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a3ab4:	ea92 0f03 	teqne	r2, r3
 80a3ab8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a3abc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3ac0:	d06a      	beq.n	80a3b98 <__addsf3+0xec>
 80a3ac2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a3ac6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a3aca:	bfc1      	itttt	gt
 80a3acc:	18d2      	addgt	r2, r2, r3
 80a3ace:	4041      	eorgt	r1, r0
 80a3ad0:	4048      	eorgt	r0, r1
 80a3ad2:	4041      	eorgt	r1, r0
 80a3ad4:	bfb8      	it	lt
 80a3ad6:	425b      	neglt	r3, r3
 80a3ad8:	2b19      	cmp	r3, #25
 80a3ada:	bf88      	it	hi
 80a3adc:	4770      	bxhi	lr
 80a3ade:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a3ae2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3ae6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a3aea:	bf18      	it	ne
 80a3aec:	4240      	negne	r0, r0
 80a3aee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3af2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a3af6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a3afa:	bf18      	it	ne
 80a3afc:	4249      	negne	r1, r1
 80a3afe:	ea92 0f03 	teq	r2, r3
 80a3b02:	d03f      	beq.n	80a3b84 <__addsf3+0xd8>
 80a3b04:	f1a2 0201 	sub.w	r2, r2, #1
 80a3b08:	fa41 fc03 	asr.w	ip, r1, r3
 80a3b0c:	eb10 000c 	adds.w	r0, r0, ip
 80a3b10:	f1c3 0320 	rsb	r3, r3, #32
 80a3b14:	fa01 f103 	lsl.w	r1, r1, r3
 80a3b18:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a3b1c:	d502      	bpl.n	80a3b24 <__addsf3+0x78>
 80a3b1e:	4249      	negs	r1, r1
 80a3b20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a3b24:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a3b28:	d313      	bcc.n	80a3b52 <__addsf3+0xa6>
 80a3b2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a3b2e:	d306      	bcc.n	80a3b3e <__addsf3+0x92>
 80a3b30:	0840      	lsrs	r0, r0, #1
 80a3b32:	ea4f 0131 	mov.w	r1, r1, rrx
 80a3b36:	f102 0201 	add.w	r2, r2, #1
 80a3b3a:	2afe      	cmp	r2, #254	; 0xfe
 80a3b3c:	d251      	bcs.n	80a3be2 <__addsf3+0x136>
 80a3b3e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a3b42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3b46:	bf08      	it	eq
 80a3b48:	f020 0001 	biceq.w	r0, r0, #1
 80a3b4c:	ea40 0003 	orr.w	r0, r0, r3
 80a3b50:	4770      	bx	lr
 80a3b52:	0049      	lsls	r1, r1, #1
 80a3b54:	eb40 0000 	adc.w	r0, r0, r0
 80a3b58:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a3b5c:	f1a2 0201 	sub.w	r2, r2, #1
 80a3b60:	d1ed      	bne.n	80a3b3e <__addsf3+0x92>
 80a3b62:	fab0 fc80 	clz	ip, r0
 80a3b66:	f1ac 0c08 	sub.w	ip, ip, #8
 80a3b6a:	ebb2 020c 	subs.w	r2, r2, ip
 80a3b6e:	fa00 f00c 	lsl.w	r0, r0, ip
 80a3b72:	bfaa      	itet	ge
 80a3b74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a3b78:	4252      	neglt	r2, r2
 80a3b7a:	4318      	orrge	r0, r3
 80a3b7c:	bfbc      	itt	lt
 80a3b7e:	40d0      	lsrlt	r0, r2
 80a3b80:	4318      	orrlt	r0, r3
 80a3b82:	4770      	bx	lr
 80a3b84:	f092 0f00 	teq	r2, #0
 80a3b88:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a3b8c:	bf06      	itte	eq
 80a3b8e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a3b92:	3201      	addeq	r2, #1
 80a3b94:	3b01      	subne	r3, #1
 80a3b96:	e7b5      	b.n	80a3b04 <__addsf3+0x58>
 80a3b98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a3b9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a3ba0:	bf18      	it	ne
 80a3ba2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3ba6:	d021      	beq.n	80a3bec <__addsf3+0x140>
 80a3ba8:	ea92 0f03 	teq	r2, r3
 80a3bac:	d004      	beq.n	80a3bb8 <__addsf3+0x10c>
 80a3bae:	f092 0f00 	teq	r2, #0
 80a3bb2:	bf08      	it	eq
 80a3bb4:	4608      	moveq	r0, r1
 80a3bb6:	4770      	bx	lr
 80a3bb8:	ea90 0f01 	teq	r0, r1
 80a3bbc:	bf1c      	itt	ne
 80a3bbe:	2000      	movne	r0, #0
 80a3bc0:	4770      	bxne	lr
 80a3bc2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a3bc6:	d104      	bne.n	80a3bd2 <__addsf3+0x126>
 80a3bc8:	0040      	lsls	r0, r0, #1
 80a3bca:	bf28      	it	cs
 80a3bcc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a3bd0:	4770      	bx	lr
 80a3bd2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a3bd6:	bf3c      	itt	cc
 80a3bd8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a3bdc:	4770      	bxcc	lr
 80a3bde:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a3be2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a3be6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3bea:	4770      	bx	lr
 80a3bec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a3bf0:	bf16      	itet	ne
 80a3bf2:	4608      	movne	r0, r1
 80a3bf4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a3bf8:	4601      	movne	r1, r0
 80a3bfa:	0242      	lsls	r2, r0, #9
 80a3bfc:	bf06      	itte	eq
 80a3bfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a3c02:	ea90 0f01 	teqeq	r0, r1
 80a3c06:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a3c0a:	4770      	bx	lr

080a3c0c <__aeabi_ui2f>:
 80a3c0c:	f04f 0300 	mov.w	r3, #0
 80a3c10:	e004      	b.n	80a3c1c <__aeabi_i2f+0x8>
 80a3c12:	bf00      	nop

080a3c14 <__aeabi_i2f>:
 80a3c14:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a3c18:	bf48      	it	mi
 80a3c1a:	4240      	negmi	r0, r0
 80a3c1c:	ea5f 0c00 	movs.w	ip, r0
 80a3c20:	bf08      	it	eq
 80a3c22:	4770      	bxeq	lr
 80a3c24:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a3c28:	4601      	mov	r1, r0
 80a3c2a:	f04f 0000 	mov.w	r0, #0
 80a3c2e:	e01c      	b.n	80a3c6a <__aeabi_l2f+0x2a>

080a3c30 <__aeabi_ul2f>:
 80a3c30:	ea50 0201 	orrs.w	r2, r0, r1
 80a3c34:	bf08      	it	eq
 80a3c36:	4770      	bxeq	lr
 80a3c38:	f04f 0300 	mov.w	r3, #0
 80a3c3c:	e00a      	b.n	80a3c54 <__aeabi_l2f+0x14>
 80a3c3e:	bf00      	nop

080a3c40 <__aeabi_l2f>:
 80a3c40:	ea50 0201 	orrs.w	r2, r0, r1
 80a3c44:	bf08      	it	eq
 80a3c46:	4770      	bxeq	lr
 80a3c48:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a3c4c:	d502      	bpl.n	80a3c54 <__aeabi_l2f+0x14>
 80a3c4e:	4240      	negs	r0, r0
 80a3c50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3c54:	ea5f 0c01 	movs.w	ip, r1
 80a3c58:	bf02      	ittt	eq
 80a3c5a:	4684      	moveq	ip, r0
 80a3c5c:	4601      	moveq	r1, r0
 80a3c5e:	2000      	moveq	r0, #0
 80a3c60:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a3c64:	bf08      	it	eq
 80a3c66:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a3c6a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a3c6e:	fabc f28c 	clz	r2, ip
 80a3c72:	3a08      	subs	r2, #8
 80a3c74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a3c78:	db10      	blt.n	80a3c9c <__aeabi_l2f+0x5c>
 80a3c7a:	fa01 fc02 	lsl.w	ip, r1, r2
 80a3c7e:	4463      	add	r3, ip
 80a3c80:	fa00 fc02 	lsl.w	ip, r0, r2
 80a3c84:	f1c2 0220 	rsb	r2, r2, #32
 80a3c88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a3c8c:	fa20 f202 	lsr.w	r2, r0, r2
 80a3c90:	eb43 0002 	adc.w	r0, r3, r2
 80a3c94:	bf08      	it	eq
 80a3c96:	f020 0001 	biceq.w	r0, r0, #1
 80a3c9a:	4770      	bx	lr
 80a3c9c:	f102 0220 	add.w	r2, r2, #32
 80a3ca0:	fa01 fc02 	lsl.w	ip, r1, r2
 80a3ca4:	f1c2 0220 	rsb	r2, r2, #32
 80a3ca8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a3cac:	fa21 f202 	lsr.w	r2, r1, r2
 80a3cb0:	eb43 0002 	adc.w	r0, r3, r2
 80a3cb4:	bf08      	it	eq
 80a3cb6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a3cba:	4770      	bx	lr

080a3cbc <__aeabi_fmul>:
 80a3cbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3cc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a3cc4:	bf1e      	ittt	ne
 80a3cc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a3cca:	ea92 0f0c 	teqne	r2, ip
 80a3cce:	ea93 0f0c 	teqne	r3, ip
 80a3cd2:	d06f      	beq.n	80a3db4 <__aeabi_fmul+0xf8>
 80a3cd4:	441a      	add	r2, r3
 80a3cd6:	ea80 0c01 	eor.w	ip, r0, r1
 80a3cda:	0240      	lsls	r0, r0, #9
 80a3cdc:	bf18      	it	ne
 80a3cde:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a3ce2:	d01e      	beq.n	80a3d22 <__aeabi_fmul+0x66>
 80a3ce4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a3ce8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a3cec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a3cf0:	fba0 3101 	umull	r3, r1, r0, r1
 80a3cf4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a3cf8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a3cfc:	bf3e      	ittt	cc
 80a3cfe:	0049      	lslcc	r1, r1, #1
 80a3d00:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a3d04:	005b      	lslcc	r3, r3, #1
 80a3d06:	ea40 0001 	orr.w	r0, r0, r1
 80a3d0a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a3d0e:	2afd      	cmp	r2, #253	; 0xfd
 80a3d10:	d81d      	bhi.n	80a3d4e <__aeabi_fmul+0x92>
 80a3d12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a3d16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3d1a:	bf08      	it	eq
 80a3d1c:	f020 0001 	biceq.w	r0, r0, #1
 80a3d20:	4770      	bx	lr
 80a3d22:	f090 0f00 	teq	r0, #0
 80a3d26:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a3d2a:	bf08      	it	eq
 80a3d2c:	0249      	lsleq	r1, r1, #9
 80a3d2e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a3d32:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a3d36:	3a7f      	subs	r2, #127	; 0x7f
 80a3d38:	bfc2      	ittt	gt
 80a3d3a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a3d3e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a3d42:	4770      	bxgt	lr
 80a3d44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3d48:	f04f 0300 	mov.w	r3, #0
 80a3d4c:	3a01      	subs	r2, #1
 80a3d4e:	dc5d      	bgt.n	80a3e0c <__aeabi_fmul+0x150>
 80a3d50:	f112 0f19 	cmn.w	r2, #25
 80a3d54:	bfdc      	itt	le
 80a3d56:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a3d5a:	4770      	bxle	lr
 80a3d5c:	f1c2 0200 	rsb	r2, r2, #0
 80a3d60:	0041      	lsls	r1, r0, #1
 80a3d62:	fa21 f102 	lsr.w	r1, r1, r2
 80a3d66:	f1c2 0220 	rsb	r2, r2, #32
 80a3d6a:	fa00 fc02 	lsl.w	ip, r0, r2
 80a3d6e:	ea5f 0031 	movs.w	r0, r1, rrx
 80a3d72:	f140 0000 	adc.w	r0, r0, #0
 80a3d76:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a3d7a:	bf08      	it	eq
 80a3d7c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a3d80:	4770      	bx	lr
 80a3d82:	f092 0f00 	teq	r2, #0
 80a3d86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a3d8a:	bf02      	ittt	eq
 80a3d8c:	0040      	lsleq	r0, r0, #1
 80a3d8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a3d92:	3a01      	subeq	r2, #1
 80a3d94:	d0f9      	beq.n	80a3d8a <__aeabi_fmul+0xce>
 80a3d96:	ea40 000c 	orr.w	r0, r0, ip
 80a3d9a:	f093 0f00 	teq	r3, #0
 80a3d9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a3da2:	bf02      	ittt	eq
 80a3da4:	0049      	lsleq	r1, r1, #1
 80a3da6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a3daa:	3b01      	subeq	r3, #1
 80a3dac:	d0f9      	beq.n	80a3da2 <__aeabi_fmul+0xe6>
 80a3dae:	ea41 010c 	orr.w	r1, r1, ip
 80a3db2:	e78f      	b.n	80a3cd4 <__aeabi_fmul+0x18>
 80a3db4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a3db8:	ea92 0f0c 	teq	r2, ip
 80a3dbc:	bf18      	it	ne
 80a3dbe:	ea93 0f0c 	teqne	r3, ip
 80a3dc2:	d00a      	beq.n	80a3dda <__aeabi_fmul+0x11e>
 80a3dc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a3dc8:	bf18      	it	ne
 80a3dca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a3dce:	d1d8      	bne.n	80a3d82 <__aeabi_fmul+0xc6>
 80a3dd0:	ea80 0001 	eor.w	r0, r0, r1
 80a3dd4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a3dd8:	4770      	bx	lr
 80a3dda:	f090 0f00 	teq	r0, #0
 80a3dde:	bf17      	itett	ne
 80a3de0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a3de4:	4608      	moveq	r0, r1
 80a3de6:	f091 0f00 	teqne	r1, #0
 80a3dea:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a3dee:	d014      	beq.n	80a3e1a <__aeabi_fmul+0x15e>
 80a3df0:	ea92 0f0c 	teq	r2, ip
 80a3df4:	d101      	bne.n	80a3dfa <__aeabi_fmul+0x13e>
 80a3df6:	0242      	lsls	r2, r0, #9
 80a3df8:	d10f      	bne.n	80a3e1a <__aeabi_fmul+0x15e>
 80a3dfa:	ea93 0f0c 	teq	r3, ip
 80a3dfe:	d103      	bne.n	80a3e08 <__aeabi_fmul+0x14c>
 80a3e00:	024b      	lsls	r3, r1, #9
 80a3e02:	bf18      	it	ne
 80a3e04:	4608      	movne	r0, r1
 80a3e06:	d108      	bne.n	80a3e1a <__aeabi_fmul+0x15e>
 80a3e08:	ea80 0001 	eor.w	r0, r0, r1
 80a3e0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a3e10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3e14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3e18:	4770      	bx	lr
 80a3e1a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3e1e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a3e22:	4770      	bx	lr

080a3e24 <__aeabi_fdiv>:
 80a3e24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3e28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a3e2c:	bf1e      	ittt	ne
 80a3e2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a3e32:	ea92 0f0c 	teqne	r2, ip
 80a3e36:	ea93 0f0c 	teqne	r3, ip
 80a3e3a:	d069      	beq.n	80a3f10 <__aeabi_fdiv+0xec>
 80a3e3c:	eba2 0203 	sub.w	r2, r2, r3
 80a3e40:	ea80 0c01 	eor.w	ip, r0, r1
 80a3e44:	0249      	lsls	r1, r1, #9
 80a3e46:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a3e4a:	d037      	beq.n	80a3ebc <__aeabi_fdiv+0x98>
 80a3e4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a3e50:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a3e54:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a3e58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a3e5c:	428b      	cmp	r3, r1
 80a3e5e:	bf38      	it	cc
 80a3e60:	005b      	lslcc	r3, r3, #1
 80a3e62:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a3e66:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a3e6a:	428b      	cmp	r3, r1
 80a3e6c:	bf24      	itt	cs
 80a3e6e:	1a5b      	subcs	r3, r3, r1
 80a3e70:	ea40 000c 	orrcs.w	r0, r0, ip
 80a3e74:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a3e78:	bf24      	itt	cs
 80a3e7a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a3e7e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a3e82:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a3e86:	bf24      	itt	cs
 80a3e88:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a3e8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a3e90:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a3e94:	bf24      	itt	cs
 80a3e96:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a3e9a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a3e9e:	011b      	lsls	r3, r3, #4
 80a3ea0:	bf18      	it	ne
 80a3ea2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a3ea6:	d1e0      	bne.n	80a3e6a <__aeabi_fdiv+0x46>
 80a3ea8:	2afd      	cmp	r2, #253	; 0xfd
 80a3eaa:	f63f af50 	bhi.w	80a3d4e <__aeabi_fmul+0x92>
 80a3eae:	428b      	cmp	r3, r1
 80a3eb0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3eb4:	bf08      	it	eq
 80a3eb6:	f020 0001 	biceq.w	r0, r0, #1
 80a3eba:	4770      	bx	lr
 80a3ebc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a3ec0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a3ec4:	327f      	adds	r2, #127	; 0x7f
 80a3ec6:	bfc2      	ittt	gt
 80a3ec8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a3ecc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a3ed0:	4770      	bxgt	lr
 80a3ed2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3ed6:	f04f 0300 	mov.w	r3, #0
 80a3eda:	3a01      	subs	r2, #1
 80a3edc:	e737      	b.n	80a3d4e <__aeabi_fmul+0x92>
 80a3ede:	f092 0f00 	teq	r2, #0
 80a3ee2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a3ee6:	bf02      	ittt	eq
 80a3ee8:	0040      	lsleq	r0, r0, #1
 80a3eea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a3eee:	3a01      	subeq	r2, #1
 80a3ef0:	d0f9      	beq.n	80a3ee6 <__aeabi_fdiv+0xc2>
 80a3ef2:	ea40 000c 	orr.w	r0, r0, ip
 80a3ef6:	f093 0f00 	teq	r3, #0
 80a3efa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a3efe:	bf02      	ittt	eq
 80a3f00:	0049      	lsleq	r1, r1, #1
 80a3f02:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a3f06:	3b01      	subeq	r3, #1
 80a3f08:	d0f9      	beq.n	80a3efe <__aeabi_fdiv+0xda>
 80a3f0a:	ea41 010c 	orr.w	r1, r1, ip
 80a3f0e:	e795      	b.n	80a3e3c <__aeabi_fdiv+0x18>
 80a3f10:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a3f14:	ea92 0f0c 	teq	r2, ip
 80a3f18:	d108      	bne.n	80a3f2c <__aeabi_fdiv+0x108>
 80a3f1a:	0242      	lsls	r2, r0, #9
 80a3f1c:	f47f af7d 	bne.w	80a3e1a <__aeabi_fmul+0x15e>
 80a3f20:	ea93 0f0c 	teq	r3, ip
 80a3f24:	f47f af70 	bne.w	80a3e08 <__aeabi_fmul+0x14c>
 80a3f28:	4608      	mov	r0, r1
 80a3f2a:	e776      	b.n	80a3e1a <__aeabi_fmul+0x15e>
 80a3f2c:	ea93 0f0c 	teq	r3, ip
 80a3f30:	d104      	bne.n	80a3f3c <__aeabi_fdiv+0x118>
 80a3f32:	024b      	lsls	r3, r1, #9
 80a3f34:	f43f af4c 	beq.w	80a3dd0 <__aeabi_fmul+0x114>
 80a3f38:	4608      	mov	r0, r1
 80a3f3a:	e76e      	b.n	80a3e1a <__aeabi_fmul+0x15e>
 80a3f3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a3f40:	bf18      	it	ne
 80a3f42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a3f46:	d1ca      	bne.n	80a3ede <__aeabi_fdiv+0xba>
 80a3f48:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a3f4c:	f47f af5c 	bne.w	80a3e08 <__aeabi_fmul+0x14c>
 80a3f50:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a3f54:	f47f af3c 	bne.w	80a3dd0 <__aeabi_fmul+0x114>
 80a3f58:	e75f      	b.n	80a3e1a <__aeabi_fmul+0x15e>
 80a3f5a:	bf00      	nop

080a3f5c <__gesf2>:
 80a3f5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a3f60:	e006      	b.n	80a3f70 <__cmpsf2+0x4>
 80a3f62:	bf00      	nop

080a3f64 <__lesf2>:
 80a3f64:	f04f 0c01 	mov.w	ip, #1
 80a3f68:	e002      	b.n	80a3f70 <__cmpsf2+0x4>
 80a3f6a:	bf00      	nop

080a3f6c <__cmpsf2>:
 80a3f6c:	f04f 0c01 	mov.w	ip, #1
 80a3f70:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a3f74:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a3f78:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a3f7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a3f80:	bf18      	it	ne
 80a3f82:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3f86:	d011      	beq.n	80a3fac <__cmpsf2+0x40>
 80a3f88:	b001      	add	sp, #4
 80a3f8a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a3f8e:	bf18      	it	ne
 80a3f90:	ea90 0f01 	teqne	r0, r1
 80a3f94:	bf58      	it	pl
 80a3f96:	ebb2 0003 	subspl.w	r0, r2, r3
 80a3f9a:	bf88      	it	hi
 80a3f9c:	17c8      	asrhi	r0, r1, #31
 80a3f9e:	bf38      	it	cc
 80a3fa0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a3fa4:	bf18      	it	ne
 80a3fa6:	f040 0001 	orrne.w	r0, r0, #1
 80a3faa:	4770      	bx	lr
 80a3fac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a3fb0:	d102      	bne.n	80a3fb8 <__cmpsf2+0x4c>
 80a3fb2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a3fb6:	d105      	bne.n	80a3fc4 <__cmpsf2+0x58>
 80a3fb8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a3fbc:	d1e4      	bne.n	80a3f88 <__cmpsf2+0x1c>
 80a3fbe:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a3fc2:	d0e1      	beq.n	80a3f88 <__cmpsf2+0x1c>
 80a3fc4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a3fc8:	4770      	bx	lr
 80a3fca:	bf00      	nop

080a3fcc <__aeabi_cfrcmple>:
 80a3fcc:	4684      	mov	ip, r0
 80a3fce:	4608      	mov	r0, r1
 80a3fd0:	4661      	mov	r1, ip
 80a3fd2:	e7ff      	b.n	80a3fd4 <__aeabi_cfcmpeq>

080a3fd4 <__aeabi_cfcmpeq>:
 80a3fd4:	b50f      	push	{r0, r1, r2, r3, lr}
 80a3fd6:	f7ff ffc9 	bl	80a3f6c <__cmpsf2>
 80a3fda:	2800      	cmp	r0, #0
 80a3fdc:	bf48      	it	mi
 80a3fde:	f110 0f00 	cmnmi.w	r0, #0
 80a3fe2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a3fe4 <__aeabi_fcmpeq>:
 80a3fe4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3fe8:	f7ff fff4 	bl	80a3fd4 <__aeabi_cfcmpeq>
 80a3fec:	bf0c      	ite	eq
 80a3fee:	2001      	moveq	r0, #1
 80a3ff0:	2000      	movne	r0, #0
 80a3ff2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3ff6:	bf00      	nop

080a3ff8 <__aeabi_fcmplt>:
 80a3ff8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3ffc:	f7ff ffea 	bl	80a3fd4 <__aeabi_cfcmpeq>
 80a4000:	bf34      	ite	cc
 80a4002:	2001      	movcc	r0, #1
 80a4004:	2000      	movcs	r0, #0
 80a4006:	f85d fb08 	ldr.w	pc, [sp], #8
 80a400a:	bf00      	nop

080a400c <__aeabi_fcmple>:
 80a400c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4010:	f7ff ffe0 	bl	80a3fd4 <__aeabi_cfcmpeq>
 80a4014:	bf94      	ite	ls
 80a4016:	2001      	movls	r0, #1
 80a4018:	2000      	movhi	r0, #0
 80a401a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a401e:	bf00      	nop

080a4020 <__aeabi_fcmpge>:
 80a4020:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4024:	f7ff ffd2 	bl	80a3fcc <__aeabi_cfrcmple>
 80a4028:	bf94      	ite	ls
 80a402a:	2001      	movls	r0, #1
 80a402c:	2000      	movhi	r0, #0
 80a402e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4032:	bf00      	nop

080a4034 <__aeabi_fcmpgt>:
 80a4034:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4038:	f7ff ffc8 	bl	80a3fcc <__aeabi_cfrcmple>
 80a403c:	bf34      	ite	cc
 80a403e:	2001      	movcc	r0, #1
 80a4040:	2000      	movcs	r0, #0
 80a4042:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4046:	bf00      	nop

080a4048 <__aeabi_f2iz>:
 80a4048:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a404c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a4050:	d30f      	bcc.n	80a4072 <__aeabi_f2iz+0x2a>
 80a4052:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a4056:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a405a:	d90d      	bls.n	80a4078 <__aeabi_f2iz+0x30>
 80a405c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a4060:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a4064:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a4068:	fa23 f002 	lsr.w	r0, r3, r2
 80a406c:	bf18      	it	ne
 80a406e:	4240      	negne	r0, r0
 80a4070:	4770      	bx	lr
 80a4072:	f04f 0000 	mov.w	r0, #0
 80a4076:	4770      	bx	lr
 80a4078:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a407c:	d101      	bne.n	80a4082 <__aeabi_f2iz+0x3a>
 80a407e:	0242      	lsls	r2, r0, #9
 80a4080:	d105      	bne.n	80a408e <__aeabi_f2iz+0x46>
 80a4082:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a4086:	bf08      	it	eq
 80a4088:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a408c:	4770      	bx	lr
 80a408e:	f04f 0000 	mov.w	r0, #0
 80a4092:	4770      	bx	lr

080a4094 <asctime>:
 80a4094:	4b09      	ldr	r3, [pc, #36]	; (80a40bc <asctime+0x28>)
 80a4096:	b570      	push	{r4, r5, r6, lr}
 80a4098:	681c      	ldr	r4, [r3, #0]
 80a409a:	4606      	mov	r6, r0
 80a409c:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80a409e:	b93d      	cbnz	r5, 80a40b0 <asctime+0x1c>
 80a40a0:	201a      	movs	r0, #26
 80a40a2:	f7fd fc7b 	bl	80a199c <malloc>
 80a40a6:	221a      	movs	r2, #26
 80a40a8:	6420      	str	r0, [r4, #64]	; 0x40
 80a40aa:	4629      	mov	r1, r5
 80a40ac:	f000 f947 	bl	80a433e <memset>
 80a40b0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80a40b2:	4630      	mov	r0, r6
 80a40b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a40b8:	f000 b802 	b.w	80a40c0 <asctime_r>
 80a40bc:	200003d8 	.word	0x200003d8

080a40c0 <asctime_r>:
 80a40c0:	b510      	push	{r4, lr}
 80a40c2:	460c      	mov	r4, r1
 80a40c4:	6941      	ldr	r1, [r0, #20]
 80a40c6:	b086      	sub	sp, #24
 80a40c8:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80a40cc:	6903      	ldr	r3, [r0, #16]
 80a40ce:	6982      	ldr	r2, [r0, #24]
 80a40d0:	9104      	str	r1, [sp, #16]
 80a40d2:	6801      	ldr	r1, [r0, #0]
 80a40d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80a40d8:	9103      	str	r1, [sp, #12]
 80a40da:	6841      	ldr	r1, [r0, #4]
 80a40dc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80a40e0:	9102      	str	r1, [sp, #8]
 80a40e2:	6881      	ldr	r1, [r0, #8]
 80a40e4:	9101      	str	r1, [sp, #4]
 80a40e6:	68c1      	ldr	r1, [r0, #12]
 80a40e8:	4620      	mov	r0, r4
 80a40ea:	9100      	str	r1, [sp, #0]
 80a40ec:	4904      	ldr	r1, [pc, #16]	; (80a4100 <asctime_r+0x40>)
 80a40ee:	440b      	add	r3, r1
 80a40f0:	4904      	ldr	r1, [pc, #16]	; (80a4104 <asctime_r+0x44>)
 80a40f2:	440a      	add	r2, r1
 80a40f4:	4904      	ldr	r1, [pc, #16]	; (80a4108 <asctime_r+0x48>)
 80a40f6:	f7fd fc71 	bl	80a19dc <siprintf>
 80a40fa:	4620      	mov	r0, r4
 80a40fc:	b006      	add	sp, #24
 80a40fe:	bd10      	pop	{r4, pc}
 80a4100:	080a6db5 	.word	0x080a6db5
 80a4104:	080a6da0 	.word	0x080a6da0
 80a4108:	080a6dd9 	.word	0x080a6dd9

080a410c <atoi>:
 80a410c:	220a      	movs	r2, #10
 80a410e:	2100      	movs	r1, #0
 80a4110:	f001 b866 	b.w	80a51e0 <strtol>

080a4114 <__cxa_atexit>:
 80a4114:	b510      	push	{r4, lr}
 80a4116:	4c05      	ldr	r4, [pc, #20]	; (80a412c <__cxa_atexit+0x18>)
 80a4118:	4613      	mov	r3, r2
 80a411a:	b12c      	cbz	r4, 80a4128 <__cxa_atexit+0x14>
 80a411c:	460a      	mov	r2, r1
 80a411e:	4601      	mov	r1, r0
 80a4120:	2002      	movs	r0, #2
 80a4122:	f3af 8000 	nop.w
 80a4126:	bd10      	pop	{r4, pc}
 80a4128:	4620      	mov	r0, r4
 80a412a:	bd10      	pop	{r4, pc}
 80a412c:	00000000 	.word	0x00000000

080a4130 <localtime>:
 80a4130:	b538      	push	{r3, r4, r5, lr}
 80a4132:	4b07      	ldr	r3, [pc, #28]	; (80a4150 <localtime+0x20>)
 80a4134:	4605      	mov	r5, r0
 80a4136:	681c      	ldr	r4, [r3, #0]
 80a4138:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a413a:	b91b      	cbnz	r3, 80a4144 <localtime+0x14>
 80a413c:	2024      	movs	r0, #36	; 0x24
 80a413e:	f7fd fc2d 	bl	80a199c <malloc>
 80a4142:	63e0      	str	r0, [r4, #60]	; 0x3c
 80a4144:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a4146:	4628      	mov	r0, r5
 80a4148:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a414c:	f000 b802 	b.w	80a4154 <localtime_r>
 80a4150:	200003d8 	.word	0x200003d8

080a4154 <localtime_r>:
 80a4154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a4158:	460c      	mov	r4, r1
 80a415a:	4680      	mov	r8, r0
 80a415c:	f001 fe64 	bl	80a5e28 <__gettzinfo>
 80a4160:	4621      	mov	r1, r4
 80a4162:	4607      	mov	r7, r0
 80a4164:	4640      	mov	r0, r8
 80a4166:	f001 fe63 	bl	80a5e30 <gmtime_r>
 80a416a:	6946      	ldr	r6, [r0, #20]
 80a416c:	4604      	mov	r4, r0
 80a416e:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80a4172:	07b3      	lsls	r3, r6, #30
 80a4174:	d105      	bne.n	80a4182 <localtime_r+0x2e>
 80a4176:	2264      	movs	r2, #100	; 0x64
 80a4178:	fb96 f3f2 	sdiv	r3, r6, r2
 80a417c:	fb02 6313 	mls	r3, r2, r3, r6
 80a4180:	b94b      	cbnz	r3, 80a4196 <localtime_r+0x42>
 80a4182:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80a4186:	fb96 f3f5 	sdiv	r3, r6, r5
 80a418a:	fb05 6513 	mls	r5, r5, r3, r6
 80a418e:	fab5 f385 	clz	r3, r5
 80a4192:	095b      	lsrs	r3, r3, #5
 80a4194:	e000      	b.n	80a4198 <localtime_r+0x44>
 80a4196:	2301      	movs	r3, #1
 80a4198:	4a5f      	ldr	r2, [pc, #380]	; (80a4318 <localtime_r+0x1c4>)
 80a419a:	2530      	movs	r5, #48	; 0x30
 80a419c:	fb05 2503 	mla	r5, r5, r3, r2
 80a41a0:	f001 f958 	bl	80a5454 <__tz_lock>
 80a41a4:	f001 f958 	bl	80a5458 <_tzset_unlocked>
 80a41a8:	4b5c      	ldr	r3, [pc, #368]	; (80a431c <localtime_r+0x1c8>)
 80a41aa:	681b      	ldr	r3, [r3, #0]
 80a41ac:	b1f3      	cbz	r3, 80a41ec <localtime_r+0x98>
 80a41ae:	687b      	ldr	r3, [r7, #4]
 80a41b0:	429e      	cmp	r6, r3
 80a41b2:	d105      	bne.n	80a41c0 <localtime_r+0x6c>
 80a41b4:	6839      	ldr	r1, [r7, #0]
 80a41b6:	f8d8 3000 	ldr.w	r3, [r8]
 80a41ba:	69fa      	ldr	r2, [r7, #28]
 80a41bc:	b941      	cbnz	r1, 80a41d0 <localtime_r+0x7c>
 80a41be:	e00a      	b.n	80a41d6 <localtime_r+0x82>
 80a41c0:	4630      	mov	r0, r6
 80a41c2:	f001 f89f 	bl	80a5304 <__tzcalc_limits>
 80a41c6:	2800      	cmp	r0, #0
 80a41c8:	d1f4      	bne.n	80a41b4 <localtime_r+0x60>
 80a41ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a41ce:	e00d      	b.n	80a41ec <localtime_r+0x98>
 80a41d0:	4293      	cmp	r3, r2
 80a41d2:	db08      	blt.n	80a41e6 <localtime_r+0x92>
 80a41d4:	e001      	b.n	80a41da <localtime_r+0x86>
 80a41d6:	4293      	cmp	r3, r2
 80a41d8:	da07      	bge.n	80a41ea <localtime_r+0x96>
 80a41da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80a41dc:	4293      	cmp	r3, r2
 80a41de:	bfac      	ite	ge
 80a41e0:	2300      	movge	r3, #0
 80a41e2:	2301      	movlt	r3, #1
 80a41e4:	e002      	b.n	80a41ec <localtime_r+0x98>
 80a41e6:	2300      	movs	r3, #0
 80a41e8:	e000      	b.n	80a41ec <localtime_r+0x98>
 80a41ea:	2301      	movs	r3, #1
 80a41ec:	6223      	str	r3, [r4, #32]
 80a41ee:	6a23      	ldr	r3, [r4, #32]
 80a41f0:	203c      	movs	r0, #60	; 0x3c
 80a41f2:	2b01      	cmp	r3, #1
 80a41f4:	bf0c      	ite	eq
 80a41f6:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 80a41f8:	6a39      	ldrne	r1, [r7, #32]
 80a41fa:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a41fe:	fb91 f6f3 	sdiv	r6, r1, r3
 80a4202:	fb03 1316 	mls	r3, r3, r6, r1
 80a4206:	fb93 f2f0 	sdiv	r2, r3, r0
 80a420a:	fb00 3012 	mls	r0, r0, r2, r3
 80a420e:	6861      	ldr	r1, [r4, #4]
 80a4210:	6823      	ldr	r3, [r4, #0]
 80a4212:	1a89      	subs	r1, r1, r2
 80a4214:	68a2      	ldr	r2, [r4, #8]
 80a4216:	1a1b      	subs	r3, r3, r0
 80a4218:	1b92      	subs	r2, r2, r6
 80a421a:	2b3b      	cmp	r3, #59	; 0x3b
 80a421c:	6023      	str	r3, [r4, #0]
 80a421e:	6061      	str	r1, [r4, #4]
 80a4220:	60a2      	str	r2, [r4, #8]
 80a4222:	dd03      	ble.n	80a422c <localtime_r+0xd8>
 80a4224:	3101      	adds	r1, #1
 80a4226:	6061      	str	r1, [r4, #4]
 80a4228:	3b3c      	subs	r3, #60	; 0x3c
 80a422a:	e004      	b.n	80a4236 <localtime_r+0xe2>
 80a422c:	2b00      	cmp	r3, #0
 80a422e:	da03      	bge.n	80a4238 <localtime_r+0xe4>
 80a4230:	3901      	subs	r1, #1
 80a4232:	6061      	str	r1, [r4, #4]
 80a4234:	333c      	adds	r3, #60	; 0x3c
 80a4236:	6023      	str	r3, [r4, #0]
 80a4238:	6863      	ldr	r3, [r4, #4]
 80a423a:	2b3b      	cmp	r3, #59	; 0x3b
 80a423c:	dd03      	ble.n	80a4246 <localtime_r+0xf2>
 80a423e:	3201      	adds	r2, #1
 80a4240:	60a2      	str	r2, [r4, #8]
 80a4242:	3b3c      	subs	r3, #60	; 0x3c
 80a4244:	e004      	b.n	80a4250 <localtime_r+0xfc>
 80a4246:	2b00      	cmp	r3, #0
 80a4248:	da03      	bge.n	80a4252 <localtime_r+0xfe>
 80a424a:	3a01      	subs	r2, #1
 80a424c:	60a2      	str	r2, [r4, #8]
 80a424e:	333c      	adds	r3, #60	; 0x3c
 80a4250:	6063      	str	r3, [r4, #4]
 80a4252:	68a3      	ldr	r3, [r4, #8]
 80a4254:	2b17      	cmp	r3, #23
 80a4256:	dd22      	ble.n	80a429e <localtime_r+0x14a>
 80a4258:	69e2      	ldr	r2, [r4, #28]
 80a425a:	3b18      	subs	r3, #24
 80a425c:	3201      	adds	r2, #1
 80a425e:	61e2      	str	r2, [r4, #28]
 80a4260:	69a2      	ldr	r2, [r4, #24]
 80a4262:	60a3      	str	r3, [r4, #8]
 80a4264:	3201      	adds	r2, #1
 80a4266:	2a06      	cmp	r2, #6
 80a4268:	bfc8      	it	gt
 80a426a:	2200      	movgt	r2, #0
 80a426c:	61a2      	str	r2, [r4, #24]
 80a426e:	68e2      	ldr	r2, [r4, #12]
 80a4270:	6923      	ldr	r3, [r4, #16]
 80a4272:	3201      	adds	r2, #1
 80a4274:	60e2      	str	r2, [r4, #12]
 80a4276:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80a427a:	428a      	cmp	r2, r1
 80a427c:	dd46      	ble.n	80a430c <localtime_r+0x1b8>
 80a427e:	3301      	adds	r3, #1
 80a4280:	2b0c      	cmp	r3, #12
 80a4282:	bf08      	it	eq
 80a4284:	6963      	ldreq	r3, [r4, #20]
 80a4286:	eba2 0201 	sub.w	r2, r2, r1
 80a428a:	60e2      	str	r2, [r4, #12]
 80a428c:	bf05      	ittet	eq
 80a428e:	3301      	addeq	r3, #1
 80a4290:	2200      	moveq	r2, #0
 80a4292:	6123      	strne	r3, [r4, #16]
 80a4294:	6122      	streq	r2, [r4, #16]
 80a4296:	bf04      	itt	eq
 80a4298:	6163      	streq	r3, [r4, #20]
 80a429a:	61e2      	streq	r2, [r4, #28]
 80a429c:	e036      	b.n	80a430c <localtime_r+0x1b8>
 80a429e:	2b00      	cmp	r3, #0
 80a42a0:	da34      	bge.n	80a430c <localtime_r+0x1b8>
 80a42a2:	69e2      	ldr	r2, [r4, #28]
 80a42a4:	3318      	adds	r3, #24
 80a42a6:	3a01      	subs	r2, #1
 80a42a8:	61e2      	str	r2, [r4, #28]
 80a42aa:	69a2      	ldr	r2, [r4, #24]
 80a42ac:	60a3      	str	r3, [r4, #8]
 80a42ae:	3a01      	subs	r2, #1
 80a42b0:	bf48      	it	mi
 80a42b2:	2206      	movmi	r2, #6
 80a42b4:	61a2      	str	r2, [r4, #24]
 80a42b6:	68e2      	ldr	r2, [r4, #12]
 80a42b8:	3a01      	subs	r2, #1
 80a42ba:	60e2      	str	r2, [r4, #12]
 80a42bc:	bb32      	cbnz	r2, 80a430c <localtime_r+0x1b8>
 80a42be:	6923      	ldr	r3, [r4, #16]
 80a42c0:	3b01      	subs	r3, #1
 80a42c2:	d401      	bmi.n	80a42c8 <localtime_r+0x174>
 80a42c4:	6123      	str	r3, [r4, #16]
 80a42c6:	e01d      	b.n	80a4304 <localtime_r+0x1b0>
 80a42c8:	230b      	movs	r3, #11
 80a42ca:	6123      	str	r3, [r4, #16]
 80a42cc:	6963      	ldr	r3, [r4, #20]
 80a42ce:	1e5a      	subs	r2, r3, #1
 80a42d0:	f012 0f03 	tst.w	r2, #3
 80a42d4:	6162      	str	r2, [r4, #20]
 80a42d6:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80a42da:	d105      	bne.n	80a42e8 <localtime_r+0x194>
 80a42dc:	2164      	movs	r1, #100	; 0x64
 80a42de:	fb93 f2f1 	sdiv	r2, r3, r1
 80a42e2:	fb01 3212 	mls	r2, r1, r2, r3
 80a42e6:	b94a      	cbnz	r2, 80a42fc <localtime_r+0x1a8>
 80a42e8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a42ec:	fb93 f2f1 	sdiv	r2, r3, r1
 80a42f0:	fb01 3312 	mls	r3, r1, r2, r3
 80a42f4:	fab3 f383 	clz	r3, r3
 80a42f8:	095b      	lsrs	r3, r3, #5
 80a42fa:	e000      	b.n	80a42fe <localtime_r+0x1aa>
 80a42fc:	2301      	movs	r3, #1
 80a42fe:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a4302:	61e3      	str	r3, [r4, #28]
 80a4304:	6923      	ldr	r3, [r4, #16]
 80a4306:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80a430a:	60e3      	str	r3, [r4, #12]
 80a430c:	f001 f8a3 	bl	80a5456 <__tz_unlock>
 80a4310:	4620      	mov	r0, r4
 80a4312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a4316:	bf00      	nop
 80a4318:	080a6f68 	.word	0x080a6f68
 80a431c:	20000b00 	.word	0x20000b00

080a4320 <_localeconv_r>:
 80a4320:	4800      	ldr	r0, [pc, #0]	; (80a4324 <_localeconv_r+0x4>)
 80a4322:	4770      	bx	lr
 80a4324:	200003dc 	.word	0x200003dc

080a4328 <memcpy>:
 80a4328:	b510      	push	{r4, lr}
 80a432a:	1e43      	subs	r3, r0, #1
 80a432c:	440a      	add	r2, r1
 80a432e:	4291      	cmp	r1, r2
 80a4330:	d004      	beq.n	80a433c <memcpy+0x14>
 80a4332:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a4336:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a433a:	e7f8      	b.n	80a432e <memcpy+0x6>
 80a433c:	bd10      	pop	{r4, pc}

080a433e <memset>:
 80a433e:	4603      	mov	r3, r0
 80a4340:	4402      	add	r2, r0
 80a4342:	4293      	cmp	r3, r2
 80a4344:	d002      	beq.n	80a434c <memset+0xe>
 80a4346:	f803 1b01 	strb.w	r1, [r3], #1
 80a434a:	e7fa      	b.n	80a4342 <memset+0x4>
 80a434c:	4770      	bx	lr
	...

080a4350 <srand>:
 80a4350:	b538      	push	{r3, r4, r5, lr}
 80a4352:	4b12      	ldr	r3, [pc, #72]	; (80a439c <srand+0x4c>)
 80a4354:	4605      	mov	r5, r0
 80a4356:	681c      	ldr	r4, [r3, #0]
 80a4358:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a435a:	b9d3      	cbnz	r3, 80a4392 <srand+0x42>
 80a435c:	2018      	movs	r0, #24
 80a435e:	f7fd fb1d 	bl	80a199c <malloc>
 80a4362:	f243 330e 	movw	r3, #13070	; 0x330e
 80a4366:	63a0      	str	r0, [r4, #56]	; 0x38
 80a4368:	8003      	strh	r3, [r0, #0]
 80a436a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a436e:	8043      	strh	r3, [r0, #2]
 80a4370:	f241 2334 	movw	r3, #4660	; 0x1234
 80a4374:	8083      	strh	r3, [r0, #4]
 80a4376:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a437a:	80c3      	strh	r3, [r0, #6]
 80a437c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a4380:	8103      	strh	r3, [r0, #8]
 80a4382:	2305      	movs	r3, #5
 80a4384:	8143      	strh	r3, [r0, #10]
 80a4386:	230b      	movs	r3, #11
 80a4388:	8183      	strh	r3, [r0, #12]
 80a438a:	2201      	movs	r2, #1
 80a438c:	2300      	movs	r3, #0
 80a438e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a4392:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a4394:	2200      	movs	r2, #0
 80a4396:	611d      	str	r5, [r3, #16]
 80a4398:	615a      	str	r2, [r3, #20]
 80a439a:	bd38      	pop	{r3, r4, r5, pc}
 80a439c:	200003d8 	.word	0x200003d8

080a43a0 <strcmp>:
 80a43a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a43a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a43a8:	2a01      	cmp	r2, #1
 80a43aa:	bf28      	it	cs
 80a43ac:	429a      	cmpcs	r2, r3
 80a43ae:	d0f7      	beq.n	80a43a0 <strcmp>
 80a43b0:	1ad0      	subs	r0, r2, r3
 80a43b2:	4770      	bx	lr

080a43b4 <strcpy>:
 80a43b4:	4603      	mov	r3, r0
 80a43b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a43ba:	f803 2b01 	strb.w	r2, [r3], #1
 80a43be:	2a00      	cmp	r2, #0
 80a43c0:	d1f9      	bne.n	80a43b6 <strcpy+0x2>
 80a43c2:	4770      	bx	lr

080a43c4 <strdup>:
 80a43c4:	4b02      	ldr	r3, [pc, #8]	; (80a43d0 <strdup+0xc>)
 80a43c6:	4601      	mov	r1, r0
 80a43c8:	6818      	ldr	r0, [r3, #0]
 80a43ca:	f000 b803 	b.w	80a43d4 <_strdup_r>
 80a43ce:	bf00      	nop
 80a43d0:	200003d8 	.word	0x200003d8

080a43d4 <_strdup_r>:
 80a43d4:	b570      	push	{r4, r5, r6, lr}
 80a43d6:	4606      	mov	r6, r0
 80a43d8:	4608      	mov	r0, r1
 80a43da:	460c      	mov	r4, r1
 80a43dc:	f000 f80d 	bl	80a43fa <strlen>
 80a43e0:	1c45      	adds	r5, r0, #1
 80a43e2:	4629      	mov	r1, r5
 80a43e4:	4630      	mov	r0, r6
 80a43e6:	f7fd fb19 	bl	80a1a1c <_malloc_r>
 80a43ea:	4606      	mov	r6, r0
 80a43ec:	b118      	cbz	r0, 80a43f6 <_strdup_r+0x22>
 80a43ee:	462a      	mov	r2, r5
 80a43f0:	4621      	mov	r1, r4
 80a43f2:	f7ff ff99 	bl	80a4328 <memcpy>
 80a43f6:	4630      	mov	r0, r6
 80a43f8:	bd70      	pop	{r4, r5, r6, pc}

080a43fa <strlen>:
 80a43fa:	4603      	mov	r3, r0
 80a43fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a4400:	2a00      	cmp	r2, #0
 80a4402:	d1fb      	bne.n	80a43fc <strlen+0x2>
 80a4404:	1a18      	subs	r0, r3, r0
 80a4406:	3801      	subs	r0, #1
 80a4408:	4770      	bx	lr

080a440a <strncmp>:
 80a440a:	b530      	push	{r4, r5, lr}
 80a440c:	b182      	cbz	r2, 80a4430 <strncmp+0x26>
 80a440e:	1e45      	subs	r5, r0, #1
 80a4410:	3901      	subs	r1, #1
 80a4412:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80a4416:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a441a:	42a3      	cmp	r3, r4
 80a441c:	d106      	bne.n	80a442c <strncmp+0x22>
 80a441e:	43ec      	mvns	r4, r5
 80a4420:	4414      	add	r4, r2
 80a4422:	42e0      	cmn	r0, r4
 80a4424:	d001      	beq.n	80a442a <strncmp+0x20>
 80a4426:	2b00      	cmp	r3, #0
 80a4428:	d1f3      	bne.n	80a4412 <strncmp+0x8>
 80a442a:	461c      	mov	r4, r3
 80a442c:	1b18      	subs	r0, r3, r4
 80a442e:	bd30      	pop	{r4, r5, pc}
 80a4430:	4610      	mov	r0, r2
 80a4432:	bd30      	pop	{r4, r5, pc}

080a4434 <strncpy>:
 80a4434:	4603      	mov	r3, r0
 80a4436:	b510      	push	{r4, lr}
 80a4438:	b142      	cbz	r2, 80a444c <strncpy+0x18>
 80a443a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a443e:	3a01      	subs	r2, #1
 80a4440:	f803 4b01 	strb.w	r4, [r3], #1
 80a4444:	2c00      	cmp	r4, #0
 80a4446:	d1f7      	bne.n	80a4438 <strncpy+0x4>
 80a4448:	441a      	add	r2, r3
 80a444a:	e000      	b.n	80a444e <strncpy+0x1a>
 80a444c:	bd10      	pop	{r4, pc}
 80a444e:	4293      	cmp	r3, r2
 80a4450:	d002      	beq.n	80a4458 <strncpy+0x24>
 80a4452:	f803 4b01 	strb.w	r4, [r3], #1
 80a4456:	e7fa      	b.n	80a444e <strncpy+0x1a>
 80a4458:	bd10      	pop	{r4, pc}

080a445a <sulp>:
 80a445a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a445e:	460f      	mov	r7, r1
 80a4460:	4690      	mov	r8, r2
 80a4462:	f002 f841 	bl	80a64e8 <__ulp>
 80a4466:	4604      	mov	r4, r0
 80a4468:	460d      	mov	r5, r1
 80a446a:	f1b8 0f00 	cmp.w	r8, #0
 80a446e:	d011      	beq.n	80a4494 <sulp+0x3a>
 80a4470:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80a4474:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a4478:	2b00      	cmp	r3, #0
 80a447a:	dd0b      	ble.n	80a4494 <sulp+0x3a>
 80a447c:	051b      	lsls	r3, r3, #20
 80a447e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80a4482:	2400      	movs	r4, #0
 80a4484:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80a4488:	4622      	mov	r2, r4
 80a448a:	462b      	mov	r3, r5
 80a448c:	f7fe ffc0 	bl	80a3410 <__aeabi_dmul>
 80a4490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a4494:	4620      	mov	r0, r4
 80a4496:	4629      	mov	r1, r5
 80a4498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a449c:	0000      	movs	r0, r0
	...

080a44a0 <_strtod_r>:
 80a44a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a44a4:	4682      	mov	sl, r0
 80a44a6:	460c      	mov	r4, r1
 80a44a8:	b09d      	sub	sp, #116	; 0x74
 80a44aa:	2300      	movs	r3, #0
 80a44ac:	9213      	str	r2, [sp, #76]	; 0x4c
 80a44ae:	9318      	str	r3, [sp, #96]	; 0x60
 80a44b0:	f04f 0800 	mov.w	r8, #0
 80a44b4:	f04f 0900 	mov.w	r9, #0
 80a44b8:	9117      	str	r1, [sp, #92]	; 0x5c
 80a44ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a44bc:	781a      	ldrb	r2, [r3, #0]
 80a44be:	2a0d      	cmp	r2, #13
 80a44c0:	d805      	bhi.n	80a44ce <_strtod_r+0x2e>
 80a44c2:	2a09      	cmp	r2, #9
 80a44c4:	d213      	bcs.n	80a44ee <_strtod_r+0x4e>
 80a44c6:	2a00      	cmp	r2, #0
 80a44c8:	f000 81ad 	beq.w	80a4826 <_strtod_r+0x386>
 80a44cc:	e012      	b.n	80a44f4 <_strtod_r+0x54>
 80a44ce:	2a2b      	cmp	r2, #43	; 0x2b
 80a44d0:	d004      	beq.n	80a44dc <_strtod_r+0x3c>
 80a44d2:	2a2d      	cmp	r2, #45	; 0x2d
 80a44d4:	d004      	beq.n	80a44e0 <_strtod_r+0x40>
 80a44d6:	2a20      	cmp	r2, #32
 80a44d8:	d10c      	bne.n	80a44f4 <_strtod_r+0x54>
 80a44da:	e008      	b.n	80a44ee <_strtod_r+0x4e>
 80a44dc:	2200      	movs	r2, #0
 80a44de:	e000      	b.n	80a44e2 <_strtod_r+0x42>
 80a44e0:	2201      	movs	r2, #1
 80a44e2:	920c      	str	r2, [sp, #48]	; 0x30
 80a44e4:	1c5a      	adds	r2, r3, #1
 80a44e6:	9217      	str	r2, [sp, #92]	; 0x5c
 80a44e8:	785b      	ldrb	r3, [r3, #1]
 80a44ea:	b92b      	cbnz	r3, 80a44f8 <_strtod_r+0x58>
 80a44ec:	e19b      	b.n	80a4826 <_strtod_r+0x386>
 80a44ee:	3301      	adds	r3, #1
 80a44f0:	9317      	str	r3, [sp, #92]	; 0x5c
 80a44f2:	e7e2      	b.n	80a44ba <_strtod_r+0x1a>
 80a44f4:	2300      	movs	r3, #0
 80a44f6:	930c      	str	r3, [sp, #48]	; 0x30
 80a44f8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80a44fa:	782b      	ldrb	r3, [r5, #0]
 80a44fc:	2b30      	cmp	r3, #48	; 0x30
 80a44fe:	d15c      	bne.n	80a45ba <_strtod_r+0x11a>
 80a4500:	786b      	ldrb	r3, [r5, #1]
 80a4502:	2b58      	cmp	r3, #88	; 0x58
 80a4504:	d001      	beq.n	80a450a <_strtod_r+0x6a>
 80a4506:	2b78      	cmp	r3, #120	; 0x78
 80a4508:	d14c      	bne.n	80a45a4 <_strtod_r+0x104>
 80a450a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a450c:	4aa8      	ldr	r2, [pc, #672]	; (80a47b0 <_strtod_r+0x310>)
 80a450e:	9301      	str	r3, [sp, #4]
 80a4510:	ab18      	add	r3, sp, #96	; 0x60
 80a4512:	9300      	str	r3, [sp, #0]
 80a4514:	a917      	add	r1, sp, #92	; 0x5c
 80a4516:	ab19      	add	r3, sp, #100	; 0x64
 80a4518:	4650      	mov	r0, sl
 80a451a:	f001 f96e 	bl	80a57fa <__gethex>
 80a451e:	f010 0607 	ands.w	r6, r0, #7
 80a4522:	4604      	mov	r4, r0
 80a4524:	f000 8585 	beq.w	80a5032 <_strtod_r+0xb92>
 80a4528:	2e06      	cmp	r6, #6
 80a452a:	d105      	bne.n	80a4538 <_strtod_r+0x98>
 80a452c:	3501      	adds	r5, #1
 80a452e:	2300      	movs	r3, #0
 80a4530:	9517      	str	r5, [sp, #92]	; 0x5c
 80a4532:	930c      	str	r3, [sp, #48]	; 0x30
 80a4534:	f000 bd7d 	b.w	80a5032 <_strtod_r+0xb92>
 80a4538:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80a453a:	b13a      	cbz	r2, 80a454c <_strtod_r+0xac>
 80a453c:	2135      	movs	r1, #53	; 0x35
 80a453e:	a81a      	add	r0, sp, #104	; 0x68
 80a4540:	f002 f8b9 	bl	80a66b6 <__copybits>
 80a4544:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a4546:	4650      	mov	r0, sl
 80a4548:	f001 fd3d 	bl	80a5fc6 <_Bfree>
 80a454c:	2e06      	cmp	r6, #6
 80a454e:	d822      	bhi.n	80a4596 <_strtod_r+0xf6>
 80a4550:	e8df f006 	tbb	[pc, r6]
 80a4554:	18080d04 	.word	0x18080d04
 80a4558:	0d1d      	.short	0x0d1d
 80a455a:	04          	.byte	0x04
 80a455b:	00          	.byte	0x00
 80a455c:	f04f 0900 	mov.w	r9, #0
 80a4560:	46c8      	mov	r8, r9
 80a4562:	e018      	b.n	80a4596 <_strtod_r+0xf6>
 80a4564:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80a4568:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 80a456c:	e013      	b.n	80a4596 <_strtod_r+0xf6>
 80a456e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a4570:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80a4572:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80a4576:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80a457a:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80a457e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80a4582:	e008      	b.n	80a4596 <_strtod_r+0xf6>
 80a4584:	f8df 922c 	ldr.w	r9, [pc, #556]	; 80a47b4 <_strtod_r+0x314>
 80a4588:	f04f 0800 	mov.w	r8, #0
 80a458c:	e003      	b.n	80a4596 <_strtod_r+0xf6>
 80a458e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80a4592:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80a4596:	0721      	lsls	r1, r4, #28
 80a4598:	f140 854b 	bpl.w	80a5032 <_strtod_r+0xb92>
 80a459c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80a45a0:	f000 bd47 	b.w	80a5032 <_strtod_r+0xb92>
 80a45a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a45a6:	1c5a      	adds	r2, r3, #1
 80a45a8:	9217      	str	r2, [sp, #92]	; 0x5c
 80a45aa:	785b      	ldrb	r3, [r3, #1]
 80a45ac:	2b30      	cmp	r3, #48	; 0x30
 80a45ae:	d0f9      	beq.n	80a45a4 <_strtod_r+0x104>
 80a45b0:	2b00      	cmp	r3, #0
 80a45b2:	f000 853e 	beq.w	80a5032 <_strtod_r+0xb92>
 80a45b6:	2301      	movs	r3, #1
 80a45b8:	e000      	b.n	80a45bc <_strtod_r+0x11c>
 80a45ba:	2300      	movs	r3, #0
 80a45bc:	9305      	str	r3, [sp, #20]
 80a45be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a45c0:	220a      	movs	r2, #10
 80a45c2:	9306      	str	r3, [sp, #24]
 80a45c4:	2300      	movs	r3, #0
 80a45c6:	469b      	mov	fp, r3
 80a45c8:	9302      	str	r3, [sp, #8]
 80a45ca:	9304      	str	r3, [sp, #16]
 80a45cc:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80a45ce:	782e      	ldrb	r6, [r5, #0]
 80a45d0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80a45d4:	b2d9      	uxtb	r1, r3
 80a45d6:	2909      	cmp	r1, #9
 80a45d8:	d811      	bhi.n	80a45fe <_strtod_r+0x15e>
 80a45da:	f1bb 0f08 	cmp.w	fp, #8
 80a45de:	bfd5      	itete	le
 80a45e0:	9904      	ldrle	r1, [sp, #16]
 80a45e2:	9902      	ldrgt	r1, [sp, #8]
 80a45e4:	fb02 3301 	mlale	r3, r2, r1, r3
 80a45e8:	fb02 3301 	mlagt	r3, r2, r1, r3
 80a45ec:	f105 0501 	add.w	r5, r5, #1
 80a45f0:	bfd4      	ite	le
 80a45f2:	9304      	strle	r3, [sp, #16]
 80a45f4:	9302      	strgt	r3, [sp, #8]
 80a45f6:	f10b 0b01 	add.w	fp, fp, #1
 80a45fa:	9517      	str	r5, [sp, #92]	; 0x5c
 80a45fc:	e7e6      	b.n	80a45cc <_strtod_r+0x12c>
 80a45fe:	4650      	mov	r0, sl
 80a4600:	f7ff fe8e 	bl	80a4320 <_localeconv_r>
 80a4604:	6807      	ldr	r7, [r0, #0]
 80a4606:	4650      	mov	r0, sl
 80a4608:	f7ff fe8a 	bl	80a4320 <_localeconv_r>
 80a460c:	6800      	ldr	r0, [r0, #0]
 80a460e:	f7ff fef4 	bl	80a43fa <strlen>
 80a4612:	4639      	mov	r1, r7
 80a4614:	4602      	mov	r2, r0
 80a4616:	4628      	mov	r0, r5
 80a4618:	f7ff fef7 	bl	80a440a <strncmp>
 80a461c:	4607      	mov	r7, r0
 80a461e:	b128      	cbz	r0, 80a462c <_strtod_r+0x18c>
 80a4620:	2000      	movs	r0, #0
 80a4622:	4633      	mov	r3, r6
 80a4624:	465d      	mov	r5, fp
 80a4626:	4602      	mov	r2, r0
 80a4628:	4601      	mov	r1, r0
 80a462a:	e05a      	b.n	80a46e2 <_strtod_r+0x242>
 80a462c:	4650      	mov	r0, sl
 80a462e:	f7ff fe77 	bl	80a4320 <_localeconv_r>
 80a4632:	6800      	ldr	r0, [r0, #0]
 80a4634:	f7ff fee1 	bl	80a43fa <strlen>
 80a4638:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a463a:	181a      	adds	r2, r3, r0
 80a463c:	9217      	str	r2, [sp, #92]	; 0x5c
 80a463e:	5c1b      	ldrb	r3, [r3, r0]
 80a4640:	f1bb 0f00 	cmp.w	fp, #0
 80a4644:	d145      	bne.n	80a46d2 <_strtod_r+0x232>
 80a4646:	4658      	mov	r0, fp
 80a4648:	2b30      	cmp	r3, #48	; 0x30
 80a464a:	d105      	bne.n	80a4658 <_strtod_r+0x1b8>
 80a464c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a464e:	3001      	adds	r0, #1
 80a4650:	1c5a      	adds	r2, r3, #1
 80a4652:	9217      	str	r2, [sp, #92]	; 0x5c
 80a4654:	785b      	ldrb	r3, [r3, #1]
 80a4656:	e7f7      	b.n	80a4648 <_strtod_r+0x1a8>
 80a4658:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80a465c:	2a08      	cmp	r2, #8
 80a465e:	d846      	bhi.n	80a46ee <_strtod_r+0x24e>
 80a4660:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80a4662:	9206      	str	r2, [sp, #24]
 80a4664:	4602      	mov	r2, r0
 80a4666:	2000      	movs	r0, #0
 80a4668:	4605      	mov	r5, r0
 80a466a:	3b30      	subs	r3, #48	; 0x30
 80a466c:	f100 0101 	add.w	r1, r0, #1
 80a4670:	d029      	beq.n	80a46c6 <_strtod_r+0x226>
 80a4672:	440a      	add	r2, r1
 80a4674:	4629      	mov	r1, r5
 80a4676:	eb05 0c00 	add.w	ip, r5, r0
 80a467a:	260a      	movs	r6, #10
 80a467c:	4561      	cmp	r1, ip
 80a467e:	d00f      	beq.n	80a46a0 <_strtod_r+0x200>
 80a4680:	3101      	adds	r1, #1
 80a4682:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 80a4686:	f1be 0f08 	cmp.w	lr, #8
 80a468a:	dc03      	bgt.n	80a4694 <_strtod_r+0x1f4>
 80a468c:	9f04      	ldr	r7, [sp, #16]
 80a468e:	4377      	muls	r7, r6
 80a4690:	9704      	str	r7, [sp, #16]
 80a4692:	e7f3      	b.n	80a467c <_strtod_r+0x1dc>
 80a4694:	2910      	cmp	r1, #16
 80a4696:	bfde      	ittt	le
 80a4698:	9f02      	ldrle	r7, [sp, #8]
 80a469a:	4377      	mulle	r7, r6
 80a469c:	9702      	strle	r7, [sp, #8]
 80a469e:	e7ed      	b.n	80a467c <_strtod_r+0x1dc>
 80a46a0:	4428      	add	r0, r5
 80a46a2:	2808      	cmp	r0, #8
 80a46a4:	f100 0501 	add.w	r5, r0, #1
 80a46a8:	dc05      	bgt.n	80a46b6 <_strtod_r+0x216>
 80a46aa:	9804      	ldr	r0, [sp, #16]
 80a46ac:	210a      	movs	r1, #10
 80a46ae:	fb01 3300 	mla	r3, r1, r0, r3
 80a46b2:	9304      	str	r3, [sp, #16]
 80a46b4:	e006      	b.n	80a46c4 <_strtod_r+0x224>
 80a46b6:	2d10      	cmp	r5, #16
 80a46b8:	bfdf      	itttt	le
 80a46ba:	9802      	ldrle	r0, [sp, #8]
 80a46bc:	210a      	movle	r1, #10
 80a46be:	fb01 3300 	mlale	r3, r1, r0, r3
 80a46c2:	9302      	strle	r3, [sp, #8]
 80a46c4:	2100      	movs	r1, #0
 80a46c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a46c8:	1c58      	adds	r0, r3, #1
 80a46ca:	9017      	str	r0, [sp, #92]	; 0x5c
 80a46cc:	785b      	ldrb	r3, [r3, #1]
 80a46ce:	4608      	mov	r0, r1
 80a46d0:	e002      	b.n	80a46d8 <_strtod_r+0x238>
 80a46d2:	465d      	mov	r5, fp
 80a46d4:	4638      	mov	r0, r7
 80a46d6:	463a      	mov	r2, r7
 80a46d8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80a46dc:	2909      	cmp	r1, #9
 80a46de:	d9c4      	bls.n	80a466a <_strtod_r+0x1ca>
 80a46e0:	2101      	movs	r1, #1
 80a46e2:	2b65      	cmp	r3, #101	; 0x65
 80a46e4:	d001      	beq.n	80a46ea <_strtod_r+0x24a>
 80a46e6:	2b45      	cmp	r3, #69	; 0x45
 80a46e8:	d14f      	bne.n	80a478a <_strtod_r+0x2ea>
 80a46ea:	b96d      	cbnz	r5, 80a4708 <_strtod_r+0x268>
 80a46ec:	e004      	b.n	80a46f8 <_strtod_r+0x258>
 80a46ee:	2b65      	cmp	r3, #101	; 0x65
 80a46f0:	f040 84ad 	bne.w	80a504e <_strtod_r+0xbae>
 80a46f4:	2200      	movs	r2, #0
 80a46f6:	2101      	movs	r1, #1
 80a46f8:	b928      	cbnz	r0, 80a4706 <_strtod_r+0x266>
 80a46fa:	9b05      	ldr	r3, [sp, #20]
 80a46fc:	2b00      	cmp	r3, #0
 80a46fe:	f000 8092 	beq.w	80a4826 <_strtod_r+0x386>
 80a4702:	4605      	mov	r5, r0
 80a4704:	e000      	b.n	80a4708 <_strtod_r+0x268>
 80a4706:	2500      	movs	r5, #0
 80a4708:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80a470a:	1c63      	adds	r3, r4, #1
 80a470c:	9317      	str	r3, [sp, #92]	; 0x5c
 80a470e:	7863      	ldrb	r3, [r4, #1]
 80a4710:	2b2b      	cmp	r3, #43	; 0x2b
 80a4712:	d006      	beq.n	80a4722 <_strtod_r+0x282>
 80a4714:	2b2d      	cmp	r3, #45	; 0x2d
 80a4716:	d002      	beq.n	80a471e <_strtod_r+0x27e>
 80a4718:	2600      	movs	r6, #0
 80a471a:	9603      	str	r6, [sp, #12]
 80a471c:	e006      	b.n	80a472c <_strtod_r+0x28c>
 80a471e:	2301      	movs	r3, #1
 80a4720:	e000      	b.n	80a4724 <_strtod_r+0x284>
 80a4722:	2300      	movs	r3, #0
 80a4724:	9303      	str	r3, [sp, #12]
 80a4726:	1ca3      	adds	r3, r4, #2
 80a4728:	9317      	str	r3, [sp, #92]	; 0x5c
 80a472a:	78a3      	ldrb	r3, [r4, #2]
 80a472c:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80a4730:	2e09      	cmp	r6, #9
 80a4732:	d829      	bhi.n	80a4788 <_strtod_r+0x2e8>
 80a4734:	2b30      	cmp	r3, #48	; 0x30
 80a4736:	d104      	bne.n	80a4742 <_strtod_r+0x2a2>
 80a4738:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a473a:	1c5e      	adds	r6, r3, #1
 80a473c:	9617      	str	r6, [sp, #92]	; 0x5c
 80a473e:	785b      	ldrb	r3, [r3, #1]
 80a4740:	e7f8      	b.n	80a4734 <_strtod_r+0x294>
 80a4742:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 80a4746:	2e08      	cmp	r6, #8
 80a4748:	d81f      	bhi.n	80a478a <_strtod_r+0x2ea>
 80a474a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80a474e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a4750:	461f      	mov	r7, r3
 80a4752:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a4754:	1c5e      	adds	r6, r3, #1
 80a4756:	9617      	str	r6, [sp, #92]	; 0x5c
 80a4758:	785b      	ldrb	r3, [r3, #1]
 80a475a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80a475e:	f1bc 0f09 	cmp.w	ip, #9
 80a4762:	d805      	bhi.n	80a4770 <_strtod_r+0x2d0>
 80a4764:	260a      	movs	r6, #10
 80a4766:	fb06 3e0e 	mla	lr, r6, lr, r3
 80a476a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80a476e:	e7f0      	b.n	80a4752 <_strtod_r+0x2b2>
 80a4770:	1bf6      	subs	r6, r6, r7
 80a4772:	2e08      	cmp	r6, #8
 80a4774:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80a4778:	dc02      	bgt.n	80a4780 <_strtod_r+0x2e0>
 80a477a:	4576      	cmp	r6, lr
 80a477c:	bfa8      	it	ge
 80a477e:	4676      	movge	r6, lr
 80a4780:	9f03      	ldr	r7, [sp, #12]
 80a4782:	b11f      	cbz	r7, 80a478c <_strtod_r+0x2ec>
 80a4784:	4276      	negs	r6, r6
 80a4786:	e001      	b.n	80a478c <_strtod_r+0x2ec>
 80a4788:	9417      	str	r4, [sp, #92]	; 0x5c
 80a478a:	2600      	movs	r6, #0
 80a478c:	2d00      	cmp	r5, #0
 80a478e:	d152      	bne.n	80a4836 <_strtod_r+0x396>
 80a4790:	2800      	cmp	r0, #0
 80a4792:	f040 844e 	bne.w	80a5032 <_strtod_r+0xb92>
 80a4796:	9a05      	ldr	r2, [sp, #20]
 80a4798:	2a00      	cmp	r2, #0
 80a479a:	f040 844a 	bne.w	80a5032 <_strtod_r+0xb92>
 80a479e:	2900      	cmp	r1, #0
 80a47a0:	d141      	bne.n	80a4826 <_strtod_r+0x386>
 80a47a2:	2b4e      	cmp	r3, #78	; 0x4e
 80a47a4:	d020      	beq.n	80a47e8 <_strtod_r+0x348>
 80a47a6:	dc07      	bgt.n	80a47b8 <_strtod_r+0x318>
 80a47a8:	2b49      	cmp	r3, #73	; 0x49
 80a47aa:	d00a      	beq.n	80a47c2 <_strtod_r+0x322>
 80a47ac:	e03b      	b.n	80a4826 <_strtod_r+0x386>
 80a47ae:	bf00      	nop
 80a47b0:	080a6fc8 	.word	0x080a6fc8
 80a47b4:	7ff00000 	.word	0x7ff00000
 80a47b8:	2b69      	cmp	r3, #105	; 0x69
 80a47ba:	d002      	beq.n	80a47c2 <_strtod_r+0x322>
 80a47bc:	2b6e      	cmp	r3, #110	; 0x6e
 80a47be:	d013      	beq.n	80a47e8 <_strtod_r+0x348>
 80a47c0:	e031      	b.n	80a4826 <_strtod_r+0x386>
 80a47c2:	49aa      	ldr	r1, [pc, #680]	; (80a4a6c <_strtod_r+0x5cc>)
 80a47c4:	a817      	add	r0, sp, #92	; 0x5c
 80a47c6:	f001 fa49 	bl	80a5c5c <__match>
 80a47ca:	b360      	cbz	r0, 80a4826 <_strtod_r+0x386>
 80a47cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a47ce:	49a8      	ldr	r1, [pc, #672]	; (80a4a70 <_strtod_r+0x5d0>)
 80a47d0:	3b01      	subs	r3, #1
 80a47d2:	a817      	add	r0, sp, #92	; 0x5c
 80a47d4:	9317      	str	r3, [sp, #92]	; 0x5c
 80a47d6:	f001 fa41 	bl	80a5c5c <__match>
 80a47da:	b910      	cbnz	r0, 80a47e2 <_strtod_r+0x342>
 80a47dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a47de:	3301      	adds	r3, #1
 80a47e0:	9317      	str	r3, [sp, #92]	; 0x5c
 80a47e2:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 80a4a8c <_strtod_r+0x5ec>
 80a47e6:	e01a      	b.n	80a481e <_strtod_r+0x37e>
 80a47e8:	49a2      	ldr	r1, [pc, #648]	; (80a4a74 <_strtod_r+0x5d4>)
 80a47ea:	a817      	add	r0, sp, #92	; 0x5c
 80a47ec:	f001 fa36 	bl	80a5c5c <__match>
 80a47f0:	b1c8      	cbz	r0, 80a4826 <_strtod_r+0x386>
 80a47f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a47f4:	781b      	ldrb	r3, [r3, #0]
 80a47f6:	2b28      	cmp	r3, #40	; 0x28
 80a47f8:	d10f      	bne.n	80a481a <_strtod_r+0x37a>
 80a47fa:	aa1a      	add	r2, sp, #104	; 0x68
 80a47fc:	499e      	ldr	r1, [pc, #632]	; (80a4a78 <_strtod_r+0x5d8>)
 80a47fe:	a817      	add	r0, sp, #92	; 0x5c
 80a4800:	f001 fa3f 	bl	80a5c82 <__hexnan>
 80a4804:	2805      	cmp	r0, #5
 80a4806:	d108      	bne.n	80a481a <_strtod_r+0x37a>
 80a4808:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a480a:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80a480e:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80a4812:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80a4816:	f000 bc0c 	b.w	80a5032 <_strtod_r+0xb92>
 80a481a:	f8df 9274 	ldr.w	r9, [pc, #628]	; 80a4a90 <_strtod_r+0x5f0>
 80a481e:	f04f 0800 	mov.w	r8, #0
 80a4822:	f000 bc06 	b.w	80a5032 <_strtod_r+0xb92>
 80a4826:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a4828:	9417      	str	r4, [sp, #92]	; 0x5c
 80a482a:	2b00      	cmp	r3, #0
 80a482c:	f000 840c 	beq.w	80a5048 <_strtod_r+0xba8>
 80a4830:	2300      	movs	r3, #0
 80a4832:	930c      	str	r3, [sp, #48]	; 0x30
 80a4834:	e3ff      	b.n	80a5036 <_strtod_r+0xb96>
 80a4836:	462c      	mov	r4, r5
 80a4838:	f1bb 0f00 	cmp.w	fp, #0
 80a483c:	bf08      	it	eq
 80a483e:	46ab      	moveq	fp, r5
 80a4840:	9804      	ldr	r0, [sp, #16]
 80a4842:	2d10      	cmp	r5, #16
 80a4844:	bfa8      	it	ge
 80a4846:	2410      	movge	r4, #16
 80a4848:	1ab7      	subs	r7, r6, r2
 80a484a:	f7fe fd6b 	bl	80a3324 <__aeabi_ui2d>
 80a484e:	2c09      	cmp	r4, #9
 80a4850:	4680      	mov	r8, r0
 80a4852:	4689      	mov	r9, r1
 80a4854:	dd13      	ble.n	80a487e <_strtod_r+0x3de>
 80a4856:	4b89      	ldr	r3, [pc, #548]	; (80a4a7c <_strtod_r+0x5dc>)
 80a4858:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80a485c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80a4860:	f7fe fdd6 	bl	80a3410 <__aeabi_dmul>
 80a4864:	4680      	mov	r8, r0
 80a4866:	9802      	ldr	r0, [sp, #8]
 80a4868:	4689      	mov	r9, r1
 80a486a:	f7fe fd5b 	bl	80a3324 <__aeabi_ui2d>
 80a486e:	4602      	mov	r2, r0
 80a4870:	460b      	mov	r3, r1
 80a4872:	4640      	mov	r0, r8
 80a4874:	4649      	mov	r1, r9
 80a4876:	f7fe fc19 	bl	80a30ac <__adddf3>
 80a487a:	4680      	mov	r8, r0
 80a487c:	4689      	mov	r9, r1
 80a487e:	2d0f      	cmp	r5, #15
 80a4880:	dc33      	bgt.n	80a48ea <_strtod_r+0x44a>
 80a4882:	2f00      	cmp	r7, #0
 80a4884:	f000 83d5 	beq.w	80a5032 <_strtod_r+0xb92>
 80a4888:	dd22      	ble.n	80a48d0 <_strtod_r+0x430>
 80a488a:	2f16      	cmp	r7, #22
 80a488c:	dc07      	bgt.n	80a489e <_strtod_r+0x3fe>
 80a488e:	4d7b      	ldr	r5, [pc, #492]	; (80a4a7c <_strtod_r+0x5dc>)
 80a4890:	4642      	mov	r2, r8
 80a4892:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
 80a4896:	464b      	mov	r3, r9
 80a4898:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a489c:	e013      	b.n	80a48c6 <_strtod_r+0x426>
 80a489e:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80a48a2:	429f      	cmp	r7, r3
 80a48a4:	dc21      	bgt.n	80a48ea <_strtod_r+0x44a>
 80a48a6:	4c75      	ldr	r4, [pc, #468]	; (80a4a7c <_strtod_r+0x5dc>)
 80a48a8:	f1c5 050f 	rsb	r5, r5, #15
 80a48ac:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80a48b0:	1b7d      	subs	r5, r7, r5
 80a48b2:	4642      	mov	r2, r8
 80a48b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a48b8:	464b      	mov	r3, r9
 80a48ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80a48be:	f7fe fda7 	bl	80a3410 <__aeabi_dmul>
 80a48c2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80a48c6:	f7fe fda3 	bl	80a3410 <__aeabi_dmul>
 80a48ca:	4680      	mov	r8, r0
 80a48cc:	4689      	mov	r9, r1
 80a48ce:	e3b0      	b.n	80a5032 <_strtod_r+0xb92>
 80a48d0:	f117 0f16 	cmn.w	r7, #22
 80a48d4:	db09      	blt.n	80a48ea <_strtod_r+0x44a>
 80a48d6:	4d69      	ldr	r5, [pc, #420]	; (80a4a7c <_strtod_r+0x5dc>)
 80a48d8:	4640      	mov	r0, r8
 80a48da:	eba5 03c7 	sub.w	r3, r5, r7, lsl #3
 80a48de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a48e2:	4649      	mov	r1, r9
 80a48e4:	f7fe febe 	bl	80a3664 <__aeabi_ddiv>
 80a48e8:	e7ef      	b.n	80a48ca <_strtod_r+0x42a>
 80a48ea:	1b2c      	subs	r4, r5, r4
 80a48ec:	443c      	add	r4, r7
 80a48ee:	2c00      	cmp	r4, #0
 80a48f0:	dd5d      	ble.n	80a49ae <_strtod_r+0x50e>
 80a48f2:	f014 010f 	ands.w	r1, r4, #15
 80a48f6:	d00a      	beq.n	80a490e <_strtod_r+0x46e>
 80a48f8:	4b60      	ldr	r3, [pc, #384]	; (80a4a7c <_strtod_r+0x5dc>)
 80a48fa:	4642      	mov	r2, r8
 80a48fc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80a4900:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a4904:	464b      	mov	r3, r9
 80a4906:	f7fe fd83 	bl	80a3410 <__aeabi_dmul>
 80a490a:	4680      	mov	r8, r0
 80a490c:	4689      	mov	r9, r1
 80a490e:	f034 040f 	bics.w	r4, r4, #15
 80a4912:	f000 80c1 	beq.w	80a4a98 <_strtod_r+0x5f8>
 80a4916:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 80a491a:	dd0f      	ble.n	80a493c <_strtod_r+0x49c>
 80a491c:	f04f 0b00 	mov.w	fp, #0
 80a4920:	f8cd b008 	str.w	fp, [sp, #8]
 80a4924:	f8cd b014 	str.w	fp, [sp, #20]
 80a4928:	f8cd b010 	str.w	fp, [sp, #16]
 80a492c:	2322      	movs	r3, #34	; 0x22
 80a492e:	f8ca 3000 	str.w	r3, [sl]
 80a4932:	f8df 9158 	ldr.w	r9, [pc, #344]	; 80a4a8c <_strtod_r+0x5ec>
 80a4936:	f04f 0800 	mov.w	r8, #0
 80a493a:	e189      	b.n	80a4c50 <_strtod_r+0x7b0>
 80a493c:	4640      	mov	r0, r8
 80a493e:	4649      	mov	r1, r9
 80a4940:	2300      	movs	r3, #0
 80a4942:	4e4f      	ldr	r6, [pc, #316]	; (80a4a80 <_strtod_r+0x5e0>)
 80a4944:	1124      	asrs	r4, r4, #4
 80a4946:	9302      	str	r3, [sp, #8]
 80a4948:	2c01      	cmp	r4, #1
 80a494a:	dd0c      	ble.n	80a4966 <_strtod_r+0x4c6>
 80a494c:	07e2      	lsls	r2, r4, #31
 80a494e:	d504      	bpl.n	80a495a <_strtod_r+0x4ba>
 80a4950:	e9d6 2300 	ldrd	r2, r3, [r6]
 80a4954:	f7fe fd5c 	bl	80a3410 <__aeabi_dmul>
 80a4958:	2301      	movs	r3, #1
 80a495a:	9a02      	ldr	r2, [sp, #8]
 80a495c:	1064      	asrs	r4, r4, #1
 80a495e:	3201      	adds	r2, #1
 80a4960:	9202      	str	r2, [sp, #8]
 80a4962:	3608      	adds	r6, #8
 80a4964:	e7f0      	b.n	80a4948 <_strtod_r+0x4a8>
 80a4966:	b10b      	cbz	r3, 80a496c <_strtod_r+0x4cc>
 80a4968:	4680      	mov	r8, r0
 80a496a:	4689      	mov	r9, r1
 80a496c:	4b44      	ldr	r3, [pc, #272]	; (80a4a80 <_strtod_r+0x5e0>)
 80a496e:	9a02      	ldr	r2, [sp, #8]
 80a4970:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80a4974:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 80a4978:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a497c:	4642      	mov	r2, r8
 80a497e:	464b      	mov	r3, r9
 80a4980:	f7fe fd46 	bl	80a3410 <__aeabi_dmul>
 80a4984:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a4988:	4689      	mov	r9, r1
 80a498a:	460a      	mov	r2, r1
 80a498c:	0d1b      	lsrs	r3, r3, #20
 80a498e:	493d      	ldr	r1, [pc, #244]	; (80a4a84 <_strtod_r+0x5e4>)
 80a4990:	051b      	lsls	r3, r3, #20
 80a4992:	428b      	cmp	r3, r1
 80a4994:	4680      	mov	r8, r0
 80a4996:	d8c1      	bhi.n	80a491c <_strtod_r+0x47c>
 80a4998:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80a499c:	428b      	cmp	r3, r1
 80a499e:	bf86      	itte	hi
 80a49a0:	f8df 90f0 	ldrhi.w	r9, [pc, #240]	; 80a4a94 <_strtod_r+0x5f4>
 80a49a4:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80a49a8:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80a49ac:	e074      	b.n	80a4a98 <_strtod_r+0x5f8>
 80a49ae:	d073      	beq.n	80a4a98 <_strtod_r+0x5f8>
 80a49b0:	4264      	negs	r4, r4
 80a49b2:	f014 020f 	ands.w	r2, r4, #15
 80a49b6:	d00a      	beq.n	80a49ce <_strtod_r+0x52e>
 80a49b8:	4b30      	ldr	r3, [pc, #192]	; (80a4a7c <_strtod_r+0x5dc>)
 80a49ba:	4640      	mov	r0, r8
 80a49bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80a49c0:	4649      	mov	r1, r9
 80a49c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a49c6:	f7fe fe4d 	bl	80a3664 <__aeabi_ddiv>
 80a49ca:	4680      	mov	r8, r0
 80a49cc:	4689      	mov	r9, r1
 80a49ce:	1124      	asrs	r4, r4, #4
 80a49d0:	d062      	beq.n	80a4a98 <_strtod_r+0x5f8>
 80a49d2:	2c1f      	cmp	r4, #31
 80a49d4:	dd08      	ble.n	80a49e8 <_strtod_r+0x548>
 80a49d6:	f04f 0b00 	mov.w	fp, #0
 80a49da:	f8cd b008 	str.w	fp, [sp, #8]
 80a49de:	f8cd b014 	str.w	fp, [sp, #20]
 80a49e2:	f8cd b010 	str.w	fp, [sp, #16]
 80a49e6:	e12c      	b.n	80a4c42 <_strtod_r+0x7a2>
 80a49e8:	4640      	mov	r0, r8
 80a49ea:	4649      	mov	r1, r9
 80a49ec:	f014 0f10 	tst.w	r4, #16
 80a49f0:	bf0c      	ite	eq
 80a49f2:	2300      	moveq	r3, #0
 80a49f4:	236a      	movne	r3, #106	; 0x6a
 80a49f6:	4e24      	ldr	r6, [pc, #144]	; (80a4a88 <_strtod_r+0x5e8>)
 80a49f8:	9303      	str	r3, [sp, #12]
 80a49fa:	2300      	movs	r3, #0
 80a49fc:	2c00      	cmp	r4, #0
 80a49fe:	dd09      	ble.n	80a4a14 <_strtod_r+0x574>
 80a4a00:	07e2      	lsls	r2, r4, #31
 80a4a02:	d504      	bpl.n	80a4a0e <_strtod_r+0x56e>
 80a4a04:	e9d6 2300 	ldrd	r2, r3, [r6]
 80a4a08:	f7fe fd02 	bl	80a3410 <__aeabi_dmul>
 80a4a0c:	2301      	movs	r3, #1
 80a4a0e:	1064      	asrs	r4, r4, #1
 80a4a10:	3608      	adds	r6, #8
 80a4a12:	e7f3      	b.n	80a49fc <_strtod_r+0x55c>
 80a4a14:	b10b      	cbz	r3, 80a4a1a <_strtod_r+0x57a>
 80a4a16:	4680      	mov	r8, r0
 80a4a18:	4689      	mov	r9, r1
 80a4a1a:	9b03      	ldr	r3, [sp, #12]
 80a4a1c:	b1eb      	cbz	r3, 80a4a5a <_strtod_r+0x5ba>
 80a4a1e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 80a4a22:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a4a26:	2b00      	cmp	r3, #0
 80a4a28:	4649      	mov	r1, r9
 80a4a2a:	dd16      	ble.n	80a4a5a <_strtod_r+0x5ba>
 80a4a2c:	2b1f      	cmp	r3, #31
 80a4a2e:	dd0e      	ble.n	80a4a4e <_strtod_r+0x5ae>
 80a4a30:	2b34      	cmp	r3, #52	; 0x34
 80a4a32:	bfde      	ittt	le
 80a4a34:	3b20      	suble	r3, #32
 80a4a36:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80a4a3a:	fa02 f303 	lslle.w	r3, r2, r3
 80a4a3e:	f04f 0800 	mov.w	r8, #0
 80a4a42:	bfcc      	ite	gt
 80a4a44:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80a4a48:	ea03 0901 	andle.w	r9, r3, r1
 80a4a4c:	e005      	b.n	80a4a5a <_strtod_r+0x5ba>
 80a4a4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a4a52:	fa02 f303 	lsl.w	r3, r2, r3
 80a4a56:	ea03 0808 	and.w	r8, r3, r8
 80a4a5a:	2200      	movs	r2, #0
 80a4a5c:	2300      	movs	r3, #0
 80a4a5e:	4640      	mov	r0, r8
 80a4a60:	4649      	mov	r1, r9
 80a4a62:	f7fe ff3d 	bl	80a38e0 <__aeabi_dcmpeq>
 80a4a66:	2800      	cmp	r0, #0
 80a4a68:	d1b5      	bne.n	80a49d6 <_strtod_r+0x536>
 80a4a6a:	e017      	b.n	80a4a9c <_strtod_r+0x5fc>
 80a4a6c:	080a6fdc 	.word	0x080a6fdc
 80a4a70:	080a6fdf 	.word	0x080a6fdf
 80a4a74:	080a6fe5 	.word	0x080a6fe5
 80a4a78:	080a6fe8 	.word	0x080a6fe8
 80a4a7c:	080a7068 	.word	0x080a7068
 80a4a80:	080a7130 	.word	0x080a7130
 80a4a84:	7ca00000 	.word	0x7ca00000
 80a4a88:	080a7000 	.word	0x080a7000
 80a4a8c:	7ff00000 	.word	0x7ff00000
 80a4a90:	fff80000 	.word	0xfff80000
 80a4a94:	7fefffff 	.word	0x7fefffff
 80a4a98:	2300      	movs	r3, #0
 80a4a9a:	9303      	str	r3, [sp, #12]
 80a4a9c:	9b04      	ldr	r3, [sp, #16]
 80a4a9e:	465a      	mov	r2, fp
 80a4aa0:	9300      	str	r3, [sp, #0]
 80a4aa2:	9906      	ldr	r1, [sp, #24]
 80a4aa4:	462b      	mov	r3, r5
 80a4aa6:	4650      	mov	r0, sl
 80a4aa8:	f001 fadf 	bl	80a606a <__s2b>
 80a4aac:	9005      	str	r0, [sp, #20]
 80a4aae:	2800      	cmp	r0, #0
 80a4ab0:	f43f af34 	beq.w	80a491c <_strtod_r+0x47c>
 80a4ab4:	2f00      	cmp	r7, #0
 80a4ab6:	f1c7 0300 	rsb	r3, r7, #0
 80a4aba:	bfa8      	it	ge
 80a4abc:	2300      	movge	r3, #0
 80a4abe:	930d      	str	r3, [sp, #52]	; 0x34
 80a4ac0:	f04f 0b00 	mov.w	fp, #0
 80a4ac4:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 80a4ac8:	9312      	str	r3, [sp, #72]	; 0x48
 80a4aca:	f8cd b008 	str.w	fp, [sp, #8]
 80a4ace:	9b05      	ldr	r3, [sp, #20]
 80a4ad0:	4650      	mov	r0, sl
 80a4ad2:	6859      	ldr	r1, [r3, #4]
 80a4ad4:	f001 fa42 	bl	80a5f5c <_Balloc>
 80a4ad8:	9004      	str	r0, [sp, #16]
 80a4ada:	2800      	cmp	r0, #0
 80a4adc:	f43f af26 	beq.w	80a492c <_strtod_r+0x48c>
 80a4ae0:	9b05      	ldr	r3, [sp, #20]
 80a4ae2:	300c      	adds	r0, #12
 80a4ae4:	691a      	ldr	r2, [r3, #16]
 80a4ae6:	f103 010c 	add.w	r1, r3, #12
 80a4aea:	3202      	adds	r2, #2
 80a4aec:	0092      	lsls	r2, r2, #2
 80a4aee:	f7ff fc1b 	bl	80a4328 <memcpy>
 80a4af2:	ab1a      	add	r3, sp, #104	; 0x68
 80a4af4:	9301      	str	r3, [sp, #4]
 80a4af6:	ab19      	add	r3, sp, #100	; 0x64
 80a4af8:	9300      	str	r3, [sp, #0]
 80a4afa:	4642      	mov	r2, r8
 80a4afc:	464b      	mov	r3, r9
 80a4afe:	4650      	mov	r0, sl
 80a4b00:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80a4b04:	f001 fd61 	bl	80a65ca <__d2b>
 80a4b08:	9018      	str	r0, [sp, #96]	; 0x60
 80a4b0a:	2800      	cmp	r0, #0
 80a4b0c:	f43f af0e 	beq.w	80a492c <_strtod_r+0x48c>
 80a4b10:	2101      	movs	r1, #1
 80a4b12:	4650      	mov	r0, sl
 80a4b14:	f001 fb34 	bl	80a6180 <__i2b>
 80a4b18:	9002      	str	r0, [sp, #8]
 80a4b1a:	2800      	cmp	r0, #0
 80a4b1c:	f43f af06 	beq.w	80a492c <_strtod_r+0x48c>
 80a4b20:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a4b22:	9903      	ldr	r1, [sp, #12]
 80a4b24:	2b00      	cmp	r3, #0
 80a4b26:	bfac      	ite	ge
 80a4b28:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 80a4b2a:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80a4b2c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80a4b2e:	bfac      	ite	ge
 80a4b30:	18d6      	addge	r6, r2, r3
 80a4b32:	1ad2      	sublt	r2, r2, r3
 80a4b34:	eba3 0301 	sub.w	r3, r3, r1
 80a4b38:	4423      	add	r3, r4
 80a4b3a:	49b1      	ldr	r1, [pc, #708]	; (80a4e00 <_strtod_r+0x960>)
 80a4b3c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80a4b40:	bfac      	ite	ge
 80a4b42:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 80a4b44:	9e0d      	ldrlt	r6, [sp, #52]	; 0x34
 80a4b46:	428b      	cmp	r3, r1
 80a4b48:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
 80a4b4c:	f280 8085 	bge.w	80a4c5a <_strtod_r+0x7ba>
 80a4b50:	1ac9      	subs	r1, r1, r3
 80a4b52:	291f      	cmp	r1, #31
 80a4b54:	bfc8      	it	gt
 80a4b56:	4dab      	ldrgt	r5, [pc, #684]	; (80a4e04 <_strtod_r+0x964>)
 80a4b58:	f04f 0701 	mov.w	r7, #1
 80a4b5c:	bfd4      	ite	le
 80a4b5e:	fa07 f301 	lslle.w	r3, r7, r1
 80a4b62:	1aed      	subgt	r5, r5, r3
 80a4b64:	eba4 0401 	sub.w	r4, r4, r1
 80a4b68:	bfd9      	ittee	le
 80a4b6a:	9307      	strle	r3, [sp, #28]
 80a4b6c:	2500      	movle	r5, #0
 80a4b6e:	fa07 f505 	lslgt.w	r5, r7, r5
 80a4b72:	9707      	strgt	r7, [sp, #28]
 80a4b74:	1937      	adds	r7, r6, r4
 80a4b76:	9b03      	ldr	r3, [sp, #12]
 80a4b78:	42be      	cmp	r6, r7
 80a4b7a:	4414      	add	r4, r2
 80a4b7c:	441c      	add	r4, r3
 80a4b7e:	4633      	mov	r3, r6
 80a4b80:	bfa8      	it	ge
 80a4b82:	463b      	movge	r3, r7
 80a4b84:	42a3      	cmp	r3, r4
 80a4b86:	bfa8      	it	ge
 80a4b88:	4623      	movge	r3, r4
 80a4b8a:	2b00      	cmp	r3, #0
 80a4b8c:	bfc2      	ittt	gt
 80a4b8e:	1aff      	subgt	r7, r7, r3
 80a4b90:	1ae4      	subgt	r4, r4, r3
 80a4b92:	1af6      	subgt	r6, r6, r3
 80a4b94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a4b96:	2b00      	cmp	r3, #0
 80a4b98:	d163      	bne.n	80a4c62 <_strtod_r+0x7c2>
 80a4b9a:	2f00      	cmp	r7, #0
 80a4b9c:	dc7a      	bgt.n	80a4c94 <_strtod_r+0x7f4>
 80a4b9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80a4ba0:	2b00      	cmp	r3, #0
 80a4ba2:	f040 8081 	bne.w	80a4ca8 <_strtod_r+0x808>
 80a4ba6:	2c00      	cmp	r4, #0
 80a4ba8:	f300 8088 	bgt.w	80a4cbc <_strtod_r+0x81c>
 80a4bac:	2e00      	cmp	r6, #0
 80a4bae:	f300 808f 	bgt.w	80a4cd0 <_strtod_r+0x830>
 80a4bb2:	9a04      	ldr	r2, [sp, #16]
 80a4bb4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a4bb6:	4650      	mov	r0, sl
 80a4bb8:	f001 fc37 	bl	80a642a <__mdiff>
 80a4bbc:	4683      	mov	fp, r0
 80a4bbe:	2800      	cmp	r0, #0
 80a4bc0:	f43f aeb4 	beq.w	80a492c <_strtod_r+0x48c>
 80a4bc4:	68c3      	ldr	r3, [r0, #12]
 80a4bc6:	2400      	movs	r4, #0
 80a4bc8:	60c4      	str	r4, [r0, #12]
 80a4bca:	9902      	ldr	r1, [sp, #8]
 80a4bcc:	9306      	str	r3, [sp, #24]
 80a4bce:	f001 fc10 	bl	80a63f2 <__mcmp>
 80a4bd2:	42a0      	cmp	r0, r4
 80a4bd4:	f280 808b 	bge.w	80a4cee <_strtod_r+0x84e>
 80a4bd8:	9b06      	ldr	r3, [sp, #24]
 80a4bda:	2b00      	cmp	r3, #0
 80a4bdc:	f040 8202 	bne.w	80a4fe4 <_strtod_r+0xb44>
 80a4be0:	f1b8 0f00 	cmp.w	r8, #0
 80a4be4:	f040 81fe 	bne.w	80a4fe4 <_strtod_r+0xb44>
 80a4be8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a4bec:	2b00      	cmp	r3, #0
 80a4bee:	f040 81f9 	bne.w	80a4fe4 <_strtod_r+0xb44>
 80a4bf2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a4bf6:	0d1b      	lsrs	r3, r3, #20
 80a4bf8:	051b      	lsls	r3, r3, #20
 80a4bfa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80a4bfe:	f240 81f1 	bls.w	80a4fe4 <_strtod_r+0xb44>
 80a4c02:	f8db 3014 	ldr.w	r3, [fp, #20]
 80a4c06:	2b00      	cmp	r3, #0
 80a4c08:	d06c      	beq.n	80a4ce4 <_strtod_r+0x844>
 80a4c0a:	4659      	mov	r1, fp
 80a4c0c:	2201      	movs	r2, #1
 80a4c0e:	4650      	mov	r0, sl
 80a4c10:	f001 fb9e 	bl	80a6350 <__lshift>
 80a4c14:	9902      	ldr	r1, [sp, #8]
 80a4c16:	4683      	mov	fp, r0
 80a4c18:	f001 fbeb 	bl	80a63f2 <__mcmp>
 80a4c1c:	2800      	cmp	r0, #0
 80a4c1e:	f340 81e1 	ble.w	80a4fe4 <_strtod_r+0xb44>
 80a4c22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a4c26:	9a03      	ldr	r2, [sp, #12]
 80a4c28:	0d1b      	lsrs	r3, r3, #20
 80a4c2a:	051b      	lsls	r3, r3, #20
 80a4c2c:	2a00      	cmp	r2, #0
 80a4c2e:	f000 808d 	beq.w	80a4d4c <_strtod_r+0x8ac>
 80a4c32:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80a4c36:	f300 8089 	bgt.w	80a4d4c <_strtod_r+0x8ac>
 80a4c3a:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 80a4c3e:	f300 81d3 	bgt.w	80a4fe8 <_strtod_r+0xb48>
 80a4c42:	2322      	movs	r3, #34	; 0x22
 80a4c44:	f04f 0800 	mov.w	r8, #0
 80a4c48:	f04f 0900 	mov.w	r9, #0
 80a4c4c:	f8ca 3000 	str.w	r3, [sl]
 80a4c50:	9b05      	ldr	r3, [sp, #20]
 80a4c52:	2b00      	cmp	r3, #0
 80a4c54:	f040 81d9 	bne.w	80a500a <_strtod_r+0xb6a>
 80a4c58:	e1eb      	b.n	80a5032 <_strtod_r+0xb92>
 80a4c5a:	2301      	movs	r3, #1
 80a4c5c:	2500      	movs	r5, #0
 80a4c5e:	9307      	str	r3, [sp, #28]
 80a4c60:	e788      	b.n	80a4b74 <_strtod_r+0x6d4>
 80a4c62:	461a      	mov	r2, r3
 80a4c64:	9902      	ldr	r1, [sp, #8]
 80a4c66:	4650      	mov	r0, sl
 80a4c68:	f001 fb24 	bl	80a62b4 <__pow5mult>
 80a4c6c:	9002      	str	r0, [sp, #8]
 80a4c6e:	2800      	cmp	r0, #0
 80a4c70:	f43f ae5c 	beq.w	80a492c <_strtod_r+0x48c>
 80a4c74:	4601      	mov	r1, r0
 80a4c76:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80a4c78:	4650      	mov	r0, sl
 80a4c7a:	f001 fa8a 	bl	80a6192 <__multiply>
 80a4c7e:	9006      	str	r0, [sp, #24]
 80a4c80:	2800      	cmp	r0, #0
 80a4c82:	f43f ae53 	beq.w	80a492c <_strtod_r+0x48c>
 80a4c86:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a4c88:	4650      	mov	r0, sl
 80a4c8a:	f001 f99c 	bl	80a5fc6 <_Bfree>
 80a4c8e:	9b06      	ldr	r3, [sp, #24]
 80a4c90:	9318      	str	r3, [sp, #96]	; 0x60
 80a4c92:	e782      	b.n	80a4b9a <_strtod_r+0x6fa>
 80a4c94:	463a      	mov	r2, r7
 80a4c96:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a4c98:	4650      	mov	r0, sl
 80a4c9a:	f001 fb59 	bl	80a6350 <__lshift>
 80a4c9e:	9018      	str	r0, [sp, #96]	; 0x60
 80a4ca0:	2800      	cmp	r0, #0
 80a4ca2:	f47f af7c 	bne.w	80a4b9e <_strtod_r+0x6fe>
 80a4ca6:	e641      	b.n	80a492c <_strtod_r+0x48c>
 80a4ca8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80a4caa:	9904      	ldr	r1, [sp, #16]
 80a4cac:	4650      	mov	r0, sl
 80a4cae:	f001 fb01 	bl	80a62b4 <__pow5mult>
 80a4cb2:	9004      	str	r0, [sp, #16]
 80a4cb4:	2800      	cmp	r0, #0
 80a4cb6:	f47f af76 	bne.w	80a4ba6 <_strtod_r+0x706>
 80a4cba:	e637      	b.n	80a492c <_strtod_r+0x48c>
 80a4cbc:	4622      	mov	r2, r4
 80a4cbe:	9904      	ldr	r1, [sp, #16]
 80a4cc0:	4650      	mov	r0, sl
 80a4cc2:	f001 fb45 	bl	80a6350 <__lshift>
 80a4cc6:	9004      	str	r0, [sp, #16]
 80a4cc8:	2800      	cmp	r0, #0
 80a4cca:	f47f af6f 	bne.w	80a4bac <_strtod_r+0x70c>
 80a4cce:	e62d      	b.n	80a492c <_strtod_r+0x48c>
 80a4cd0:	4632      	mov	r2, r6
 80a4cd2:	9902      	ldr	r1, [sp, #8]
 80a4cd4:	4650      	mov	r0, sl
 80a4cd6:	f001 fb3b 	bl	80a6350 <__lshift>
 80a4cda:	9002      	str	r0, [sp, #8]
 80a4cdc:	2800      	cmp	r0, #0
 80a4cde:	f47f af68 	bne.w	80a4bb2 <_strtod_r+0x712>
 80a4ce2:	e623      	b.n	80a492c <_strtod_r+0x48c>
 80a4ce4:	f8db 3010 	ldr.w	r3, [fp, #16]
 80a4ce8:	2b01      	cmp	r3, #1
 80a4cea:	dc8e      	bgt.n	80a4c0a <_strtod_r+0x76a>
 80a4cec:	e17a      	b.n	80a4fe4 <_strtod_r+0xb44>
 80a4cee:	d161      	bne.n	80a4db4 <_strtod_r+0x914>
 80a4cf0:	9a06      	ldr	r2, [sp, #24]
 80a4cf2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a4cf6:	b322      	cbz	r2, 80a4d42 <_strtod_r+0x8a2>
 80a4cf8:	4943      	ldr	r1, [pc, #268]	; (80a4e08 <_strtod_r+0x968>)
 80a4cfa:	464a      	mov	r2, r9
 80a4cfc:	428b      	cmp	r3, r1
 80a4cfe:	d12e      	bne.n	80a4d5e <_strtod_r+0x8be>
 80a4d00:	9b03      	ldr	r3, [sp, #12]
 80a4d02:	4641      	mov	r1, r8
 80a4d04:	b163      	cbz	r3, 80a4d20 <_strtod_r+0x880>
 80a4d06:	4b41      	ldr	r3, [pc, #260]	; (80a4e0c <_strtod_r+0x96c>)
 80a4d08:	4013      	ands	r3, r2
 80a4d0a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80a4d0e:	d807      	bhi.n	80a4d20 <_strtod_r+0x880>
 80a4d10:	0d1b      	lsrs	r3, r3, #20
 80a4d12:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a4d16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a4d1a:	fa00 f303 	lsl.w	r3, r0, r3
 80a4d1e:	e001      	b.n	80a4d24 <_strtod_r+0x884>
 80a4d20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a4d24:	428b      	cmp	r3, r1
 80a4d26:	d11a      	bne.n	80a4d5e <_strtod_r+0x8be>
 80a4d28:	4939      	ldr	r1, [pc, #228]	; (80a4e10 <_strtod_r+0x970>)
 80a4d2a:	428a      	cmp	r2, r1
 80a4d2c:	d102      	bne.n	80a4d34 <_strtod_r+0x894>
 80a4d2e:	3301      	adds	r3, #1
 80a4d30:	f43f adfc 	beq.w	80a492c <_strtod_r+0x48c>
 80a4d34:	4b35      	ldr	r3, [pc, #212]	; (80a4e0c <_strtod_r+0x96c>)
 80a4d36:	f04f 0800 	mov.w	r8, #0
 80a4d3a:	4013      	ands	r3, r2
 80a4d3c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80a4d40:	e150      	b.n	80a4fe4 <_strtod_r+0xb44>
 80a4d42:	b963      	cbnz	r3, 80a4d5e <_strtod_r+0x8be>
 80a4d44:	f1b8 0f00 	cmp.w	r8, #0
 80a4d48:	d109      	bne.n	80a4d5e <_strtod_r+0x8be>
 80a4d4a:	e76a      	b.n	80a4c22 <_strtod_r+0x782>
 80a4d4c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80a4d50:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80a4d54:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80a4d58:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80a4d5c:	e142      	b.n	80a4fe4 <_strtod_r+0xb44>
 80a4d5e:	b115      	cbz	r5, 80a4d66 <_strtod_r+0x8c6>
 80a4d60:	ea15 0f09 	tst.w	r5, r9
 80a4d64:	e002      	b.n	80a4d6c <_strtod_r+0x8cc>
 80a4d66:	9b07      	ldr	r3, [sp, #28]
 80a4d68:	ea13 0f08 	tst.w	r3, r8
 80a4d6c:	f000 813a 	beq.w	80a4fe4 <_strtod_r+0xb44>
 80a4d70:	9b06      	ldr	r3, [sp, #24]
 80a4d72:	9a03      	ldr	r2, [sp, #12]
 80a4d74:	4640      	mov	r0, r8
 80a4d76:	4649      	mov	r1, r9
 80a4d78:	b153      	cbz	r3, 80a4d90 <_strtod_r+0x8f0>
 80a4d7a:	f7ff fb6e 	bl	80a445a <sulp>
 80a4d7e:	4602      	mov	r2, r0
 80a4d80:	460b      	mov	r3, r1
 80a4d82:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a4d86:	f7fe f991 	bl	80a30ac <__adddf3>
 80a4d8a:	4680      	mov	r8, r0
 80a4d8c:	4689      	mov	r9, r1
 80a4d8e:	e129      	b.n	80a4fe4 <_strtod_r+0xb44>
 80a4d90:	f7ff fb63 	bl	80a445a <sulp>
 80a4d94:	4602      	mov	r2, r0
 80a4d96:	460b      	mov	r3, r1
 80a4d98:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a4d9c:	f7fe f984 	bl	80a30a8 <__aeabi_dsub>
 80a4da0:	2200      	movs	r2, #0
 80a4da2:	2300      	movs	r3, #0
 80a4da4:	4680      	mov	r8, r0
 80a4da6:	4689      	mov	r9, r1
 80a4da8:	f7fe fd9a 	bl	80a38e0 <__aeabi_dcmpeq>
 80a4dac:	2800      	cmp	r0, #0
 80a4dae:	f47f af48 	bne.w	80a4c42 <_strtod_r+0x7a2>
 80a4db2:	e117      	b.n	80a4fe4 <_strtod_r+0xb44>
 80a4db4:	9902      	ldr	r1, [sp, #8]
 80a4db6:	4658      	mov	r0, fp
 80a4db8:	f001 fc55 	bl	80a6666 <__ratio>
 80a4dbc:	2200      	movs	r2, #0
 80a4dbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a4dc2:	4606      	mov	r6, r0
 80a4dc4:	460f      	mov	r7, r1
 80a4dc6:	f7fe fd9f 	bl	80a3908 <__aeabi_dcmple>
 80a4dca:	2800      	cmp	r0, #0
 80a4dcc:	d03f      	beq.n	80a4e4e <_strtod_r+0x9ae>
 80a4dce:	9b06      	ldr	r3, [sp, #24]
 80a4dd0:	b113      	cbz	r3, 80a4dd8 <_strtod_r+0x938>
 80a4dd2:	2600      	movs	r6, #0
 80a4dd4:	4f0f      	ldr	r7, [pc, #60]	; (80a4e14 <_strtod_r+0x974>)
 80a4dd6:	e010      	b.n	80a4dfa <_strtod_r+0x95a>
 80a4dd8:	f1b8 0f00 	cmp.w	r8, #0
 80a4ddc:	d103      	bne.n	80a4de6 <_strtod_r+0x946>
 80a4dde:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a4de2:	b93b      	cbnz	r3, 80a4df4 <_strtod_r+0x954>
 80a4de4:	e01a      	b.n	80a4e1c <_strtod_r+0x97c>
 80a4de6:	f1b8 0f01 	cmp.w	r8, #1
 80a4dea:	d103      	bne.n	80a4df4 <_strtod_r+0x954>
 80a4dec:	f1b9 0f00 	cmp.w	r9, #0
 80a4df0:	f43f af27 	beq.w	80a4c42 <_strtod_r+0x7a2>
 80a4df4:	4f08      	ldr	r7, [pc, #32]	; (80a4e18 <_strtod_r+0x978>)
 80a4df6:	2600      	movs	r6, #0
 80a4df8:	2400      	movs	r4, #0
 80a4dfa:	4d06      	ldr	r5, [pc, #24]	; (80a4e14 <_strtod_r+0x974>)
 80a4dfc:	e03c      	b.n	80a4e78 <_strtod_r+0x9d8>
 80a4dfe:	bf00      	nop
 80a4e00:	fffffc02 	.word	0xfffffc02
 80a4e04:	fffffbe2 	.word	0xfffffbe2
 80a4e08:	000fffff 	.word	0x000fffff
 80a4e0c:	7ff00000 	.word	0x7ff00000
 80a4e10:	7fefffff 	.word	0x7fefffff
 80a4e14:	3ff00000 	.word	0x3ff00000
 80a4e18:	bff00000 	.word	0xbff00000
 80a4e1c:	2200      	movs	r2, #0
 80a4e1e:	4b9a      	ldr	r3, [pc, #616]	; (80a5088 <_strtod_r+0xbe8>)
 80a4e20:	4630      	mov	r0, r6
 80a4e22:	4639      	mov	r1, r7
 80a4e24:	f7fe fd66 	bl	80a38f4 <__aeabi_dcmplt>
 80a4e28:	b940      	cbnz	r0, 80a4e3c <_strtod_r+0x99c>
 80a4e2a:	2200      	movs	r2, #0
 80a4e2c:	4b97      	ldr	r3, [pc, #604]	; (80a508c <_strtod_r+0xbec>)
 80a4e2e:	4630      	mov	r0, r6
 80a4e30:	4639      	mov	r1, r7
 80a4e32:	f7fe faed 	bl	80a3410 <__aeabi_dmul>
 80a4e36:	4604      	mov	r4, r0
 80a4e38:	460d      	mov	r5, r1
 80a4e3a:	e001      	b.n	80a4e40 <_strtod_r+0x9a0>
 80a4e3c:	9c06      	ldr	r4, [sp, #24]
 80a4e3e:	4d93      	ldr	r5, [pc, #588]	; (80a508c <_strtod_r+0xbec>)
 80a4e40:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80a4e44:	9414      	str	r4, [sp, #80]	; 0x50
 80a4e46:	9315      	str	r3, [sp, #84]	; 0x54
 80a4e48:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 80a4e4c:	e014      	b.n	80a4e78 <_strtod_r+0x9d8>
 80a4e4e:	4b8f      	ldr	r3, [pc, #572]	; (80a508c <_strtod_r+0xbec>)
 80a4e50:	2200      	movs	r2, #0
 80a4e52:	4630      	mov	r0, r6
 80a4e54:	4639      	mov	r1, r7
 80a4e56:	f7fe fadb 	bl	80a3410 <__aeabi_dmul>
 80a4e5a:	9b06      	ldr	r3, [sp, #24]
 80a4e5c:	4604      	mov	r4, r0
 80a4e5e:	460d      	mov	r5, r1
 80a4e60:	b923      	cbnz	r3, 80a4e6c <_strtod_r+0x9cc>
 80a4e62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a4e66:	900e      	str	r0, [sp, #56]	; 0x38
 80a4e68:	930f      	str	r3, [sp, #60]	; 0x3c
 80a4e6a:	e003      	b.n	80a4e74 <_strtod_r+0x9d4>
 80a4e6c:	4602      	mov	r2, r0
 80a4e6e:	460b      	mov	r3, r1
 80a4e70:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80a4e74:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 80a4e78:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a4e7c:	0d1b      	lsrs	r3, r3, #20
 80a4e7e:	051b      	lsls	r3, r3, #20
 80a4e80:	9307      	str	r3, [sp, #28]
 80a4e82:	9a07      	ldr	r2, [sp, #28]
 80a4e84:	4b82      	ldr	r3, [pc, #520]	; (80a5090 <_strtod_r+0xbf0>)
 80a4e86:	429a      	cmp	r2, r3
 80a4e88:	d12b      	bne.n	80a4ee2 <_strtod_r+0xa42>
 80a4e8a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a4e8e:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80a4e92:	4640      	mov	r0, r8
 80a4e94:	4649      	mov	r1, r9
 80a4e96:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80a4e9a:	f001 fb25 	bl	80a64e8 <__ulp>
 80a4e9e:	4602      	mov	r2, r0
 80a4ea0:	460b      	mov	r3, r1
 80a4ea2:	4630      	mov	r0, r6
 80a4ea4:	4639      	mov	r1, r7
 80a4ea6:	f7fe fab3 	bl	80a3410 <__aeabi_dmul>
 80a4eaa:	4642      	mov	r2, r8
 80a4eac:	464b      	mov	r3, r9
 80a4eae:	f7fe f8fd 	bl	80a30ac <__adddf3>
 80a4eb2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a4eb6:	0d1b      	lsrs	r3, r3, #20
 80a4eb8:	4a76      	ldr	r2, [pc, #472]	; (80a5094 <_strtod_r+0xbf4>)
 80a4eba:	051b      	lsls	r3, r3, #20
 80a4ebc:	4293      	cmp	r3, r2
 80a4ebe:	4680      	mov	r8, r0
 80a4ec0:	d90c      	bls.n	80a4edc <_strtod_r+0xa3c>
 80a4ec2:	4b75      	ldr	r3, [pc, #468]	; (80a5098 <_strtod_r+0xbf8>)
 80a4ec4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a4ec6:	429a      	cmp	r2, r3
 80a4ec8:	d103      	bne.n	80a4ed2 <_strtod_r+0xa32>
 80a4eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a4ecc:	3301      	adds	r3, #1
 80a4ece:	f43f ad2d 	beq.w	80a492c <_strtod_r+0x48c>
 80a4ed2:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 80a5098 <_strtod_r+0xbf8>
 80a4ed6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80a4eda:	e072      	b.n	80a4fc2 <_strtod_r+0xb22>
 80a4edc:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 80a4ee0:	e039      	b.n	80a4f56 <_strtod_r+0xab6>
 80a4ee2:	9b03      	ldr	r3, [sp, #12]
 80a4ee4:	b33b      	cbz	r3, 80a4f36 <_strtod_r+0xa96>
 80a4ee6:	9b07      	ldr	r3, [sp, #28]
 80a4ee8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80a4eec:	d823      	bhi.n	80a4f36 <_strtod_r+0xa96>
 80a4eee:	a35e      	add	r3, pc, #376	; (adr r3, 80a5068 <_strtod_r+0xbc8>)
 80a4ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4ef4:	4620      	mov	r0, r4
 80a4ef6:	4629      	mov	r1, r5
 80a4ef8:	f7fe fd06 	bl	80a3908 <__aeabi_dcmple>
 80a4efc:	b1b8      	cbz	r0, 80a4f2e <_strtod_r+0xa8e>
 80a4efe:	4629      	mov	r1, r5
 80a4f00:	4620      	mov	r0, r4
 80a4f02:	f7fe fd5d 	bl	80a39c0 <__aeabi_d2uiz>
 80a4f06:	2800      	cmp	r0, #0
 80a4f08:	bf08      	it	eq
 80a4f0a:	2001      	moveq	r0, #1
 80a4f0c:	f7fe fa0a 	bl	80a3324 <__aeabi_ui2d>
 80a4f10:	9b06      	ldr	r3, [sp, #24]
 80a4f12:	4604      	mov	r4, r0
 80a4f14:	460d      	mov	r5, r1
 80a4f16:	b923      	cbnz	r3, 80a4f22 <_strtod_r+0xa82>
 80a4f18:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a4f1c:	9010      	str	r0, [sp, #64]	; 0x40
 80a4f1e:	9311      	str	r3, [sp, #68]	; 0x44
 80a4f20:	e003      	b.n	80a4f2a <_strtod_r+0xa8a>
 80a4f22:	4602      	mov	r2, r0
 80a4f24:	460b      	mov	r3, r1
 80a4f26:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80a4f2a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80a4f2e:	9a07      	ldr	r2, [sp, #28]
 80a4f30:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80a4f34:	1a9f      	subs	r7, r3, r2
 80a4f36:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a4f3a:	f001 fad5 	bl	80a64e8 <__ulp>
 80a4f3e:	4602      	mov	r2, r0
 80a4f40:	460b      	mov	r3, r1
 80a4f42:	4630      	mov	r0, r6
 80a4f44:	4639      	mov	r1, r7
 80a4f46:	f7fe fa63 	bl	80a3410 <__aeabi_dmul>
 80a4f4a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a4f4e:	f7fe f8ad 	bl	80a30ac <__adddf3>
 80a4f52:	4680      	mov	r8, r0
 80a4f54:	4689      	mov	r9, r1
 80a4f56:	9b03      	ldr	r3, [sp, #12]
 80a4f58:	bb9b      	cbnz	r3, 80a4fc2 <_strtod_r+0xb22>
 80a4f5a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a4f5e:	0d1b      	lsrs	r3, r3, #20
 80a4f60:	9a07      	ldr	r2, [sp, #28]
 80a4f62:	051b      	lsls	r3, r3, #20
 80a4f64:	429a      	cmp	r2, r3
 80a4f66:	464e      	mov	r6, r9
 80a4f68:	d12b      	bne.n	80a4fc2 <_strtod_r+0xb22>
 80a4f6a:	4629      	mov	r1, r5
 80a4f6c:	4620      	mov	r0, r4
 80a4f6e:	f7fe fcff 	bl	80a3970 <__aeabi_d2iz>
 80a4f72:	f7fe f9e7 	bl	80a3344 <__aeabi_i2d>
 80a4f76:	460b      	mov	r3, r1
 80a4f78:	4602      	mov	r2, r0
 80a4f7a:	4629      	mov	r1, r5
 80a4f7c:	4620      	mov	r0, r4
 80a4f7e:	f7fe f893 	bl	80a30a8 <__aeabi_dsub>
 80a4f82:	9b06      	ldr	r3, [sp, #24]
 80a4f84:	4604      	mov	r4, r0
 80a4f86:	460d      	mov	r5, r1
 80a4f88:	b92b      	cbnz	r3, 80a4f96 <_strtod_r+0xaf6>
 80a4f8a:	f1b8 0f00 	cmp.w	r8, #0
 80a4f8e:	d102      	bne.n	80a4f96 <_strtod_r+0xaf6>
 80a4f90:	f3c9 0613 	ubfx	r6, r9, #0, #20
 80a4f94:	b17e      	cbz	r6, 80a4fb6 <_strtod_r+0xb16>
 80a4f96:	a336      	add	r3, pc, #216	; (adr r3, 80a5070 <_strtod_r+0xbd0>)
 80a4f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4f9c:	4620      	mov	r0, r4
 80a4f9e:	4629      	mov	r1, r5
 80a4fa0:	f7fe fca8 	bl	80a38f4 <__aeabi_dcmplt>
 80a4fa4:	bb88      	cbnz	r0, 80a500a <_strtod_r+0xb6a>
 80a4fa6:	a334      	add	r3, pc, #208	; (adr r3, 80a5078 <_strtod_r+0xbd8>)
 80a4fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4fac:	4620      	mov	r0, r4
 80a4fae:	4629      	mov	r1, r5
 80a4fb0:	f7fe fcbe 	bl	80a3930 <__aeabi_dcmpgt>
 80a4fb4:	e004      	b.n	80a4fc0 <_strtod_r+0xb20>
 80a4fb6:	a332      	add	r3, pc, #200	; (adr r3, 80a5080 <_strtod_r+0xbe0>)
 80a4fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4fbc:	f7fe fc9a 	bl	80a38f4 <__aeabi_dcmplt>
 80a4fc0:	bb18      	cbnz	r0, 80a500a <_strtod_r+0xb6a>
 80a4fc2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a4fc4:	4650      	mov	r0, sl
 80a4fc6:	f000 fffe 	bl	80a5fc6 <_Bfree>
 80a4fca:	9904      	ldr	r1, [sp, #16]
 80a4fcc:	4650      	mov	r0, sl
 80a4fce:	f000 fffa 	bl	80a5fc6 <_Bfree>
 80a4fd2:	9902      	ldr	r1, [sp, #8]
 80a4fd4:	4650      	mov	r0, sl
 80a4fd6:	f000 fff6 	bl	80a5fc6 <_Bfree>
 80a4fda:	4659      	mov	r1, fp
 80a4fdc:	4650      	mov	r0, sl
 80a4fde:	f000 fff2 	bl	80a5fc6 <_Bfree>
 80a4fe2:	e574      	b.n	80a4ace <_strtod_r+0x62e>
 80a4fe4:	9b03      	ldr	r3, [sp, #12]
 80a4fe6:	b183      	cbz	r3, 80a500a <_strtod_r+0xb6a>
 80a4fe8:	4b2c      	ldr	r3, [pc, #176]	; (80a509c <_strtod_r+0xbfc>)
 80a4fea:	4640      	mov	r0, r8
 80a4fec:	930b      	str	r3, [sp, #44]	; 0x2c
 80a4fee:	2300      	movs	r3, #0
 80a4ff0:	930a      	str	r3, [sp, #40]	; 0x28
 80a4ff2:	4649      	mov	r1, r9
 80a4ff4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a4ff8:	f7fe fa0a 	bl	80a3410 <__aeabi_dmul>
 80a4ffc:	4680      	mov	r8, r0
 80a4ffe:	4689      	mov	r9, r1
 80a5000:	b919      	cbnz	r1, 80a500a <_strtod_r+0xb6a>
 80a5002:	b910      	cbnz	r0, 80a500a <_strtod_r+0xb6a>
 80a5004:	2322      	movs	r3, #34	; 0x22
 80a5006:	f8ca 3000 	str.w	r3, [sl]
 80a500a:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a500c:	4650      	mov	r0, sl
 80a500e:	f000 ffda 	bl	80a5fc6 <_Bfree>
 80a5012:	9904      	ldr	r1, [sp, #16]
 80a5014:	4650      	mov	r0, sl
 80a5016:	f000 ffd6 	bl	80a5fc6 <_Bfree>
 80a501a:	9902      	ldr	r1, [sp, #8]
 80a501c:	4650      	mov	r0, sl
 80a501e:	f000 ffd2 	bl	80a5fc6 <_Bfree>
 80a5022:	9905      	ldr	r1, [sp, #20]
 80a5024:	4650      	mov	r0, sl
 80a5026:	f000 ffce 	bl	80a5fc6 <_Bfree>
 80a502a:	4659      	mov	r1, fp
 80a502c:	4650      	mov	r0, sl
 80a502e:	f000 ffca 	bl	80a5fc6 <_Bfree>
 80a5032:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a5034:	b113      	cbz	r3, 80a503c <_strtod_r+0xb9c>
 80a5036:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a5038:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80a503a:	6013      	str	r3, [r2, #0]
 80a503c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a503e:	b11b      	cbz	r3, 80a5048 <_strtod_r+0xba8>
 80a5040:	4642      	mov	r2, r8
 80a5042:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80a5046:	e007      	b.n	80a5058 <_strtod_r+0xbb8>
 80a5048:	4642      	mov	r2, r8
 80a504a:	464b      	mov	r3, r9
 80a504c:	e004      	b.n	80a5058 <_strtod_r+0xbb8>
 80a504e:	2500      	movs	r5, #0
 80a5050:	462a      	mov	r2, r5
 80a5052:	2101      	movs	r1, #1
 80a5054:	f7ff bb47 	b.w	80a46e6 <_strtod_r+0x246>
 80a5058:	4610      	mov	r0, r2
 80a505a:	4619      	mov	r1, r3
 80a505c:	b01d      	add	sp, #116	; 0x74
 80a505e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5062:	bf00      	nop
 80a5064:	f3af 8000 	nop.w
 80a5068:	ffc00000 	.word	0xffc00000
 80a506c:	41dfffff 	.word	0x41dfffff
 80a5070:	94a03595 	.word	0x94a03595
 80a5074:	3fdfffff 	.word	0x3fdfffff
 80a5078:	35afe535 	.word	0x35afe535
 80a507c:	3fe00000 	.word	0x3fe00000
 80a5080:	94a03595 	.word	0x94a03595
 80a5084:	3fcfffff 	.word	0x3fcfffff
 80a5088:	3ff00000 	.word	0x3ff00000
 80a508c:	3fe00000 	.word	0x3fe00000
 80a5090:	7fe00000 	.word	0x7fe00000
 80a5094:	7c9fffff 	.word	0x7c9fffff
 80a5098:	7fefffff 	.word	0x7fefffff
 80a509c:	39500000 	.word	0x39500000

080a50a0 <strtof>:
 80a50a0:	b538      	push	{r3, r4, r5, lr}
 80a50a2:	4b0b      	ldr	r3, [pc, #44]	; (80a50d0 <strtof+0x30>)
 80a50a4:	460a      	mov	r2, r1
 80a50a6:	4601      	mov	r1, r0
 80a50a8:	6818      	ldr	r0, [r3, #0]
 80a50aa:	f7ff f9f9 	bl	80a44a0 <_strtod_r>
 80a50ae:	4602      	mov	r2, r0
 80a50b0:	460b      	mov	r3, r1
 80a50b2:	4604      	mov	r4, r0
 80a50b4:	460d      	mov	r5, r1
 80a50b6:	f7fe fc45 	bl	80a3944 <__aeabi_dcmpun>
 80a50ba:	b120      	cbz	r0, 80a50c6 <strtof+0x26>
 80a50bc:	2000      	movs	r0, #0
 80a50be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a50c2:	f001 bb43 	b.w	80a674c <nanf>
 80a50c6:	4620      	mov	r0, r4
 80a50c8:	4629      	mov	r1, r5
 80a50ca:	f7fe fc99 	bl	80a3a00 <__aeabi_d2f>
 80a50ce:	bd38      	pop	{r3, r4, r5, pc}
 80a50d0:	200003d8 	.word	0x200003d8

080a50d4 <_strtol_r>:
 80a50d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a50d8:	460f      	mov	r7, r1
 80a50da:	4680      	mov	r8, r0
 80a50dc:	483f      	ldr	r0, [pc, #252]	; (80a51dc <_strtol_r+0x108>)
 80a50de:	f8d0 9000 	ldr.w	r9, [r0]
 80a50e2:	463d      	mov	r5, r7
 80a50e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a50e8:	eb09 0004 	add.w	r0, r9, r4
 80a50ec:	7840      	ldrb	r0, [r0, #1]
 80a50ee:	f000 0008 	and.w	r0, r0, #8
 80a50f2:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a50f6:	b108      	cbz	r0, 80a50fc <_strtol_r+0x28>
 80a50f8:	462f      	mov	r7, r5
 80a50fa:	e7f2      	b.n	80a50e2 <_strtol_r+0xe>
 80a50fc:	2c2d      	cmp	r4, #45	; 0x2d
 80a50fe:	d103      	bne.n	80a5108 <_strtol_r+0x34>
 80a5100:	1cbd      	adds	r5, r7, #2
 80a5102:	787c      	ldrb	r4, [r7, #1]
 80a5104:	2601      	movs	r6, #1
 80a5106:	e003      	b.n	80a5110 <_strtol_r+0x3c>
 80a5108:	2c2b      	cmp	r4, #43	; 0x2b
 80a510a:	bf04      	itt	eq
 80a510c:	787c      	ldrbeq	r4, [r7, #1]
 80a510e:	1cbd      	addeq	r5, r7, #2
 80a5110:	b113      	cbz	r3, 80a5118 <_strtol_r+0x44>
 80a5112:	2b10      	cmp	r3, #16
 80a5114:	d10a      	bne.n	80a512c <_strtol_r+0x58>
 80a5116:	e05b      	b.n	80a51d0 <_strtol_r+0xfc>
 80a5118:	2c30      	cmp	r4, #48	; 0x30
 80a511a:	d157      	bne.n	80a51cc <_strtol_r+0xf8>
 80a511c:	7828      	ldrb	r0, [r5, #0]
 80a511e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a5122:	2858      	cmp	r0, #88	; 0x58
 80a5124:	d14d      	bne.n	80a51c2 <_strtol_r+0xee>
 80a5126:	786c      	ldrb	r4, [r5, #1]
 80a5128:	2310      	movs	r3, #16
 80a512a:	3502      	adds	r5, #2
 80a512c:	2e00      	cmp	r6, #0
 80a512e:	bf14      	ite	ne
 80a5130:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a5134:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a5138:	fbbc faf3 	udiv	sl, ip, r3
 80a513c:	2700      	movs	r7, #0
 80a513e:	4638      	mov	r0, r7
 80a5140:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a5144:	eb09 0e04 	add.w	lr, r9, r4
 80a5148:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a514c:	f01e 0f04 	tst.w	lr, #4
 80a5150:	d001      	beq.n	80a5156 <_strtol_r+0x82>
 80a5152:	3c30      	subs	r4, #48	; 0x30
 80a5154:	e00b      	b.n	80a516e <_strtol_r+0x9a>
 80a5156:	f01e 0e03 	ands.w	lr, lr, #3
 80a515a:	d01b      	beq.n	80a5194 <_strtol_r+0xc0>
 80a515c:	f1be 0f01 	cmp.w	lr, #1
 80a5160:	bf0c      	ite	eq
 80a5162:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a5166:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a516a:	ebce 0404 	rsb	r4, lr, r4
 80a516e:	42a3      	cmp	r3, r4
 80a5170:	dd10      	ble.n	80a5194 <_strtol_r+0xc0>
 80a5172:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80a5176:	d00a      	beq.n	80a518e <_strtol_r+0xba>
 80a5178:	4550      	cmp	r0, sl
 80a517a:	d806      	bhi.n	80a518a <_strtol_r+0xb6>
 80a517c:	d101      	bne.n	80a5182 <_strtol_r+0xae>
 80a517e:	4564      	cmp	r4, ip
 80a5180:	dc03      	bgt.n	80a518a <_strtol_r+0xb6>
 80a5182:	fb03 4000 	mla	r0, r3, r0, r4
 80a5186:	2701      	movs	r7, #1
 80a5188:	e001      	b.n	80a518e <_strtol_r+0xba>
 80a518a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a518e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a5192:	e7d7      	b.n	80a5144 <_strtol_r+0x70>
 80a5194:	1c7b      	adds	r3, r7, #1
 80a5196:	d10c      	bne.n	80a51b2 <_strtol_r+0xde>
 80a5198:	2e00      	cmp	r6, #0
 80a519a:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a519e:	bf14      	ite	ne
 80a51a0:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a51a4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a51a8:	f8c8 3000 	str.w	r3, [r8]
 80a51ac:	b92a      	cbnz	r2, 80a51ba <_strtol_r+0xe6>
 80a51ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a51b2:	b106      	cbz	r6, 80a51b6 <_strtol_r+0xe2>
 80a51b4:	4240      	negs	r0, r0
 80a51b6:	b172      	cbz	r2, 80a51d6 <_strtol_r+0x102>
 80a51b8:	b107      	cbz	r7, 80a51bc <_strtol_r+0xe8>
 80a51ba:	1e69      	subs	r1, r5, #1
 80a51bc:	6011      	str	r1, [r2, #0]
 80a51be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a51c2:	2430      	movs	r4, #48	; 0x30
 80a51c4:	2b00      	cmp	r3, #0
 80a51c6:	d1b1      	bne.n	80a512c <_strtol_r+0x58>
 80a51c8:	2308      	movs	r3, #8
 80a51ca:	e7af      	b.n	80a512c <_strtol_r+0x58>
 80a51cc:	230a      	movs	r3, #10
 80a51ce:	e7ad      	b.n	80a512c <_strtol_r+0x58>
 80a51d0:	2c30      	cmp	r4, #48	; 0x30
 80a51d2:	d0a3      	beq.n	80a511c <_strtol_r+0x48>
 80a51d4:	e7aa      	b.n	80a512c <_strtol_r+0x58>
 80a51d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a51da:	bf00      	nop
 80a51dc:	20000374 	.word	0x20000374

080a51e0 <strtol>:
 80a51e0:	4613      	mov	r3, r2
 80a51e2:	460a      	mov	r2, r1
 80a51e4:	4601      	mov	r1, r0
 80a51e6:	4802      	ldr	r0, [pc, #8]	; (80a51f0 <strtol+0x10>)
 80a51e8:	6800      	ldr	r0, [r0, #0]
 80a51ea:	f7ff bf73 	b.w	80a50d4 <_strtol_r>
 80a51ee:	bf00      	nop
 80a51f0:	200003d8 	.word	0x200003d8

080a51f4 <_strtoul_r>:
 80a51f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a51f8:	460e      	mov	r6, r1
 80a51fa:	4680      	mov	r8, r0
 80a51fc:	483b      	ldr	r0, [pc, #236]	; (80a52ec <_strtoul_r+0xf8>)
 80a51fe:	f8d0 9000 	ldr.w	r9, [r0]
 80a5202:	4635      	mov	r5, r6
 80a5204:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a5208:	eb09 0004 	add.w	r0, r9, r4
 80a520c:	7840      	ldrb	r0, [r0, #1]
 80a520e:	f000 0008 	and.w	r0, r0, #8
 80a5212:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 80a5216:	b108      	cbz	r0, 80a521c <_strtoul_r+0x28>
 80a5218:	462e      	mov	r6, r5
 80a521a:	e7f2      	b.n	80a5202 <_strtoul_r+0xe>
 80a521c:	2c2d      	cmp	r4, #45	; 0x2d
 80a521e:	d103      	bne.n	80a5228 <_strtoul_r+0x34>
 80a5220:	1cb5      	adds	r5, r6, #2
 80a5222:	7874      	ldrb	r4, [r6, #1]
 80a5224:	2701      	movs	r7, #1
 80a5226:	e003      	b.n	80a5230 <_strtoul_r+0x3c>
 80a5228:	2c2b      	cmp	r4, #43	; 0x2b
 80a522a:	bf04      	itt	eq
 80a522c:	7874      	ldrbeq	r4, [r6, #1]
 80a522e:	1cb5      	addeq	r5, r6, #2
 80a5230:	b113      	cbz	r3, 80a5238 <_strtoul_r+0x44>
 80a5232:	2b10      	cmp	r3, #16
 80a5234:	d10a      	bne.n	80a524c <_strtoul_r+0x58>
 80a5236:	e053      	b.n	80a52e0 <_strtoul_r+0xec>
 80a5238:	2c30      	cmp	r4, #48	; 0x30
 80a523a:	d14f      	bne.n	80a52dc <_strtoul_r+0xe8>
 80a523c:	7828      	ldrb	r0, [r5, #0]
 80a523e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a5242:	2858      	cmp	r0, #88	; 0x58
 80a5244:	d145      	bne.n	80a52d2 <_strtoul_r+0xde>
 80a5246:	786c      	ldrb	r4, [r5, #1]
 80a5248:	2310      	movs	r3, #16
 80a524a:	3502      	adds	r5, #2
 80a524c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a5250:	fbbc fcf3 	udiv	ip, ip, r3
 80a5254:	fb03 fa0c 	mul.w	sl, r3, ip
 80a5258:	2600      	movs	r6, #0
 80a525a:	ea6f 0a0a 	mvn.w	sl, sl
 80a525e:	4630      	mov	r0, r6
 80a5260:	eb09 0e04 	add.w	lr, r9, r4
 80a5264:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a5268:	f01e 0f04 	tst.w	lr, #4
 80a526c:	d001      	beq.n	80a5272 <_strtoul_r+0x7e>
 80a526e:	3c30      	subs	r4, #48	; 0x30
 80a5270:	e00b      	b.n	80a528a <_strtoul_r+0x96>
 80a5272:	f01e 0e03 	ands.w	lr, lr, #3
 80a5276:	d01a      	beq.n	80a52ae <_strtoul_r+0xba>
 80a5278:	f1be 0f01 	cmp.w	lr, #1
 80a527c:	bf0c      	ite	eq
 80a527e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a5282:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a5286:	ebce 0404 	rsb	r4, lr, r4
 80a528a:	42a3      	cmp	r3, r4
 80a528c:	dd0f      	ble.n	80a52ae <_strtoul_r+0xba>
 80a528e:	2e00      	cmp	r6, #0
 80a5290:	db08      	blt.n	80a52a4 <_strtoul_r+0xb0>
 80a5292:	4560      	cmp	r0, ip
 80a5294:	d806      	bhi.n	80a52a4 <_strtoul_r+0xb0>
 80a5296:	d101      	bne.n	80a529c <_strtoul_r+0xa8>
 80a5298:	4554      	cmp	r4, sl
 80a529a:	dc03      	bgt.n	80a52a4 <_strtoul_r+0xb0>
 80a529c:	fb03 4000 	mla	r0, r3, r0, r4
 80a52a0:	2601      	movs	r6, #1
 80a52a2:	e001      	b.n	80a52a8 <_strtoul_r+0xb4>
 80a52a4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80a52a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a52ac:	e7d8      	b.n	80a5260 <_strtoul_r+0x6c>
 80a52ae:	2e00      	cmp	r6, #0
 80a52b0:	da07      	bge.n	80a52c2 <_strtoul_r+0xce>
 80a52b2:	2322      	movs	r3, #34	; 0x22
 80a52b4:	f8c8 3000 	str.w	r3, [r8]
 80a52b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a52bc:	b92a      	cbnz	r2, 80a52ca <_strtoul_r+0xd6>
 80a52be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a52c2:	b107      	cbz	r7, 80a52c6 <_strtoul_r+0xd2>
 80a52c4:	4240      	negs	r0, r0
 80a52c6:	b172      	cbz	r2, 80a52e6 <_strtoul_r+0xf2>
 80a52c8:	b106      	cbz	r6, 80a52cc <_strtoul_r+0xd8>
 80a52ca:	1e69      	subs	r1, r5, #1
 80a52cc:	6011      	str	r1, [r2, #0]
 80a52ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a52d2:	2430      	movs	r4, #48	; 0x30
 80a52d4:	2b00      	cmp	r3, #0
 80a52d6:	d1b9      	bne.n	80a524c <_strtoul_r+0x58>
 80a52d8:	2308      	movs	r3, #8
 80a52da:	e7b7      	b.n	80a524c <_strtoul_r+0x58>
 80a52dc:	230a      	movs	r3, #10
 80a52de:	e7b5      	b.n	80a524c <_strtoul_r+0x58>
 80a52e0:	2c30      	cmp	r4, #48	; 0x30
 80a52e2:	d0ab      	beq.n	80a523c <_strtoul_r+0x48>
 80a52e4:	e7b2      	b.n	80a524c <_strtoul_r+0x58>
 80a52e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a52ea:	bf00      	nop
 80a52ec:	20000374 	.word	0x20000374

080a52f0 <strtoul>:
 80a52f0:	4613      	mov	r3, r2
 80a52f2:	460a      	mov	r2, r1
 80a52f4:	4601      	mov	r1, r0
 80a52f6:	4802      	ldr	r0, [pc, #8]	; (80a5300 <strtoul+0x10>)
 80a52f8:	6800      	ldr	r0, [r0, #0]
 80a52fa:	f7ff bf7b 	b.w	80a51f4 <_strtoul_r>
 80a52fe:	bf00      	nop
 80a5300:	200003d8 	.word	0x200003d8

080a5304 <__tzcalc_limits>:
 80a5304:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5308:	4604      	mov	r4, r0
 80a530a:	f000 fd8d 	bl	80a5e28 <__gettzinfo>
 80a530e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a5312:	429c      	cmp	r4, r3
 80a5314:	f340 8096 	ble.w	80a5444 <__tzcalc_limits+0x140>
 80a5318:	f240 156d 	movw	r5, #365	; 0x16d
 80a531c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80a5320:	18e3      	adds	r3, r4, r3
 80a5322:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 80a5326:	109b      	asrs	r3, r3, #2
 80a5328:	fb05 3502 	mla	r5, r5, r2, r3
 80a532c:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 80a5330:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80a5334:	fb92 f3f3 	sdiv	r3, r2, r3
 80a5338:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80a533c:	442b      	add	r3, r5
 80a533e:	18a5      	adds	r5, r4, r2
 80a5340:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a5344:	fb94 f7f2 	sdiv	r7, r4, r2
 80a5348:	fb95 f5f2 	sdiv	r5, r5, r2
 80a534c:	fb02 4717 	mls	r7, r2, r7, r4
 80a5350:	441d      	add	r5, r3
 80a5352:	2364      	movs	r3, #100	; 0x64
 80a5354:	fb94 f6f3 	sdiv	r6, r4, r3
 80a5358:	fab7 fe87 	clz	lr, r7
 80a535c:	4601      	mov	r1, r0
 80a535e:	fb03 4616 	mls	r6, r3, r6, r4
 80a5362:	f100 0338 	add.w	r3, r0, #56	; 0x38
 80a5366:	9301      	str	r3, [sp, #4]
 80a5368:	f004 0303 	and.w	r3, r4, #3
 80a536c:	6044      	str	r4, [r0, #4]
 80a536e:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80a5372:	9300      	str	r3, [sp, #0]
 80a5374:	f04f 0c07 	mov.w	ip, #7
 80a5378:	7a0b      	ldrb	r3, [r1, #8]
 80a537a:	2b4a      	cmp	r3, #74	; 0x4a
 80a537c:	d10e      	bne.n	80a539c <__tzcalc_limits+0x98>
 80a537e:	694b      	ldr	r3, [r1, #20]
 80a5380:	9a00      	ldr	r2, [sp, #0]
 80a5382:	18ec      	adds	r4, r5, r3
 80a5384:	b902      	cbnz	r2, 80a5388 <__tzcalc_limits+0x84>
 80a5386:	b906      	cbnz	r6, 80a538a <__tzcalc_limits+0x86>
 80a5388:	b927      	cbnz	r7, 80a5394 <__tzcalc_limits+0x90>
 80a538a:	2b3b      	cmp	r3, #59	; 0x3b
 80a538c:	bfd4      	ite	le
 80a538e:	2300      	movle	r3, #0
 80a5390:	2301      	movgt	r3, #1
 80a5392:	e000      	b.n	80a5396 <__tzcalc_limits+0x92>
 80a5394:	2300      	movs	r3, #0
 80a5396:	4423      	add	r3, r4
 80a5398:	3b01      	subs	r3, #1
 80a539a:	e03f      	b.n	80a541c <__tzcalc_limits+0x118>
 80a539c:	2b44      	cmp	r3, #68	; 0x44
 80a539e:	d102      	bne.n	80a53a6 <__tzcalc_limits+0xa2>
 80a53a0:	694b      	ldr	r3, [r1, #20]
 80a53a2:	442b      	add	r3, r5
 80a53a4:	e03a      	b.n	80a541c <__tzcalc_limits+0x118>
 80a53a6:	9b00      	ldr	r3, [sp, #0]
 80a53a8:	b92b      	cbnz	r3, 80a53b6 <__tzcalc_limits+0xb2>
 80a53aa:	2e00      	cmp	r6, #0
 80a53ac:	bf0c      	ite	eq
 80a53ae:	46f0      	moveq	r8, lr
 80a53b0:	f04f 0801 	movne.w	r8, #1
 80a53b4:	e000      	b.n	80a53b8 <__tzcalc_limits+0xb4>
 80a53b6:	46f0      	mov	r8, lr
 80a53b8:	46a9      	mov	r9, r5
 80a53ba:	4b24      	ldr	r3, [pc, #144]	; (80a544c <__tzcalc_limits+0x148>)
 80a53bc:	2230      	movs	r2, #48	; 0x30
 80a53be:	fb02 3808 	mla	r8, r2, r8, r3
 80a53c2:	68cc      	ldr	r4, [r1, #12]
 80a53c4:	f1a8 0a04 	sub.w	sl, r8, #4
 80a53c8:	2301      	movs	r3, #1
 80a53ca:	42a3      	cmp	r3, r4
 80a53cc:	da04      	bge.n	80a53d8 <__tzcalc_limits+0xd4>
 80a53ce:	f85a bf04 	ldr.w	fp, [sl, #4]!
 80a53d2:	3301      	adds	r3, #1
 80a53d4:	44d9      	add	r9, fp
 80a53d6:	e7f8      	b.n	80a53ca <__tzcalc_limits+0xc6>
 80a53d8:	f109 0304 	add.w	r3, r9, #4
 80a53dc:	fb93 fbfc 	sdiv	fp, r3, ip
 80a53e0:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 80a53e4:	ebca 0a03 	rsb	sl, sl, r3
 80a53e8:	694b      	ldr	r3, [r1, #20]
 80a53ea:	2c01      	cmp	r4, #1
 80a53ec:	bfb8      	it	lt
 80a53ee:	2401      	movlt	r4, #1
 80a53f0:	ebb3 0a0a 	subs.w	sl, r3, sl
 80a53f4:	690b      	ldr	r3, [r1, #16]
 80a53f6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80a53fa:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80a53fe:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80a5402:	bf48      	it	mi
 80a5404:	f10a 0a07 	addmi.w	sl, sl, #7
 80a5408:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a540c:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80a5410:	4453      	add	r3, sl
 80a5412:	42a3      	cmp	r3, r4
 80a5414:	db01      	blt.n	80a541a <__tzcalc_limits+0x116>
 80a5416:	3b07      	subs	r3, #7
 80a5418:	e7fb      	b.n	80a5412 <__tzcalc_limits+0x10e>
 80a541a:	444b      	add	r3, r9
 80a541c:	698c      	ldr	r4, [r1, #24]
 80a541e:	4a0c      	ldr	r2, [pc, #48]	; (80a5450 <__tzcalc_limits+0x14c>)
 80a5420:	fb02 4303 	mla	r3, r2, r3, r4
 80a5424:	6a0c      	ldr	r4, [r1, #32]
 80a5426:	4423      	add	r3, r4
 80a5428:	f841 3f1c 	str.w	r3, [r1, #28]!
 80a542c:	9b01      	ldr	r3, [sp, #4]
 80a542e:	4299      	cmp	r1, r3
 80a5430:	d1a2      	bne.n	80a5378 <__tzcalc_limits+0x74>
 80a5432:	69c3      	ldr	r3, [r0, #28]
 80a5434:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80a5436:	4293      	cmp	r3, r2
 80a5438:	bfac      	ite	ge
 80a543a:	2300      	movge	r3, #0
 80a543c:	2301      	movlt	r3, #1
 80a543e:	6003      	str	r3, [r0, #0]
 80a5440:	2001      	movs	r0, #1
 80a5442:	e000      	b.n	80a5446 <__tzcalc_limits+0x142>
 80a5444:	2000      	movs	r0, #0
 80a5446:	b003      	add	sp, #12
 80a5448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a544c:	080a6f68 	.word	0x080a6f68
 80a5450:	00015180 	.word	0x00015180

080a5454 <__tz_lock>:
 80a5454:	4770      	bx	lr

080a5456 <__tz_unlock>:
 80a5456:	4770      	bx	lr

080a5458 <_tzset_unlocked>:
 80a5458:	4b01      	ldr	r3, [pc, #4]	; (80a5460 <_tzset_unlocked+0x8>)
 80a545a:	6818      	ldr	r0, [r3, #0]
 80a545c:	f000 b802 	b.w	80a5464 <_tzset_unlocked_r>
 80a5460:	200003d8 	.word	0x200003d8

080a5464 <_tzset_unlocked_r>:
 80a5464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5468:	b08d      	sub	sp, #52	; 0x34
 80a546a:	4607      	mov	r7, r0
 80a546c:	f000 fcdc 	bl	80a5e28 <__gettzinfo>
 80a5470:	49b0      	ldr	r1, [pc, #704]	; (80a5734 <_tzset_unlocked_r+0x2d0>)
 80a5472:	4604      	mov	r4, r0
 80a5474:	4638      	mov	r0, r7
 80a5476:	f000 fccf 	bl	80a5e18 <_getenv_r>
 80a547a:	4eaf      	ldr	r6, [pc, #700]	; (80a5738 <_tzset_unlocked_r+0x2d4>)
 80a547c:	4605      	mov	r5, r0
 80a547e:	b960      	cbnz	r0, 80a549a <_tzset_unlocked_r+0x36>
 80a5480:	4bae      	ldr	r3, [pc, #696]	; (80a573c <_tzset_unlocked_r+0x2d8>)
 80a5482:	4aaf      	ldr	r2, [pc, #700]	; (80a5740 <_tzset_unlocked_r+0x2dc>)
 80a5484:	6018      	str	r0, [r3, #0]
 80a5486:	4baf      	ldr	r3, [pc, #700]	; (80a5744 <_tzset_unlocked_r+0x2e0>)
 80a5488:	6018      	str	r0, [r3, #0]
 80a548a:	4baf      	ldr	r3, [pc, #700]	; (80a5748 <_tzset_unlocked_r+0x2e4>)
 80a548c:	6830      	ldr	r0, [r6, #0]
 80a548e:	601a      	str	r2, [r3, #0]
 80a5490:	605a      	str	r2, [r3, #4]
 80a5492:	f7fc fa8b 	bl	80a19ac <free>
 80a5496:	6035      	str	r5, [r6, #0]
 80a5498:	e148      	b.n	80a572c <_tzset_unlocked_r+0x2c8>
 80a549a:	6831      	ldr	r1, [r6, #0]
 80a549c:	b979      	cbnz	r1, 80a54be <_tzset_unlocked_r+0x5a>
 80a549e:	6830      	ldr	r0, [r6, #0]
 80a54a0:	f7fc fa84 	bl	80a19ac <free>
 80a54a4:	4628      	mov	r0, r5
 80a54a6:	f7fe ffa8 	bl	80a43fa <strlen>
 80a54aa:	1c41      	adds	r1, r0, #1
 80a54ac:	4638      	mov	r0, r7
 80a54ae:	f7fc fab5 	bl	80a1a1c <_malloc_r>
 80a54b2:	6030      	str	r0, [r6, #0]
 80a54b4:	b148      	cbz	r0, 80a54ca <_tzset_unlocked_r+0x66>
 80a54b6:	4629      	mov	r1, r5
 80a54b8:	f7fe ff7c 	bl	80a43b4 <strcpy>
 80a54bc:	e005      	b.n	80a54ca <_tzset_unlocked_r+0x66>
 80a54be:	f7fe ff6f 	bl	80a43a0 <strcmp>
 80a54c2:	2800      	cmp	r0, #0
 80a54c4:	f000 8132 	beq.w	80a572c <_tzset_unlocked_r+0x2c8>
 80a54c8:	e7e9      	b.n	80a549e <_tzset_unlocked_r+0x3a>
 80a54ca:	782b      	ldrb	r3, [r5, #0]
 80a54cc:	ae0a      	add	r6, sp, #40	; 0x28
 80a54ce:	2b3a      	cmp	r3, #58	; 0x3a
 80a54d0:	bf08      	it	eq
 80a54d2:	3501      	addeq	r5, #1
 80a54d4:	4633      	mov	r3, r6
 80a54d6:	4a9d      	ldr	r2, [pc, #628]	; (80a574c <_tzset_unlocked_r+0x2e8>)
 80a54d8:	499d      	ldr	r1, [pc, #628]	; (80a5750 <_tzset_unlocked_r+0x2ec>)
 80a54da:	4628      	mov	r0, r5
 80a54dc:	f7fc fa86 	bl	80a19ec <siscanf>
 80a54e0:	2800      	cmp	r0, #0
 80a54e2:	f340 8123 	ble.w	80a572c <_tzset_unlocked_r+0x2c8>
 80a54e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a54e8:	18ef      	adds	r7, r5, r3
 80a54ea:	5ceb      	ldrb	r3, [r5, r3]
 80a54ec:	2b2d      	cmp	r3, #45	; 0x2d
 80a54ee:	d103      	bne.n	80a54f8 <_tzset_unlocked_r+0x94>
 80a54f0:	3701      	adds	r7, #1
 80a54f2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80a54f6:	e003      	b.n	80a5500 <_tzset_unlocked_r+0x9c>
 80a54f8:	2b2b      	cmp	r3, #43	; 0x2b
 80a54fa:	bf08      	it	eq
 80a54fc:	3701      	addeq	r7, #1
 80a54fe:	2501      	movs	r5, #1
 80a5500:	f10d 0a20 	add.w	sl, sp, #32
 80a5504:	f10d 0b1e 	add.w	fp, sp, #30
 80a5508:	f04f 0800 	mov.w	r8, #0
 80a550c:	9603      	str	r6, [sp, #12]
 80a550e:	f8cd a008 	str.w	sl, [sp, #8]
 80a5512:	9601      	str	r6, [sp, #4]
 80a5514:	f8cd b000 	str.w	fp, [sp]
 80a5518:	4633      	mov	r3, r6
 80a551a:	aa07      	add	r2, sp, #28
 80a551c:	498d      	ldr	r1, [pc, #564]	; (80a5754 <_tzset_unlocked_r+0x2f0>)
 80a551e:	4638      	mov	r0, r7
 80a5520:	f8ad 801e 	strh.w	r8, [sp, #30]
 80a5524:	f8ad 8020 	strh.w	r8, [sp, #32]
 80a5528:	f7fc fa60 	bl	80a19ec <siscanf>
 80a552c:	4540      	cmp	r0, r8
 80a552e:	f340 80fd 	ble.w	80a572c <_tzset_unlocked_r+0x2c8>
 80a5532:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a5536:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a553a:	213c      	movs	r1, #60	; 0x3c
 80a553c:	fb01 3302 	mla	r3, r1, r2, r3
 80a5540:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a5544:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a5548:	fb01 3302 	mla	r3, r1, r2, r3
 80a554c:	435d      	muls	r5, r3
 80a554e:	4b7f      	ldr	r3, [pc, #508]	; (80a574c <_tzset_unlocked_r+0x2e8>)
 80a5550:	6225      	str	r5, [r4, #32]
 80a5552:	4d7d      	ldr	r5, [pc, #500]	; (80a5748 <_tzset_unlocked_r+0x2e4>)
 80a5554:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80a5760 <_tzset_unlocked_r+0x2fc>
 80a5558:	602b      	str	r3, [r5, #0]
 80a555a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a555c:	464a      	mov	r2, r9
 80a555e:	441f      	add	r7, r3
 80a5560:	497b      	ldr	r1, [pc, #492]	; (80a5750 <_tzset_unlocked_r+0x2ec>)
 80a5562:	4633      	mov	r3, r6
 80a5564:	4638      	mov	r0, r7
 80a5566:	f7fc fa41 	bl	80a19ec <siscanf>
 80a556a:	4540      	cmp	r0, r8
 80a556c:	dc08      	bgt.n	80a5580 <_tzset_unlocked_r+0x11c>
 80a556e:	682b      	ldr	r3, [r5, #0]
 80a5570:	6a22      	ldr	r2, [r4, #32]
 80a5572:	606b      	str	r3, [r5, #4]
 80a5574:	4b71      	ldr	r3, [pc, #452]	; (80a573c <_tzset_unlocked_r+0x2d8>)
 80a5576:	601a      	str	r2, [r3, #0]
 80a5578:	4b72      	ldr	r3, [pc, #456]	; (80a5744 <_tzset_unlocked_r+0x2e0>)
 80a557a:	f8c3 8000 	str.w	r8, [r3]
 80a557e:	e0d5      	b.n	80a572c <_tzset_unlocked_r+0x2c8>
 80a5580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5582:	f8c5 9004 	str.w	r9, [r5, #4]
 80a5586:	18fd      	adds	r5, r7, r3
 80a5588:	5cfb      	ldrb	r3, [r7, r3]
 80a558a:	2b2d      	cmp	r3, #45	; 0x2d
 80a558c:	d103      	bne.n	80a5596 <_tzset_unlocked_r+0x132>
 80a558e:	3501      	adds	r5, #1
 80a5590:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a5594:	e003      	b.n	80a559e <_tzset_unlocked_r+0x13a>
 80a5596:	2b2b      	cmp	r3, #43	; 0x2b
 80a5598:	bf08      	it	eq
 80a559a:	3501      	addeq	r5, #1
 80a559c:	2701      	movs	r7, #1
 80a559e:	2300      	movs	r3, #0
 80a55a0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a55a4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a55a8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a55ac:	930a      	str	r3, [sp, #40]	; 0x28
 80a55ae:	9603      	str	r6, [sp, #12]
 80a55b0:	f8cd a008 	str.w	sl, [sp, #8]
 80a55b4:	9601      	str	r6, [sp, #4]
 80a55b6:	f8cd b000 	str.w	fp, [sp]
 80a55ba:	4633      	mov	r3, r6
 80a55bc:	aa07      	add	r2, sp, #28
 80a55be:	4965      	ldr	r1, [pc, #404]	; (80a5754 <_tzset_unlocked_r+0x2f0>)
 80a55c0:	4628      	mov	r0, r5
 80a55c2:	f7fc fa13 	bl	80a19ec <siscanf>
 80a55c6:	2800      	cmp	r0, #0
 80a55c8:	dc04      	bgt.n	80a55d4 <_tzset_unlocked_r+0x170>
 80a55ca:	6a23      	ldr	r3, [r4, #32]
 80a55cc:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80a55d0:	63e3      	str	r3, [r4, #60]	; 0x3c
 80a55d2:	e00e      	b.n	80a55f2 <_tzset_unlocked_r+0x18e>
 80a55d4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a55d8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a55dc:	213c      	movs	r1, #60	; 0x3c
 80a55de:	fb01 3302 	mla	r3, r1, r2, r3
 80a55e2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a55e6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a55ea:	fb01 3302 	mla	r3, r1, r2, r3
 80a55ee:	435f      	muls	r7, r3
 80a55f0:	63e7      	str	r7, [r4, #60]	; 0x3c
 80a55f2:	4627      	mov	r7, r4
 80a55f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a55f6:	f04f 0900 	mov.w	r9, #0
 80a55fa:	441d      	add	r5, r3
 80a55fc:	782b      	ldrb	r3, [r5, #0]
 80a55fe:	2b2c      	cmp	r3, #44	; 0x2c
 80a5600:	bf08      	it	eq
 80a5602:	3501      	addeq	r5, #1
 80a5604:	f895 8000 	ldrb.w	r8, [r5]
 80a5608:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a560c:	d126      	bne.n	80a565c <_tzset_unlocked_r+0x1f8>
 80a560e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a5612:	9302      	str	r3, [sp, #8]
 80a5614:	ab09      	add	r3, sp, #36	; 0x24
 80a5616:	9300      	str	r3, [sp, #0]
 80a5618:	9603      	str	r6, [sp, #12]
 80a561a:	9601      	str	r6, [sp, #4]
 80a561c:	4633      	mov	r3, r6
 80a561e:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a5622:	494d      	ldr	r1, [pc, #308]	; (80a5758 <_tzset_unlocked_r+0x2f4>)
 80a5624:	4628      	mov	r0, r5
 80a5626:	f7fc f9e1 	bl	80a19ec <siscanf>
 80a562a:	2803      	cmp	r0, #3
 80a562c:	d17e      	bne.n	80a572c <_tzset_unlocked_r+0x2c8>
 80a562e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a5632:	1e4b      	subs	r3, r1, #1
 80a5634:	2b0b      	cmp	r3, #11
 80a5636:	d879      	bhi.n	80a572c <_tzset_unlocked_r+0x2c8>
 80a5638:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a563c:	1e53      	subs	r3, r2, #1
 80a563e:	2b04      	cmp	r3, #4
 80a5640:	d874      	bhi.n	80a572c <_tzset_unlocked_r+0x2c8>
 80a5642:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a5646:	2b06      	cmp	r3, #6
 80a5648:	d870      	bhi.n	80a572c <_tzset_unlocked_r+0x2c8>
 80a564a:	f887 8008 	strb.w	r8, [r7, #8]
 80a564e:	60f9      	str	r1, [r7, #12]
 80a5650:	613a      	str	r2, [r7, #16]
 80a5652:	617b      	str	r3, [r7, #20]
 80a5654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5656:	eb05 0803 	add.w	r8, r5, r3
 80a565a:	e02a      	b.n	80a56b2 <_tzset_unlocked_r+0x24e>
 80a565c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a5660:	bf06      	itte	eq
 80a5662:	4643      	moveq	r3, r8
 80a5664:	3501      	addeq	r5, #1
 80a5666:	2344      	movne	r3, #68	; 0x44
 80a5668:	220a      	movs	r2, #10
 80a566a:	a90b      	add	r1, sp, #44	; 0x2c
 80a566c:	4628      	mov	r0, r5
 80a566e:	9305      	str	r3, [sp, #20]
 80a5670:	f7ff fe3e 	bl	80a52f0 <strtoul>
 80a5674:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a5678:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a567c:	4545      	cmp	r5, r8
 80a567e:	9b05      	ldr	r3, [sp, #20]
 80a5680:	d114      	bne.n	80a56ac <_tzset_unlocked_r+0x248>
 80a5682:	234d      	movs	r3, #77	; 0x4d
 80a5684:	f1b9 0f00 	cmp.w	r9, #0
 80a5688:	d107      	bne.n	80a569a <_tzset_unlocked_r+0x236>
 80a568a:	7223      	strb	r3, [r4, #8]
 80a568c:	2303      	movs	r3, #3
 80a568e:	60e3      	str	r3, [r4, #12]
 80a5690:	2302      	movs	r3, #2
 80a5692:	6123      	str	r3, [r4, #16]
 80a5694:	f8c4 9014 	str.w	r9, [r4, #20]
 80a5698:	e00b      	b.n	80a56b2 <_tzset_unlocked_r+0x24e>
 80a569a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80a569e:	230b      	movs	r3, #11
 80a56a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80a56a2:	2301      	movs	r3, #1
 80a56a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80a56a6:	2300      	movs	r3, #0
 80a56a8:	6323      	str	r3, [r4, #48]	; 0x30
 80a56aa:	e002      	b.n	80a56b2 <_tzset_unlocked_r+0x24e>
 80a56ac:	b280      	uxth	r0, r0
 80a56ae:	723b      	strb	r3, [r7, #8]
 80a56b0:	6178      	str	r0, [r7, #20]
 80a56b2:	2302      	movs	r3, #2
 80a56b4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a56b8:	2300      	movs	r3, #0
 80a56ba:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a56be:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a56c2:	930a      	str	r3, [sp, #40]	; 0x28
 80a56c4:	f898 3000 	ldrb.w	r3, [r8]
 80a56c8:	2b2f      	cmp	r3, #47	; 0x2f
 80a56ca:	d10b      	bne.n	80a56e4 <_tzset_unlocked_r+0x280>
 80a56cc:	9603      	str	r6, [sp, #12]
 80a56ce:	f8cd a008 	str.w	sl, [sp, #8]
 80a56d2:	9601      	str	r6, [sp, #4]
 80a56d4:	f8cd b000 	str.w	fp, [sp]
 80a56d8:	4633      	mov	r3, r6
 80a56da:	aa07      	add	r2, sp, #28
 80a56dc:	491f      	ldr	r1, [pc, #124]	; (80a575c <_tzset_unlocked_r+0x2f8>)
 80a56de:	4640      	mov	r0, r8
 80a56e0:	f7fc f984 	bl	80a19ec <siscanf>
 80a56e4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a56e8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a56ec:	213c      	movs	r1, #60	; 0x3c
 80a56ee:	fb01 3302 	mla	r3, r1, r2, r3
 80a56f2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a56f6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a56fa:	fb01 3302 	mla	r3, r1, r2, r3
 80a56fe:	61bb      	str	r3, [r7, #24]
 80a5700:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a5702:	f109 0901 	add.w	r9, r9, #1
 80a5706:	f1b9 0f02 	cmp.w	r9, #2
 80a570a:	4445      	add	r5, r8
 80a570c:	f107 071c 	add.w	r7, r7, #28
 80a5710:	f47f af74 	bne.w	80a55fc <_tzset_unlocked_r+0x198>
 80a5714:	6860      	ldr	r0, [r4, #4]
 80a5716:	f7ff fdf5 	bl	80a5304 <__tzcalc_limits>
 80a571a:	6a22      	ldr	r2, [r4, #32]
 80a571c:	4b07      	ldr	r3, [pc, #28]	; (80a573c <_tzset_unlocked_r+0x2d8>)
 80a571e:	601a      	str	r2, [r3, #0]
 80a5720:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a5722:	1a9b      	subs	r3, r3, r2
 80a5724:	4a07      	ldr	r2, [pc, #28]	; (80a5744 <_tzset_unlocked_r+0x2e0>)
 80a5726:	bf18      	it	ne
 80a5728:	2301      	movne	r3, #1
 80a572a:	6013      	str	r3, [r2, #0]
 80a572c:	b00d      	add	sp, #52	; 0x34
 80a572e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5732:	bf00      	nop
 80a5734:	080a7028 	.word	0x080a7028
 80a5738:	20000afc 	.word	0x20000afc
 80a573c:	20000b04 	.word	0x20000b04
 80a5740:	080a702b 	.word	0x080a702b
 80a5744:	20000b00 	.word	0x20000b00
 80a5748:	20000414 	.word	0x20000414
 80a574c:	20000aef 	.word	0x20000aef
 80a5750:	080a702f 	.word	0x080a702f
 80a5754:	080a7052 	.word	0x080a7052
 80a5758:	080a703e 	.word	0x080a703e
 80a575c:	080a7051 	.word	0x080a7051
 80a5760:	20000ae4 	.word	0x20000ae4

080a5764 <rshift>:
 80a5764:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a5766:	6906      	ldr	r6, [r0, #16]
 80a5768:	114b      	asrs	r3, r1, #5
 80a576a:	42b3      	cmp	r3, r6
 80a576c:	f100 0514 	add.w	r5, r0, #20
 80a5770:	da27      	bge.n	80a57c2 <rshift+0x5e>
 80a5772:	f011 011f 	ands.w	r1, r1, #31
 80a5776:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 80a577a:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80a577e:	d101      	bne.n	80a5784 <rshift+0x20>
 80a5780:	4629      	mov	r1, r5
 80a5782:	e016      	b.n	80a57b2 <rshift+0x4e>
 80a5784:	1d14      	adds	r4, r2, #4
 80a5786:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 80a578a:	462b      	mov	r3, r5
 80a578c:	f1c1 0e20 	rsb	lr, r1, #32
 80a5790:	40ca      	lsrs	r2, r1
 80a5792:	42b4      	cmp	r4, r6
 80a5794:	d209      	bcs.n	80a57aa <rshift+0x46>
 80a5796:	6827      	ldr	r7, [r4, #0]
 80a5798:	fa07 f70e 	lsl.w	r7, r7, lr
 80a579c:	433a      	orrs	r2, r7
 80a579e:	f843 2b04 	str.w	r2, [r3], #4
 80a57a2:	f854 2b04 	ldr.w	r2, [r4], #4
 80a57a6:	40ca      	lsrs	r2, r1
 80a57a8:	e7f3      	b.n	80a5792 <rshift+0x2e>
 80a57aa:	601a      	str	r2, [r3, #0]
 80a57ac:	b152      	cbz	r2, 80a57c4 <rshift+0x60>
 80a57ae:	3304      	adds	r3, #4
 80a57b0:	e008      	b.n	80a57c4 <rshift+0x60>
 80a57b2:	42b2      	cmp	r2, r6
 80a57b4:	460b      	mov	r3, r1
 80a57b6:	d205      	bcs.n	80a57c4 <rshift+0x60>
 80a57b8:	f852 3b04 	ldr.w	r3, [r2], #4
 80a57bc:	f841 3b04 	str.w	r3, [r1], #4
 80a57c0:	e7f7      	b.n	80a57b2 <rshift+0x4e>
 80a57c2:	462b      	mov	r3, r5
 80a57c4:	1b5b      	subs	r3, r3, r5
 80a57c6:	109b      	asrs	r3, r3, #2
 80a57c8:	6103      	str	r3, [r0, #16]
 80a57ca:	b903      	cbnz	r3, 80a57ce <rshift+0x6a>
 80a57cc:	6143      	str	r3, [r0, #20]
 80a57ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a57d0 <__hexdig_fun>:
 80a57d0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80a57d4:	2b09      	cmp	r3, #9
 80a57d6:	d801      	bhi.n	80a57dc <__hexdig_fun+0xc>
 80a57d8:	3820      	subs	r0, #32
 80a57da:	e00a      	b.n	80a57f2 <__hexdig_fun+0x22>
 80a57dc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80a57e0:	2b05      	cmp	r3, #5
 80a57e2:	d801      	bhi.n	80a57e8 <__hexdig_fun+0x18>
 80a57e4:	3847      	subs	r0, #71	; 0x47
 80a57e6:	e004      	b.n	80a57f2 <__hexdig_fun+0x22>
 80a57e8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80a57ec:	2b05      	cmp	r3, #5
 80a57ee:	d802      	bhi.n	80a57f6 <__hexdig_fun+0x26>
 80a57f0:	3827      	subs	r0, #39	; 0x27
 80a57f2:	b2c0      	uxtb	r0, r0
 80a57f4:	4770      	bx	lr
 80a57f6:	2000      	movs	r0, #0
 80a57f8:	4770      	bx	lr

080a57fa <__gethex>:
 80a57fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a57fe:	b08b      	sub	sp, #44	; 0x2c
 80a5800:	468a      	mov	sl, r1
 80a5802:	4690      	mov	r8, r2
 80a5804:	9306      	str	r3, [sp, #24]
 80a5806:	9002      	str	r0, [sp, #8]
 80a5808:	f7fe fd8a 	bl	80a4320 <_localeconv_r>
 80a580c:	6803      	ldr	r3, [r0, #0]
 80a580e:	f04f 0b00 	mov.w	fp, #0
 80a5812:	4618      	mov	r0, r3
 80a5814:	9303      	str	r3, [sp, #12]
 80a5816:	f7fe fdf0 	bl	80a43fa <strlen>
 80a581a:	9b03      	ldr	r3, [sp, #12]
 80a581c:	9001      	str	r0, [sp, #4]
 80a581e:	4403      	add	r3, r0
 80a5820:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80a5824:	9307      	str	r3, [sp, #28]
 80a5826:	f8da 3000 	ldr.w	r3, [sl]
 80a582a:	3302      	adds	r3, #2
 80a582c:	461f      	mov	r7, r3
 80a582e:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a5832:	2830      	cmp	r0, #48	; 0x30
 80a5834:	d102      	bne.n	80a583c <__gethex+0x42>
 80a5836:	f10b 0b01 	add.w	fp, fp, #1
 80a583a:	e7f7      	b.n	80a582c <__gethex+0x32>
 80a583c:	f7ff ffc8 	bl	80a57d0 <__hexdig_fun>
 80a5840:	4604      	mov	r4, r0
 80a5842:	b9e0      	cbnz	r0, 80a587e <__gethex+0x84>
 80a5844:	9a01      	ldr	r2, [sp, #4]
 80a5846:	9903      	ldr	r1, [sp, #12]
 80a5848:	4638      	mov	r0, r7
 80a584a:	f7fe fdde 	bl	80a440a <strncmp>
 80a584e:	2800      	cmp	r0, #0
 80a5850:	d134      	bne.n	80a58bc <__gethex+0xc2>
 80a5852:	9b01      	ldr	r3, [sp, #4]
 80a5854:	5cf8      	ldrb	r0, [r7, r3]
 80a5856:	18fe      	adds	r6, r7, r3
 80a5858:	f7ff ffba 	bl	80a57d0 <__hexdig_fun>
 80a585c:	b380      	cbz	r0, 80a58c0 <__gethex+0xc6>
 80a585e:	4633      	mov	r3, r6
 80a5860:	7818      	ldrb	r0, [r3, #0]
 80a5862:	461f      	mov	r7, r3
 80a5864:	2830      	cmp	r0, #48	; 0x30
 80a5866:	f103 0301 	add.w	r3, r3, #1
 80a586a:	d0f9      	beq.n	80a5860 <__gethex+0x66>
 80a586c:	f7ff ffb0 	bl	80a57d0 <__hexdig_fun>
 80a5870:	fab0 f580 	clz	r5, r0
 80a5874:	4634      	mov	r4, r6
 80a5876:	096d      	lsrs	r5, r5, #5
 80a5878:	f04f 0b01 	mov.w	fp, #1
 80a587c:	e001      	b.n	80a5882 <__gethex+0x88>
 80a587e:	2500      	movs	r5, #0
 80a5880:	462c      	mov	r4, r5
 80a5882:	463a      	mov	r2, r7
 80a5884:	4616      	mov	r6, r2
 80a5886:	7830      	ldrb	r0, [r6, #0]
 80a5888:	3201      	adds	r2, #1
 80a588a:	f7ff ffa1 	bl	80a57d0 <__hexdig_fun>
 80a588e:	2800      	cmp	r0, #0
 80a5890:	d1f8      	bne.n	80a5884 <__gethex+0x8a>
 80a5892:	9a01      	ldr	r2, [sp, #4]
 80a5894:	9903      	ldr	r1, [sp, #12]
 80a5896:	4630      	mov	r0, r6
 80a5898:	f7fe fdb7 	bl	80a440a <strncmp>
 80a589c:	b950      	cbnz	r0, 80a58b4 <__gethex+0xba>
 80a589e:	b954      	cbnz	r4, 80a58b6 <__gethex+0xbc>
 80a58a0:	9b01      	ldr	r3, [sp, #4]
 80a58a2:	18f4      	adds	r4, r6, r3
 80a58a4:	4622      	mov	r2, r4
 80a58a6:	4616      	mov	r6, r2
 80a58a8:	7830      	ldrb	r0, [r6, #0]
 80a58aa:	3201      	adds	r2, #1
 80a58ac:	f7ff ff90 	bl	80a57d0 <__hexdig_fun>
 80a58b0:	2800      	cmp	r0, #0
 80a58b2:	d1f8      	bne.n	80a58a6 <__gethex+0xac>
 80a58b4:	b134      	cbz	r4, 80a58c4 <__gethex+0xca>
 80a58b6:	1ba4      	subs	r4, r4, r6
 80a58b8:	00a4      	lsls	r4, r4, #2
 80a58ba:	e003      	b.n	80a58c4 <__gethex+0xca>
 80a58bc:	463e      	mov	r6, r7
 80a58be:	e000      	b.n	80a58c2 <__gethex+0xc8>
 80a58c0:	4604      	mov	r4, r0
 80a58c2:	2501      	movs	r5, #1
 80a58c4:	7833      	ldrb	r3, [r6, #0]
 80a58c6:	2b50      	cmp	r3, #80	; 0x50
 80a58c8:	d001      	beq.n	80a58ce <__gethex+0xd4>
 80a58ca:	2b70      	cmp	r3, #112	; 0x70
 80a58cc:	d12a      	bne.n	80a5924 <__gethex+0x12a>
 80a58ce:	7873      	ldrb	r3, [r6, #1]
 80a58d0:	2b2b      	cmp	r3, #43	; 0x2b
 80a58d2:	d008      	beq.n	80a58e6 <__gethex+0xec>
 80a58d4:	2b2d      	cmp	r3, #45	; 0x2d
 80a58d6:	d003      	beq.n	80a58e0 <__gethex+0xe6>
 80a58d8:	1c71      	adds	r1, r6, #1
 80a58da:	f04f 0900 	mov.w	r9, #0
 80a58de:	e005      	b.n	80a58ec <__gethex+0xf2>
 80a58e0:	f04f 0901 	mov.w	r9, #1
 80a58e4:	e001      	b.n	80a58ea <__gethex+0xf0>
 80a58e6:	f04f 0900 	mov.w	r9, #0
 80a58ea:	1cb1      	adds	r1, r6, #2
 80a58ec:	7808      	ldrb	r0, [r1, #0]
 80a58ee:	f7ff ff6f 	bl	80a57d0 <__hexdig_fun>
 80a58f2:	1e43      	subs	r3, r0, #1
 80a58f4:	b2db      	uxtb	r3, r3
 80a58f6:	2b18      	cmp	r3, #24
 80a58f8:	d814      	bhi.n	80a5924 <__gethex+0x12a>
 80a58fa:	f1a0 0210 	sub.w	r2, r0, #16
 80a58fe:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80a5902:	f7ff ff65 	bl	80a57d0 <__hexdig_fun>
 80a5906:	1e43      	subs	r3, r0, #1
 80a5908:	b2db      	uxtb	r3, r3
 80a590a:	2b18      	cmp	r3, #24
 80a590c:	d804      	bhi.n	80a5918 <__gethex+0x11e>
 80a590e:	230a      	movs	r3, #10
 80a5910:	fb03 0202 	mla	r2, r3, r2, r0
 80a5914:	3a10      	subs	r2, #16
 80a5916:	e7f2      	b.n	80a58fe <__gethex+0x104>
 80a5918:	f1b9 0f00 	cmp.w	r9, #0
 80a591c:	d000      	beq.n	80a5920 <__gethex+0x126>
 80a591e:	4252      	negs	r2, r2
 80a5920:	4414      	add	r4, r2
 80a5922:	e000      	b.n	80a5926 <__gethex+0x12c>
 80a5924:	4631      	mov	r1, r6
 80a5926:	f8ca 1000 	str.w	r1, [sl]
 80a592a:	b12d      	cbz	r5, 80a5938 <__gethex+0x13e>
 80a592c:	f1bb 0f00 	cmp.w	fp, #0
 80a5930:	bf14      	ite	ne
 80a5932:	2000      	movne	r0, #0
 80a5934:	2006      	moveq	r0, #6
 80a5936:	e17c      	b.n	80a5c32 <__gethex+0x438>
 80a5938:	4629      	mov	r1, r5
 80a593a:	1bf3      	subs	r3, r6, r7
 80a593c:	3b01      	subs	r3, #1
 80a593e:	2b07      	cmp	r3, #7
 80a5940:	dd02      	ble.n	80a5948 <__gethex+0x14e>
 80a5942:	3101      	adds	r1, #1
 80a5944:	105b      	asrs	r3, r3, #1
 80a5946:	e7fa      	b.n	80a593e <__gethex+0x144>
 80a5948:	9802      	ldr	r0, [sp, #8]
 80a594a:	f000 fb07 	bl	80a5f5c <_Balloc>
 80a594e:	f04f 0900 	mov.w	r9, #0
 80a5952:	4605      	mov	r5, r0
 80a5954:	46cb      	mov	fp, r9
 80a5956:	9b01      	ldr	r3, [sp, #4]
 80a5958:	f100 0a14 	add.w	sl, r0, #20
 80a595c:	f1c3 0301 	rsb	r3, r3, #1
 80a5960:	f8cd a010 	str.w	sl, [sp, #16]
 80a5964:	9308      	str	r3, [sp, #32]
 80a5966:	42b7      	cmp	r7, r6
 80a5968:	d22f      	bcs.n	80a59ca <__gethex+0x1d0>
 80a596a:	1e73      	subs	r3, r6, #1
 80a596c:	9305      	str	r3, [sp, #20]
 80a596e:	9a07      	ldr	r2, [sp, #28]
 80a5970:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80a5974:	4293      	cmp	r3, r2
 80a5976:	d00b      	beq.n	80a5990 <__gethex+0x196>
 80a5978:	f1bb 0f20 	cmp.w	fp, #32
 80a597c:	d116      	bne.n	80a59ac <__gethex+0x1b2>
 80a597e:	9b04      	ldr	r3, [sp, #16]
 80a5980:	f8c3 9000 	str.w	r9, [r3]
 80a5984:	3304      	adds	r3, #4
 80a5986:	f04f 0900 	mov.w	r9, #0
 80a598a:	9304      	str	r3, [sp, #16]
 80a598c:	46cb      	mov	fp, r9
 80a598e:	e00d      	b.n	80a59ac <__gethex+0x1b2>
 80a5990:	9b05      	ldr	r3, [sp, #20]
 80a5992:	9a08      	ldr	r2, [sp, #32]
 80a5994:	4413      	add	r3, r2
 80a5996:	429f      	cmp	r7, r3
 80a5998:	d8ee      	bhi.n	80a5978 <__gethex+0x17e>
 80a599a:	4618      	mov	r0, r3
 80a599c:	9a01      	ldr	r2, [sp, #4]
 80a599e:	9903      	ldr	r1, [sp, #12]
 80a59a0:	9309      	str	r3, [sp, #36]	; 0x24
 80a59a2:	f7fe fd32 	bl	80a440a <strncmp>
 80a59a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a59a8:	b168      	cbz	r0, 80a59c6 <__gethex+0x1cc>
 80a59aa:	e7e5      	b.n	80a5978 <__gethex+0x17e>
 80a59ac:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80a59b0:	f7ff ff0e 	bl	80a57d0 <__hexdig_fun>
 80a59b4:	f000 000f 	and.w	r0, r0, #15
 80a59b8:	fa00 f00b 	lsl.w	r0, r0, fp
 80a59bc:	9b05      	ldr	r3, [sp, #20]
 80a59be:	ea49 0900 	orr.w	r9, r9, r0
 80a59c2:	f10b 0b04 	add.w	fp, fp, #4
 80a59c6:	461e      	mov	r6, r3
 80a59c8:	e7cd      	b.n	80a5966 <__gethex+0x16c>
 80a59ca:	9804      	ldr	r0, [sp, #16]
 80a59cc:	f840 9b04 	str.w	r9, [r0], #4
 80a59d0:	ebca 0000 	rsb	r0, sl, r0
 80a59d4:	1080      	asrs	r0, r0, #2
 80a59d6:	6128      	str	r0, [r5, #16]
 80a59d8:	0147      	lsls	r7, r0, #5
 80a59da:	4648      	mov	r0, r9
 80a59dc:	f000 fb83 	bl	80a60e6 <__hi0bits>
 80a59e0:	f8d8 6000 	ldr.w	r6, [r8]
 80a59e4:	1a38      	subs	r0, r7, r0
 80a59e6:	42b0      	cmp	r0, r6
 80a59e8:	dd26      	ble.n	80a5a38 <__gethex+0x23e>
 80a59ea:	1b87      	subs	r7, r0, r6
 80a59ec:	4639      	mov	r1, r7
 80a59ee:	4628      	mov	r0, r5
 80a59f0:	f000 fe7b 	bl	80a66ea <__any_on>
 80a59f4:	b1c8      	cbz	r0, 80a5a2a <__gethex+0x230>
 80a59f6:	1e7b      	subs	r3, r7, #1
 80a59f8:	1159      	asrs	r1, r3, #5
 80a59fa:	f003 021f 	and.w	r2, r3, #31
 80a59fe:	f04f 0901 	mov.w	r9, #1
 80a5a02:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80a5a06:	fa09 f202 	lsl.w	r2, r9, r2
 80a5a0a:	420a      	tst	r2, r1
 80a5a0c:	d00e      	beq.n	80a5a2c <__gethex+0x232>
 80a5a0e:	454b      	cmp	r3, r9
 80a5a10:	dc02      	bgt.n	80a5a18 <__gethex+0x21e>
 80a5a12:	f04f 0902 	mov.w	r9, #2
 80a5a16:	e009      	b.n	80a5a2c <__gethex+0x232>
 80a5a18:	1eb9      	subs	r1, r7, #2
 80a5a1a:	4628      	mov	r0, r5
 80a5a1c:	f000 fe65 	bl	80a66ea <__any_on>
 80a5a20:	2800      	cmp	r0, #0
 80a5a22:	d0f6      	beq.n	80a5a12 <__gethex+0x218>
 80a5a24:	f04f 0903 	mov.w	r9, #3
 80a5a28:	e000      	b.n	80a5a2c <__gethex+0x232>
 80a5a2a:	4681      	mov	r9, r0
 80a5a2c:	4639      	mov	r1, r7
 80a5a2e:	4628      	mov	r0, r5
 80a5a30:	f7ff fe98 	bl	80a5764 <rshift>
 80a5a34:	443c      	add	r4, r7
 80a5a36:	e00c      	b.n	80a5a52 <__gethex+0x258>
 80a5a38:	da09      	bge.n	80a5a4e <__gethex+0x254>
 80a5a3a:	1a37      	subs	r7, r6, r0
 80a5a3c:	4629      	mov	r1, r5
 80a5a3e:	463a      	mov	r2, r7
 80a5a40:	9802      	ldr	r0, [sp, #8]
 80a5a42:	f000 fc85 	bl	80a6350 <__lshift>
 80a5a46:	4605      	mov	r5, r0
 80a5a48:	1be4      	subs	r4, r4, r7
 80a5a4a:	f100 0a14 	add.w	sl, r0, #20
 80a5a4e:	f04f 0900 	mov.w	r9, #0
 80a5a52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a5a56:	429c      	cmp	r4, r3
 80a5a58:	dd08      	ble.n	80a5a6c <__gethex+0x272>
 80a5a5a:	9802      	ldr	r0, [sp, #8]
 80a5a5c:	4629      	mov	r1, r5
 80a5a5e:	f000 fab2 	bl	80a5fc6 <_Bfree>
 80a5a62:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a5a64:	2300      	movs	r3, #0
 80a5a66:	6013      	str	r3, [r2, #0]
 80a5a68:	20a3      	movs	r0, #163	; 0xa3
 80a5a6a:	e0e2      	b.n	80a5c32 <__gethex+0x438>
 80a5a6c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80a5a70:	4284      	cmp	r4, r0
 80a5a72:	da53      	bge.n	80a5b1c <__gethex+0x322>
 80a5a74:	1b04      	subs	r4, r0, r4
 80a5a76:	42a6      	cmp	r6, r4
 80a5a78:	dc2e      	bgt.n	80a5ad8 <__gethex+0x2de>
 80a5a7a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a5a7e:	2b02      	cmp	r3, #2
 80a5a80:	d01a      	beq.n	80a5ab8 <__gethex+0x2be>
 80a5a82:	2b03      	cmp	r3, #3
 80a5a84:	d01c      	beq.n	80a5ac0 <__gethex+0x2c6>
 80a5a86:	2b01      	cmp	r3, #1
 80a5a88:	d11d      	bne.n	80a5ac6 <__gethex+0x2cc>
 80a5a8a:	42a6      	cmp	r6, r4
 80a5a8c:	d11b      	bne.n	80a5ac6 <__gethex+0x2cc>
 80a5a8e:	2e01      	cmp	r6, #1
 80a5a90:	dc0b      	bgt.n	80a5aaa <__gethex+0x2b0>
 80a5a92:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80a5a96:	9a06      	ldr	r2, [sp, #24]
 80a5a98:	2062      	movs	r0, #98	; 0x62
 80a5a9a:	6013      	str	r3, [r2, #0]
 80a5a9c:	2301      	movs	r3, #1
 80a5a9e:	612b      	str	r3, [r5, #16]
 80a5aa0:	f8ca 3000 	str.w	r3, [sl]
 80a5aa4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a5aa6:	601d      	str	r5, [r3, #0]
 80a5aa8:	e0c3      	b.n	80a5c32 <__gethex+0x438>
 80a5aaa:	1e71      	subs	r1, r6, #1
 80a5aac:	4628      	mov	r0, r5
 80a5aae:	f000 fe1c 	bl	80a66ea <__any_on>
 80a5ab2:	2800      	cmp	r0, #0
 80a5ab4:	d1ed      	bne.n	80a5a92 <__gethex+0x298>
 80a5ab6:	e006      	b.n	80a5ac6 <__gethex+0x2cc>
 80a5ab8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a5aba:	2b00      	cmp	r3, #0
 80a5abc:	d0e9      	beq.n	80a5a92 <__gethex+0x298>
 80a5abe:	e002      	b.n	80a5ac6 <__gethex+0x2cc>
 80a5ac0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a5ac2:	2b00      	cmp	r3, #0
 80a5ac4:	d1e5      	bne.n	80a5a92 <__gethex+0x298>
 80a5ac6:	9802      	ldr	r0, [sp, #8]
 80a5ac8:	4629      	mov	r1, r5
 80a5aca:	f000 fa7c 	bl	80a5fc6 <_Bfree>
 80a5ace:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a5ad0:	2300      	movs	r3, #0
 80a5ad2:	6013      	str	r3, [r2, #0]
 80a5ad4:	2050      	movs	r0, #80	; 0x50
 80a5ad6:	e0ac      	b.n	80a5c32 <__gethex+0x438>
 80a5ad8:	1e67      	subs	r7, r4, #1
 80a5ada:	f1b9 0f00 	cmp.w	r9, #0
 80a5ade:	d106      	bne.n	80a5aee <__gethex+0x2f4>
 80a5ae0:	b13f      	cbz	r7, 80a5af2 <__gethex+0x2f8>
 80a5ae2:	4639      	mov	r1, r7
 80a5ae4:	4628      	mov	r0, r5
 80a5ae6:	f000 fe00 	bl	80a66ea <__any_on>
 80a5aea:	4681      	mov	r9, r0
 80a5aec:	e001      	b.n	80a5af2 <__gethex+0x2f8>
 80a5aee:	f04f 0901 	mov.w	r9, #1
 80a5af2:	117a      	asrs	r2, r7, #5
 80a5af4:	2301      	movs	r3, #1
 80a5af6:	f007 071f 	and.w	r7, r7, #31
 80a5afa:	fa03 f707 	lsl.w	r7, r3, r7
 80a5afe:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 80a5b02:	4621      	mov	r1, r4
 80a5b04:	421f      	tst	r7, r3
 80a5b06:	4628      	mov	r0, r5
 80a5b08:	bf18      	it	ne
 80a5b0a:	f049 0902 	orrne.w	r9, r9, #2
 80a5b0e:	1b36      	subs	r6, r6, r4
 80a5b10:	f7ff fe28 	bl	80a5764 <rshift>
 80a5b14:	2702      	movs	r7, #2
 80a5b16:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80a5b1a:	e000      	b.n	80a5b1e <__gethex+0x324>
 80a5b1c:	2701      	movs	r7, #1
 80a5b1e:	f1b9 0f00 	cmp.w	r9, #0
 80a5b22:	f000 8081 	beq.w	80a5c28 <__gethex+0x42e>
 80a5b26:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a5b2a:	2b02      	cmp	r3, #2
 80a5b2c:	d00e      	beq.n	80a5b4c <__gethex+0x352>
 80a5b2e:	2b03      	cmp	r3, #3
 80a5b30:	d010      	beq.n	80a5b54 <__gethex+0x35a>
 80a5b32:	2b01      	cmp	r3, #1
 80a5b34:	d176      	bne.n	80a5c24 <__gethex+0x42a>
 80a5b36:	f019 0f02 	tst.w	r9, #2
 80a5b3a:	d073      	beq.n	80a5c24 <__gethex+0x42a>
 80a5b3c:	f8da 0000 	ldr.w	r0, [sl]
 80a5b40:	ea49 0900 	orr.w	r9, r9, r0
 80a5b44:	f019 0f01 	tst.w	r9, #1
 80a5b48:	d107      	bne.n	80a5b5a <__gethex+0x360>
 80a5b4a:	e06b      	b.n	80a5c24 <__gethex+0x42a>
 80a5b4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a5b4e:	f1c3 0301 	rsb	r3, r3, #1
 80a5b52:	9315      	str	r3, [sp, #84]	; 0x54
 80a5b54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a5b56:	2b00      	cmp	r3, #0
 80a5b58:	d064      	beq.n	80a5c24 <__gethex+0x42a>
 80a5b5a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80a5b5e:	f105 0314 	add.w	r3, r5, #20
 80a5b62:	ea4f 098a 	mov.w	r9, sl, lsl #2
 80a5b66:	eb03 0109 	add.w	r1, r3, r9
 80a5b6a:	2000      	movs	r0, #0
 80a5b6c:	681a      	ldr	r2, [r3, #0]
 80a5b6e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80a5b72:	d002      	beq.n	80a5b7a <__gethex+0x380>
 80a5b74:	3201      	adds	r2, #1
 80a5b76:	601a      	str	r2, [r3, #0]
 80a5b78:	e020      	b.n	80a5bbc <__gethex+0x3c2>
 80a5b7a:	f843 0b04 	str.w	r0, [r3], #4
 80a5b7e:	4299      	cmp	r1, r3
 80a5b80:	d8f4      	bhi.n	80a5b6c <__gethex+0x372>
 80a5b82:	68ab      	ldr	r3, [r5, #8]
 80a5b84:	459a      	cmp	sl, r3
 80a5b86:	db12      	blt.n	80a5bae <__gethex+0x3b4>
 80a5b88:	6869      	ldr	r1, [r5, #4]
 80a5b8a:	9802      	ldr	r0, [sp, #8]
 80a5b8c:	3101      	adds	r1, #1
 80a5b8e:	f000 f9e5 	bl	80a5f5c <_Balloc>
 80a5b92:	4683      	mov	fp, r0
 80a5b94:	692a      	ldr	r2, [r5, #16]
 80a5b96:	f105 010c 	add.w	r1, r5, #12
 80a5b9a:	3202      	adds	r2, #2
 80a5b9c:	0092      	lsls	r2, r2, #2
 80a5b9e:	300c      	adds	r0, #12
 80a5ba0:	f7fe fbc2 	bl	80a4328 <memcpy>
 80a5ba4:	4629      	mov	r1, r5
 80a5ba6:	9802      	ldr	r0, [sp, #8]
 80a5ba8:	f000 fa0d 	bl	80a5fc6 <_Bfree>
 80a5bac:	465d      	mov	r5, fp
 80a5bae:	692b      	ldr	r3, [r5, #16]
 80a5bb0:	1c5a      	adds	r2, r3, #1
 80a5bb2:	612a      	str	r2, [r5, #16]
 80a5bb4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80a5bb8:	2201      	movs	r2, #1
 80a5bba:	615a      	str	r2, [r3, #20]
 80a5bbc:	2f02      	cmp	r7, #2
 80a5bbe:	f105 0214 	add.w	r2, r5, #20
 80a5bc2:	d111      	bne.n	80a5be8 <__gethex+0x3ee>
 80a5bc4:	f8d8 3000 	ldr.w	r3, [r8]
 80a5bc8:	3b01      	subs	r3, #1
 80a5bca:	429e      	cmp	r6, r3
 80a5bcc:	d127      	bne.n	80a5c1e <__gethex+0x424>
 80a5bce:	1171      	asrs	r1, r6, #5
 80a5bd0:	2301      	movs	r3, #1
 80a5bd2:	f006 061f 	and.w	r6, r6, #31
 80a5bd6:	fa03 f606 	lsl.w	r6, r3, r6
 80a5bda:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80a5bde:	421e      	tst	r6, r3
 80a5be0:	bf0c      	ite	eq
 80a5be2:	2702      	moveq	r7, #2
 80a5be4:	2701      	movne	r7, #1
 80a5be6:	e01a      	b.n	80a5c1e <__gethex+0x424>
 80a5be8:	692b      	ldr	r3, [r5, #16]
 80a5bea:	459a      	cmp	sl, r3
 80a5bec:	da0a      	bge.n	80a5c04 <__gethex+0x40a>
 80a5bee:	2101      	movs	r1, #1
 80a5bf0:	4628      	mov	r0, r5
 80a5bf2:	f7ff fdb7 	bl	80a5764 <rshift>
 80a5bf6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a5bfa:	3401      	adds	r4, #1
 80a5bfc:	429c      	cmp	r4, r3
 80a5bfe:	f73f af2c 	bgt.w	80a5a5a <__gethex+0x260>
 80a5c02:	e00b      	b.n	80a5c1c <__gethex+0x422>
 80a5c04:	f016 061f 	ands.w	r6, r6, #31
 80a5c08:	d008      	beq.n	80a5c1c <__gethex+0x422>
 80a5c0a:	4491      	add	r9, r2
 80a5c0c:	f859 0c04 	ldr.w	r0, [r9, #-4]
 80a5c10:	f000 fa69 	bl	80a60e6 <__hi0bits>
 80a5c14:	f1c6 0620 	rsb	r6, r6, #32
 80a5c18:	42b0      	cmp	r0, r6
 80a5c1a:	dbe8      	blt.n	80a5bee <__gethex+0x3f4>
 80a5c1c:	2701      	movs	r7, #1
 80a5c1e:	f047 0720 	orr.w	r7, r7, #32
 80a5c22:	e001      	b.n	80a5c28 <__gethex+0x42e>
 80a5c24:	f047 0710 	orr.w	r7, r7, #16
 80a5c28:	4638      	mov	r0, r7
 80a5c2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a5c2c:	601d      	str	r5, [r3, #0]
 80a5c2e:	9b06      	ldr	r3, [sp, #24]
 80a5c30:	601c      	str	r4, [r3, #0]
 80a5c32:	b00b      	add	sp, #44	; 0x2c
 80a5c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a5c38 <L_shift>:
 80a5c38:	f1c2 0208 	rsb	r2, r2, #8
 80a5c3c:	0092      	lsls	r2, r2, #2
 80a5c3e:	b570      	push	{r4, r5, r6, lr}
 80a5c40:	f1c2 0620 	rsb	r6, r2, #32
 80a5c44:	6843      	ldr	r3, [r0, #4]
 80a5c46:	6805      	ldr	r5, [r0, #0]
 80a5c48:	fa03 f406 	lsl.w	r4, r3, r6
 80a5c4c:	432c      	orrs	r4, r5
 80a5c4e:	40d3      	lsrs	r3, r2
 80a5c50:	6004      	str	r4, [r0, #0]
 80a5c52:	f840 3f04 	str.w	r3, [r0, #4]!
 80a5c56:	4288      	cmp	r0, r1
 80a5c58:	d3f4      	bcc.n	80a5c44 <L_shift+0xc>
 80a5c5a:	bd70      	pop	{r4, r5, r6, pc}

080a5c5c <__match>:
 80a5c5c:	b530      	push	{r4, r5, lr}
 80a5c5e:	6803      	ldr	r3, [r0, #0]
 80a5c60:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a5c64:	3301      	adds	r3, #1
 80a5c66:	b14c      	cbz	r4, 80a5c7c <__match+0x20>
 80a5c68:	781a      	ldrb	r2, [r3, #0]
 80a5c6a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80a5c6e:	2d19      	cmp	r5, #25
 80a5c70:	bf98      	it	ls
 80a5c72:	3220      	addls	r2, #32
 80a5c74:	42a2      	cmp	r2, r4
 80a5c76:	d0f3      	beq.n	80a5c60 <__match+0x4>
 80a5c78:	2000      	movs	r0, #0
 80a5c7a:	bd30      	pop	{r4, r5, pc}
 80a5c7c:	6003      	str	r3, [r0, #0]
 80a5c7e:	2001      	movs	r0, #1
 80a5c80:	bd30      	pop	{r4, r5, pc}

080a5c82 <__hexnan>:
 80a5c82:	680b      	ldr	r3, [r1, #0]
 80a5c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5c88:	115e      	asrs	r6, r3, #5
 80a5c8a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80a5c8e:	f013 031f 	ands.w	r3, r3, #31
 80a5c92:	bf18      	it	ne
 80a5c94:	3604      	addne	r6, #4
 80a5c96:	1f35      	subs	r5, r6, #4
 80a5c98:	4617      	mov	r7, r2
 80a5c9a:	2200      	movs	r2, #0
 80a5c9c:	4682      	mov	sl, r0
 80a5c9e:	46a8      	mov	r8, r5
 80a5ca0:	462c      	mov	r4, r5
 80a5ca2:	4691      	mov	r9, r2
 80a5ca4:	b085      	sub	sp, #20
 80a5ca6:	f8d0 b000 	ldr.w	fp, [r0]
 80a5caa:	9301      	str	r3, [sp, #4]
 80a5cac:	f846 2c04 	str.w	r2, [r6, #-4]
 80a5cb0:	9200      	str	r2, [sp, #0]
 80a5cb2:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 80a5cb6:	2900      	cmp	r1, #0
 80a5cb8:	d03c      	beq.n	80a5d34 <__hexnan+0xb2>
 80a5cba:	4608      	mov	r0, r1
 80a5cbc:	9203      	str	r2, [sp, #12]
 80a5cbe:	9102      	str	r1, [sp, #8]
 80a5cc0:	f7ff fd86 	bl	80a57d0 <__hexdig_fun>
 80a5cc4:	9a03      	ldr	r2, [sp, #12]
 80a5cc6:	bb00      	cbnz	r0, 80a5d0a <__hexnan+0x88>
 80a5cc8:	9902      	ldr	r1, [sp, #8]
 80a5cca:	2920      	cmp	r1, #32
 80a5ccc:	d816      	bhi.n	80a5cfc <__hexnan+0x7a>
 80a5cce:	9b00      	ldr	r3, [sp, #0]
 80a5cd0:	4599      	cmp	r9, r3
 80a5cd2:	ddee      	ble.n	80a5cb2 <__hexnan+0x30>
 80a5cd4:	4544      	cmp	r4, r8
 80a5cd6:	d205      	bcs.n	80a5ce4 <__hexnan+0x62>
 80a5cd8:	2a07      	cmp	r2, #7
 80a5cda:	dc03      	bgt.n	80a5ce4 <__hexnan+0x62>
 80a5cdc:	4641      	mov	r1, r8
 80a5cde:	4620      	mov	r0, r4
 80a5ce0:	f7ff ffaa 	bl	80a5c38 <L_shift>
 80a5ce4:	42bc      	cmp	r4, r7
 80a5ce6:	d923      	bls.n	80a5d30 <__hexnan+0xae>
 80a5ce8:	2300      	movs	r3, #0
 80a5cea:	f1a4 0804 	sub.w	r8, r4, #4
 80a5cee:	f844 3c04 	str.w	r3, [r4, #-4]
 80a5cf2:	f8cd 9000 	str.w	r9, [sp]
 80a5cf6:	4644      	mov	r4, r8
 80a5cf8:	461a      	mov	r2, r3
 80a5cfa:	e7da      	b.n	80a5cb2 <__hexnan+0x30>
 80a5cfc:	2929      	cmp	r1, #41	; 0x29
 80a5cfe:	d148      	bne.n	80a5d92 <__hexnan+0x110>
 80a5d00:	f10b 0301 	add.w	r3, fp, #1
 80a5d04:	f8ca 3000 	str.w	r3, [sl]
 80a5d08:	e014      	b.n	80a5d34 <__hexnan+0xb2>
 80a5d0a:	3201      	adds	r2, #1
 80a5d0c:	2a08      	cmp	r2, #8
 80a5d0e:	f109 0901 	add.w	r9, r9, #1
 80a5d12:	dd06      	ble.n	80a5d22 <__hexnan+0xa0>
 80a5d14:	42bc      	cmp	r4, r7
 80a5d16:	d9cc      	bls.n	80a5cb2 <__hexnan+0x30>
 80a5d18:	2300      	movs	r3, #0
 80a5d1a:	f844 3c04 	str.w	r3, [r4, #-4]
 80a5d1e:	2201      	movs	r2, #1
 80a5d20:	3c04      	subs	r4, #4
 80a5d22:	6821      	ldr	r1, [r4, #0]
 80a5d24:	f000 000f 	and.w	r0, r0, #15
 80a5d28:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 80a5d2c:	6020      	str	r0, [r4, #0]
 80a5d2e:	e7c0      	b.n	80a5cb2 <__hexnan+0x30>
 80a5d30:	2208      	movs	r2, #8
 80a5d32:	e7be      	b.n	80a5cb2 <__hexnan+0x30>
 80a5d34:	f1b9 0f00 	cmp.w	r9, #0
 80a5d38:	d02b      	beq.n	80a5d92 <__hexnan+0x110>
 80a5d3a:	4544      	cmp	r4, r8
 80a5d3c:	d205      	bcs.n	80a5d4a <__hexnan+0xc8>
 80a5d3e:	2a07      	cmp	r2, #7
 80a5d40:	dc03      	bgt.n	80a5d4a <__hexnan+0xc8>
 80a5d42:	4641      	mov	r1, r8
 80a5d44:	4620      	mov	r0, r4
 80a5d46:	f7ff ff77 	bl	80a5c38 <L_shift>
 80a5d4a:	42bc      	cmp	r4, r7
 80a5d4c:	d90c      	bls.n	80a5d68 <__hexnan+0xe6>
 80a5d4e:	463b      	mov	r3, r7
 80a5d50:	f854 2b04 	ldr.w	r2, [r4], #4
 80a5d54:	42a5      	cmp	r5, r4
 80a5d56:	f843 2b04 	str.w	r2, [r3], #4
 80a5d5a:	d2f9      	bcs.n	80a5d50 <__hexnan+0xce>
 80a5d5c:	2200      	movs	r2, #0
 80a5d5e:	f843 2b04 	str.w	r2, [r3], #4
 80a5d62:	429d      	cmp	r5, r3
 80a5d64:	d2fb      	bcs.n	80a5d5e <__hexnan+0xdc>
 80a5d66:	e00b      	b.n	80a5d80 <__hexnan+0xfe>
 80a5d68:	9b01      	ldr	r3, [sp, #4]
 80a5d6a:	b14b      	cbz	r3, 80a5d80 <__hexnan+0xfe>
 80a5d6c:	f1c3 0220 	rsb	r2, r3, #32
 80a5d70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a5d74:	40d3      	lsrs	r3, r2
 80a5d76:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80a5d7a:	4013      	ands	r3, r2
 80a5d7c:	f846 3c04 	str.w	r3, [r6, #-4]
 80a5d80:	682b      	ldr	r3, [r5, #0]
 80a5d82:	b943      	cbnz	r3, 80a5d96 <__hexnan+0x114>
 80a5d84:	42bd      	cmp	r5, r7
 80a5d86:	d102      	bne.n	80a5d8e <__hexnan+0x10c>
 80a5d88:	2301      	movs	r3, #1
 80a5d8a:	602b      	str	r3, [r5, #0]
 80a5d8c:	e003      	b.n	80a5d96 <__hexnan+0x114>
 80a5d8e:	3d04      	subs	r5, #4
 80a5d90:	e7f6      	b.n	80a5d80 <__hexnan+0xfe>
 80a5d92:	2004      	movs	r0, #4
 80a5d94:	e000      	b.n	80a5d98 <__hexnan+0x116>
 80a5d96:	2005      	movs	r0, #5
 80a5d98:	b005      	add	sp, #20
 80a5d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080a5da0 <_findenv_r>:
 80a5da0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5da4:	4607      	mov	r7, r0
 80a5da6:	468b      	mov	fp, r1
 80a5da8:	4690      	mov	r8, r2
 80a5daa:	f000 fcd3 	bl	80a6754 <__env_lock>
 80a5dae:	4b19      	ldr	r3, [pc, #100]	; (80a5e14 <_findenv_r+0x74>)
 80a5db0:	681d      	ldr	r5, [r3, #0]
 80a5db2:	469a      	mov	sl, r3
 80a5db4:	b13d      	cbz	r5, 80a5dc6 <_findenv_r+0x26>
 80a5db6:	465c      	mov	r4, fp
 80a5db8:	4623      	mov	r3, r4
 80a5dba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a5dbe:	b142      	cbz	r2, 80a5dd2 <_findenv_r+0x32>
 80a5dc0:	2a3d      	cmp	r2, #61	; 0x3d
 80a5dc2:	461c      	mov	r4, r3
 80a5dc4:	d1f8      	bne.n	80a5db8 <_findenv_r+0x18>
 80a5dc6:	4638      	mov	r0, r7
 80a5dc8:	f000 fcc5 	bl	80a6756 <__env_unlock>
 80a5dcc:	2000      	movs	r0, #0
 80a5dce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5dd2:	ebcb 0404 	rsb	r4, fp, r4
 80a5dd6:	46a9      	mov	r9, r5
 80a5dd8:	f859 0b04 	ldr.w	r0, [r9], #4
 80a5ddc:	2800      	cmp	r0, #0
 80a5dde:	d0f2      	beq.n	80a5dc6 <_findenv_r+0x26>
 80a5de0:	4622      	mov	r2, r4
 80a5de2:	4659      	mov	r1, fp
 80a5de4:	f7fe fb11 	bl	80a440a <strncmp>
 80a5de8:	b988      	cbnz	r0, 80a5e0e <_findenv_r+0x6e>
 80a5dea:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80a5dee:	191e      	adds	r6, r3, r4
 80a5df0:	5d1b      	ldrb	r3, [r3, r4]
 80a5df2:	2b3d      	cmp	r3, #61	; 0x3d
 80a5df4:	d10b      	bne.n	80a5e0e <_findenv_r+0x6e>
 80a5df6:	f8da 3000 	ldr.w	r3, [sl]
 80a5dfa:	4638      	mov	r0, r7
 80a5dfc:	1aed      	subs	r5, r5, r3
 80a5dfe:	10ad      	asrs	r5, r5, #2
 80a5e00:	f8c8 5000 	str.w	r5, [r8]
 80a5e04:	f000 fca7 	bl	80a6756 <__env_unlock>
 80a5e08:	1c70      	adds	r0, r6, #1
 80a5e0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5e0e:	464d      	mov	r5, r9
 80a5e10:	e7e1      	b.n	80a5dd6 <_findenv_r+0x36>
 80a5e12:	bf00      	nop
 80a5e14:	2000045c 	.word	0x2000045c

080a5e18 <_getenv_r>:
 80a5e18:	b507      	push	{r0, r1, r2, lr}
 80a5e1a:	aa01      	add	r2, sp, #4
 80a5e1c:	f7ff ffc0 	bl	80a5da0 <_findenv_r>
 80a5e20:	b003      	add	sp, #12
 80a5e22:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a5e28 <__gettzinfo>:
 80a5e28:	4800      	ldr	r0, [pc, #0]	; (80a5e2c <__gettzinfo+0x4>)
 80a5e2a:	4770      	bx	lr
 80a5e2c:	2000041c 	.word	0x2000041c

080a5e30 <gmtime_r>:
 80a5e30:	6802      	ldr	r2, [r0, #0]
 80a5e32:	4b46      	ldr	r3, [pc, #280]	; (80a5f4c <gmtime_r+0x11c>)
 80a5e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a5e36:	fb92 f4f3 	sdiv	r4, r2, r3
 80a5e3a:	fb03 2214 	mls	r2, r3, r4, r2
 80a5e3e:	2a00      	cmp	r2, #0
 80a5e40:	bfbc      	itt	lt
 80a5e42:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a5e46:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a5e4a:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80a5e4e:	fb92 f3f0 	sdiv	r3, r2, r0
 80a5e52:	fb00 2213 	mls	r2, r0, r3, r2
 80a5e56:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80a5e5a:	608b      	str	r3, [r1, #8]
 80a5e5c:	fb92 f3f0 	sdiv	r3, r2, r0
 80a5e60:	fb00 2213 	mls	r2, r0, r3, r2
 80a5e64:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 80a5e68:	bfac      	ite	ge
 80a5e6a:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 80a5e6e:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 80a5e72:	604b      	str	r3, [r1, #4]
 80a5e74:	600a      	str	r2, [r1, #0]
 80a5e76:	2307      	movs	r3, #7
 80a5e78:	1ce2      	adds	r2, r4, #3
 80a5e7a:	fb92 f3f3 	sdiv	r3, r2, r3
 80a5e7e:	4d34      	ldr	r5, [pc, #208]	; (80a5f50 <gmtime_r+0x120>)
 80a5e80:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a5e84:	fb94 f5f5 	sdiv	r5, r4, r5
 80a5e88:	1ad3      	subs	r3, r2, r3
 80a5e8a:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a5e8e:	f240 57b4 	movw	r7, #1460	; 0x5b4
 80a5e92:	618b      	str	r3, [r1, #24]
 80a5e94:	4b2f      	ldr	r3, [pc, #188]	; (80a5f54 <gmtime_r+0x124>)
 80a5e96:	4830      	ldr	r0, [pc, #192]	; (80a5f58 <gmtime_r+0x128>)
 80a5e98:	fb03 4405 	mla	r4, r3, r5, r4
 80a5e9c:	fbb4 f2f2 	udiv	r2, r4, r2
 80a5ea0:	fbb4 f3f7 	udiv	r3, r4, r7
 80a5ea4:	fbb4 f0f0 	udiv	r0, r4, r0
 80a5ea8:	4422      	add	r2, r4
 80a5eaa:	1ad2      	subs	r2, r2, r3
 80a5eac:	f648 6694 	movw	r6, #36500	; 0x8e94
 80a5eb0:	1a13      	subs	r3, r2, r0
 80a5eb2:	f240 126d 	movw	r2, #365	; 0x16d
 80a5eb6:	fbb3 f6f6 	udiv	r6, r3, r6
 80a5eba:	fbb3 f0f2 	udiv	r0, r3, r2
 80a5ebe:	fbb3 f3f7 	udiv	r3, r3, r7
 80a5ec2:	4434      	add	r4, r6
 80a5ec4:	1ae3      	subs	r3, r4, r3
 80a5ec6:	fb02 3310 	mls	r3, r2, r0, r3
 80a5eca:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80a5ece:	2499      	movs	r4, #153	; 0x99
 80a5ed0:	3202      	adds	r2, #2
 80a5ed2:	fbb2 f2f4 	udiv	r2, r2, r4
 80a5ed6:	4354      	muls	r4, r2
 80a5ed8:	1ca6      	adds	r6, r4, #2
 80a5eda:	2405      	movs	r4, #5
 80a5edc:	fbb6 f4f4 	udiv	r4, r6, r4
 80a5ee0:	2a0a      	cmp	r2, #10
 80a5ee2:	bf34      	ite	cc
 80a5ee4:	2602      	movcc	r6, #2
 80a5ee6:	f06f 0609 	mvncs.w	r6, #9
 80a5eea:	4416      	add	r6, r2
 80a5eec:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a5ef0:	fb02 0505 	mla	r5, r2, r5, r0
 80a5ef4:	1c5f      	adds	r7, r3, #1
 80a5ef6:	2e01      	cmp	r6, #1
 80a5ef8:	bf98      	it	ls
 80a5efa:	3501      	addls	r5, #1
 80a5efc:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a5f00:	eba7 0704 	sub.w	r7, r7, r4
 80a5f04:	d302      	bcc.n	80a5f0c <gmtime_r+0xdc>
 80a5f06:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 80a5f0a:	e014      	b.n	80a5f36 <gmtime_r+0x106>
 80a5f0c:	0782      	lsls	r2, r0, #30
 80a5f0e:	d105      	bne.n	80a5f1c <gmtime_r+0xec>
 80a5f10:	2464      	movs	r4, #100	; 0x64
 80a5f12:	fbb0 f2f4 	udiv	r2, r0, r4
 80a5f16:	fb04 0212 	mls	r2, r4, r2, r0
 80a5f1a:	b94a      	cbnz	r2, 80a5f30 <gmtime_r+0x100>
 80a5f1c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a5f20:	fbb0 f4f2 	udiv	r4, r0, r2
 80a5f24:	fb02 0014 	mls	r0, r2, r4, r0
 80a5f28:	fab0 f280 	clz	r2, r0
 80a5f2c:	0952      	lsrs	r2, r2, #5
 80a5f2e:	e000      	b.n	80a5f32 <gmtime_r+0x102>
 80a5f30:	2201      	movs	r2, #1
 80a5f32:	333b      	adds	r3, #59	; 0x3b
 80a5f34:	441a      	add	r2, r3
 80a5f36:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80a5f3a:	2300      	movs	r3, #0
 80a5f3c:	61ca      	str	r2, [r1, #28]
 80a5f3e:	614d      	str	r5, [r1, #20]
 80a5f40:	610e      	str	r6, [r1, #16]
 80a5f42:	60cf      	str	r7, [r1, #12]
 80a5f44:	620b      	str	r3, [r1, #32]
 80a5f46:	4608      	mov	r0, r1
 80a5f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a5f4a:	bf00      	nop
 80a5f4c:	00015180 	.word	0x00015180
 80a5f50:	00023ab1 	.word	0x00023ab1
 80a5f54:	fffdc54f 	.word	0xfffdc54f
 80a5f58:	00023ab0 	.word	0x00023ab0

080a5f5c <_Balloc>:
 80a5f5c:	b570      	push	{r4, r5, r6, lr}
 80a5f5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80a5f60:	4604      	mov	r4, r0
 80a5f62:	460e      	mov	r6, r1
 80a5f64:	b93d      	cbnz	r5, 80a5f76 <_Balloc+0x1a>
 80a5f66:	2010      	movs	r0, #16
 80a5f68:	f7fb fd18 	bl	80a199c <malloc>
 80a5f6c:	6260      	str	r0, [r4, #36]	; 0x24
 80a5f6e:	6045      	str	r5, [r0, #4]
 80a5f70:	6085      	str	r5, [r0, #8]
 80a5f72:	6005      	str	r5, [r0, #0]
 80a5f74:	60c5      	str	r5, [r0, #12]
 80a5f76:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80a5f78:	68eb      	ldr	r3, [r5, #12]
 80a5f7a:	b143      	cbz	r3, 80a5f8e <_Balloc+0x32>
 80a5f7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a5f7e:	68db      	ldr	r3, [r3, #12]
 80a5f80:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80a5f84:	b178      	cbz	r0, 80a5fa6 <_Balloc+0x4a>
 80a5f86:	6802      	ldr	r2, [r0, #0]
 80a5f88:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80a5f8c:	e017      	b.n	80a5fbe <_Balloc+0x62>
 80a5f8e:	2221      	movs	r2, #33	; 0x21
 80a5f90:	2104      	movs	r1, #4
 80a5f92:	4620      	mov	r0, r4
 80a5f94:	f000 fbcb 	bl	80a672e <_calloc_r>
 80a5f98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a5f9a:	60e8      	str	r0, [r5, #12]
 80a5f9c:	68db      	ldr	r3, [r3, #12]
 80a5f9e:	2b00      	cmp	r3, #0
 80a5fa0:	d1ec      	bne.n	80a5f7c <_Balloc+0x20>
 80a5fa2:	2000      	movs	r0, #0
 80a5fa4:	bd70      	pop	{r4, r5, r6, pc}
 80a5fa6:	2101      	movs	r1, #1
 80a5fa8:	fa01 f506 	lsl.w	r5, r1, r6
 80a5fac:	1d6a      	adds	r2, r5, #5
 80a5fae:	0092      	lsls	r2, r2, #2
 80a5fb0:	4620      	mov	r0, r4
 80a5fb2:	f000 fbbc 	bl	80a672e <_calloc_r>
 80a5fb6:	2800      	cmp	r0, #0
 80a5fb8:	d0f3      	beq.n	80a5fa2 <_Balloc+0x46>
 80a5fba:	6046      	str	r6, [r0, #4]
 80a5fbc:	6085      	str	r5, [r0, #8]
 80a5fbe:	2300      	movs	r3, #0
 80a5fc0:	6103      	str	r3, [r0, #16]
 80a5fc2:	60c3      	str	r3, [r0, #12]
 80a5fc4:	bd70      	pop	{r4, r5, r6, pc}

080a5fc6 <_Bfree>:
 80a5fc6:	b570      	push	{r4, r5, r6, lr}
 80a5fc8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80a5fca:	4606      	mov	r6, r0
 80a5fcc:	460d      	mov	r5, r1
 80a5fce:	b93c      	cbnz	r4, 80a5fe0 <_Bfree+0x1a>
 80a5fd0:	2010      	movs	r0, #16
 80a5fd2:	f7fb fce3 	bl	80a199c <malloc>
 80a5fd6:	6270      	str	r0, [r6, #36]	; 0x24
 80a5fd8:	6044      	str	r4, [r0, #4]
 80a5fda:	6084      	str	r4, [r0, #8]
 80a5fdc:	6004      	str	r4, [r0, #0]
 80a5fde:	60c4      	str	r4, [r0, #12]
 80a5fe0:	b13d      	cbz	r5, 80a5ff2 <_Bfree+0x2c>
 80a5fe2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80a5fe4:	686a      	ldr	r2, [r5, #4]
 80a5fe6:	68db      	ldr	r3, [r3, #12]
 80a5fe8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80a5fec:	6029      	str	r1, [r5, #0]
 80a5fee:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80a5ff2:	bd70      	pop	{r4, r5, r6, pc}

080a5ff4 <__multadd>:
 80a5ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a5ff8:	4606      	mov	r6, r0
 80a5ffa:	460c      	mov	r4, r1
 80a5ffc:	690d      	ldr	r5, [r1, #16]
 80a5ffe:	461f      	mov	r7, r3
 80a6000:	f101 0e14 	add.w	lr, r1, #20
 80a6004:	2300      	movs	r3, #0
 80a6006:	f8de 0000 	ldr.w	r0, [lr]
 80a600a:	3301      	adds	r3, #1
 80a600c:	b281      	uxth	r1, r0
 80a600e:	fb02 7101 	mla	r1, r2, r1, r7
 80a6012:	0c00      	lsrs	r0, r0, #16
 80a6014:	0c0f      	lsrs	r7, r1, #16
 80a6016:	fb02 7000 	mla	r0, r2, r0, r7
 80a601a:	b289      	uxth	r1, r1
 80a601c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80a6020:	429d      	cmp	r5, r3
 80a6022:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80a6026:	f84e 1b04 	str.w	r1, [lr], #4
 80a602a:	dcec      	bgt.n	80a6006 <__multadd+0x12>
 80a602c:	b1d7      	cbz	r7, 80a6064 <__multadd+0x70>
 80a602e:	68a3      	ldr	r3, [r4, #8]
 80a6030:	429d      	cmp	r5, r3
 80a6032:	db12      	blt.n	80a605a <__multadd+0x66>
 80a6034:	6861      	ldr	r1, [r4, #4]
 80a6036:	4630      	mov	r0, r6
 80a6038:	3101      	adds	r1, #1
 80a603a:	f7ff ff8f 	bl	80a5f5c <_Balloc>
 80a603e:	4680      	mov	r8, r0
 80a6040:	6922      	ldr	r2, [r4, #16]
 80a6042:	f104 010c 	add.w	r1, r4, #12
 80a6046:	3202      	adds	r2, #2
 80a6048:	0092      	lsls	r2, r2, #2
 80a604a:	300c      	adds	r0, #12
 80a604c:	f7fe f96c 	bl	80a4328 <memcpy>
 80a6050:	4621      	mov	r1, r4
 80a6052:	4630      	mov	r0, r6
 80a6054:	f7ff ffb7 	bl	80a5fc6 <_Bfree>
 80a6058:	4644      	mov	r4, r8
 80a605a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80a605e:	3501      	adds	r5, #1
 80a6060:	615f      	str	r7, [r3, #20]
 80a6062:	6125      	str	r5, [r4, #16]
 80a6064:	4620      	mov	r0, r4
 80a6066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a606a <__s2b>:
 80a606a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a606e:	4606      	mov	r6, r0
 80a6070:	4615      	mov	r5, r2
 80a6072:	461f      	mov	r7, r3
 80a6074:	2209      	movs	r2, #9
 80a6076:	3308      	adds	r3, #8
 80a6078:	460c      	mov	r4, r1
 80a607a:	fb93 f3f2 	sdiv	r3, r3, r2
 80a607e:	2100      	movs	r1, #0
 80a6080:	2201      	movs	r2, #1
 80a6082:	429a      	cmp	r2, r3
 80a6084:	da02      	bge.n	80a608c <__s2b+0x22>
 80a6086:	0052      	lsls	r2, r2, #1
 80a6088:	3101      	adds	r1, #1
 80a608a:	e7fa      	b.n	80a6082 <__s2b+0x18>
 80a608c:	4630      	mov	r0, r6
 80a608e:	f7ff ff65 	bl	80a5f5c <_Balloc>
 80a6092:	9b08      	ldr	r3, [sp, #32]
 80a6094:	2d09      	cmp	r5, #9
 80a6096:	6143      	str	r3, [r0, #20]
 80a6098:	f04f 0301 	mov.w	r3, #1
 80a609c:	6103      	str	r3, [r0, #16]
 80a609e:	dd11      	ble.n	80a60c4 <__s2b+0x5a>
 80a60a0:	f104 0809 	add.w	r8, r4, #9
 80a60a4:	46c1      	mov	r9, r8
 80a60a6:	442c      	add	r4, r5
 80a60a8:	f819 3b01 	ldrb.w	r3, [r9], #1
 80a60ac:	4601      	mov	r1, r0
 80a60ae:	3b30      	subs	r3, #48	; 0x30
 80a60b0:	220a      	movs	r2, #10
 80a60b2:	4630      	mov	r0, r6
 80a60b4:	f7ff ff9e 	bl	80a5ff4 <__multadd>
 80a60b8:	45a1      	cmp	r9, r4
 80a60ba:	d1f5      	bne.n	80a60a8 <__s2b+0x3e>
 80a60bc:	eb08 0405 	add.w	r4, r8, r5
 80a60c0:	3c08      	subs	r4, #8
 80a60c2:	e001      	b.n	80a60c8 <__s2b+0x5e>
 80a60c4:	340a      	adds	r4, #10
 80a60c6:	2509      	movs	r5, #9
 80a60c8:	1b2d      	subs	r5, r5, r4
 80a60ca:	1963      	adds	r3, r4, r5
 80a60cc:	429f      	cmp	r7, r3
 80a60ce:	dd08      	ble.n	80a60e2 <__s2b+0x78>
 80a60d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80a60d4:	4601      	mov	r1, r0
 80a60d6:	3b30      	subs	r3, #48	; 0x30
 80a60d8:	220a      	movs	r2, #10
 80a60da:	4630      	mov	r0, r6
 80a60dc:	f7ff ff8a 	bl	80a5ff4 <__multadd>
 80a60e0:	e7f3      	b.n	80a60ca <__s2b+0x60>
 80a60e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a60e6 <__hi0bits>:
 80a60e6:	0c03      	lsrs	r3, r0, #16
 80a60e8:	041b      	lsls	r3, r3, #16
 80a60ea:	b913      	cbnz	r3, 80a60f2 <__hi0bits+0xc>
 80a60ec:	0400      	lsls	r0, r0, #16
 80a60ee:	2310      	movs	r3, #16
 80a60f0:	e000      	b.n	80a60f4 <__hi0bits+0xe>
 80a60f2:	2300      	movs	r3, #0
 80a60f4:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80a60f8:	bf04      	itt	eq
 80a60fa:	0200      	lsleq	r0, r0, #8
 80a60fc:	3308      	addeq	r3, #8
 80a60fe:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80a6102:	bf04      	itt	eq
 80a6104:	0100      	lsleq	r0, r0, #4
 80a6106:	3304      	addeq	r3, #4
 80a6108:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80a610c:	bf04      	itt	eq
 80a610e:	0080      	lsleq	r0, r0, #2
 80a6110:	3302      	addeq	r3, #2
 80a6112:	2800      	cmp	r0, #0
 80a6114:	db03      	blt.n	80a611e <__hi0bits+0x38>
 80a6116:	0042      	lsls	r2, r0, #1
 80a6118:	d503      	bpl.n	80a6122 <__hi0bits+0x3c>
 80a611a:	1c58      	adds	r0, r3, #1
 80a611c:	4770      	bx	lr
 80a611e:	4618      	mov	r0, r3
 80a6120:	4770      	bx	lr
 80a6122:	2020      	movs	r0, #32
 80a6124:	4770      	bx	lr

080a6126 <__lo0bits>:
 80a6126:	6803      	ldr	r3, [r0, #0]
 80a6128:	f013 0207 	ands.w	r2, r3, #7
 80a612c:	d00b      	beq.n	80a6146 <__lo0bits+0x20>
 80a612e:	07d9      	lsls	r1, r3, #31
 80a6130:	d422      	bmi.n	80a6178 <__lo0bits+0x52>
 80a6132:	079a      	lsls	r2, r3, #30
 80a6134:	bf4b      	itete	mi
 80a6136:	085b      	lsrmi	r3, r3, #1
 80a6138:	089b      	lsrpl	r3, r3, #2
 80a613a:	6003      	strmi	r3, [r0, #0]
 80a613c:	6003      	strpl	r3, [r0, #0]
 80a613e:	bf4c      	ite	mi
 80a6140:	2001      	movmi	r0, #1
 80a6142:	2002      	movpl	r0, #2
 80a6144:	4770      	bx	lr
 80a6146:	b299      	uxth	r1, r3
 80a6148:	b909      	cbnz	r1, 80a614e <__lo0bits+0x28>
 80a614a:	0c1b      	lsrs	r3, r3, #16
 80a614c:	2210      	movs	r2, #16
 80a614e:	f013 0fff 	tst.w	r3, #255	; 0xff
 80a6152:	bf04      	itt	eq
 80a6154:	0a1b      	lsreq	r3, r3, #8
 80a6156:	3208      	addeq	r2, #8
 80a6158:	0719      	lsls	r1, r3, #28
 80a615a:	bf04      	itt	eq
 80a615c:	091b      	lsreq	r3, r3, #4
 80a615e:	3204      	addeq	r2, #4
 80a6160:	0799      	lsls	r1, r3, #30
 80a6162:	bf04      	itt	eq
 80a6164:	089b      	lsreq	r3, r3, #2
 80a6166:	3202      	addeq	r2, #2
 80a6168:	07d9      	lsls	r1, r3, #31
 80a616a:	d402      	bmi.n	80a6172 <__lo0bits+0x4c>
 80a616c:	085b      	lsrs	r3, r3, #1
 80a616e:	d005      	beq.n	80a617c <__lo0bits+0x56>
 80a6170:	3201      	adds	r2, #1
 80a6172:	6003      	str	r3, [r0, #0]
 80a6174:	4610      	mov	r0, r2
 80a6176:	4770      	bx	lr
 80a6178:	2000      	movs	r0, #0
 80a617a:	4770      	bx	lr
 80a617c:	2020      	movs	r0, #32
 80a617e:	4770      	bx	lr

080a6180 <__i2b>:
 80a6180:	b510      	push	{r4, lr}
 80a6182:	460c      	mov	r4, r1
 80a6184:	2101      	movs	r1, #1
 80a6186:	f7ff fee9 	bl	80a5f5c <_Balloc>
 80a618a:	2201      	movs	r2, #1
 80a618c:	6144      	str	r4, [r0, #20]
 80a618e:	6102      	str	r2, [r0, #16]
 80a6190:	bd10      	pop	{r4, pc}

080a6192 <__multiply>:
 80a6192:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a6196:	4614      	mov	r4, r2
 80a6198:	690a      	ldr	r2, [r1, #16]
 80a619a:	6923      	ldr	r3, [r4, #16]
 80a619c:	4688      	mov	r8, r1
 80a619e:	429a      	cmp	r2, r3
 80a61a0:	bfbe      	ittt	lt
 80a61a2:	460b      	movlt	r3, r1
 80a61a4:	46a0      	movlt	r8, r4
 80a61a6:	461c      	movlt	r4, r3
 80a61a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80a61ac:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80a61b0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a61b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80a61b8:	eb07 0609 	add.w	r6, r7, r9
 80a61bc:	429e      	cmp	r6, r3
 80a61be:	bfc8      	it	gt
 80a61c0:	3101      	addgt	r1, #1
 80a61c2:	f7ff fecb 	bl	80a5f5c <_Balloc>
 80a61c6:	f100 0514 	add.w	r5, r0, #20
 80a61ca:	462b      	mov	r3, r5
 80a61cc:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 80a61d0:	2200      	movs	r2, #0
 80a61d2:	4563      	cmp	r3, ip
 80a61d4:	d202      	bcs.n	80a61dc <__multiply+0x4a>
 80a61d6:	f843 2b04 	str.w	r2, [r3], #4
 80a61da:	e7fa      	b.n	80a61d2 <__multiply+0x40>
 80a61dc:	f104 0214 	add.w	r2, r4, #20
 80a61e0:	f108 0114 	add.w	r1, r8, #20
 80a61e4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80a61e8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80a61ec:	9300      	str	r3, [sp, #0]
 80a61ee:	9b00      	ldr	r3, [sp, #0]
 80a61f0:	9201      	str	r2, [sp, #4]
 80a61f2:	4293      	cmp	r3, r2
 80a61f4:	d957      	bls.n	80a62a6 <__multiply+0x114>
 80a61f6:	f8b2 b000 	ldrh.w	fp, [r2]
 80a61fa:	f1bb 0f00 	cmp.w	fp, #0
 80a61fe:	d023      	beq.n	80a6248 <__multiply+0xb6>
 80a6200:	4689      	mov	r9, r1
 80a6202:	46ae      	mov	lr, r5
 80a6204:	f04f 0800 	mov.w	r8, #0
 80a6208:	f859 4b04 	ldr.w	r4, [r9], #4
 80a620c:	f8be a000 	ldrh.w	sl, [lr]
 80a6210:	b2a3      	uxth	r3, r4
 80a6212:	fb0b a303 	mla	r3, fp, r3, sl
 80a6216:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80a621a:	f8de 4000 	ldr.w	r4, [lr]
 80a621e:	4443      	add	r3, r8
 80a6220:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a6224:	fb0b 840a 	mla	r4, fp, sl, r8
 80a6228:	46f2      	mov	sl, lr
 80a622a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80a622e:	b29b      	uxth	r3, r3
 80a6230:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80a6234:	454f      	cmp	r7, r9
 80a6236:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a623a:	f84a 3b04 	str.w	r3, [sl], #4
 80a623e:	d901      	bls.n	80a6244 <__multiply+0xb2>
 80a6240:	46d6      	mov	lr, sl
 80a6242:	e7e1      	b.n	80a6208 <__multiply+0x76>
 80a6244:	f8ce 8004 	str.w	r8, [lr, #4]
 80a6248:	9b01      	ldr	r3, [sp, #4]
 80a624a:	3204      	adds	r2, #4
 80a624c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80a6250:	f1ba 0f00 	cmp.w	sl, #0
 80a6254:	d021      	beq.n	80a629a <__multiply+0x108>
 80a6256:	462c      	mov	r4, r5
 80a6258:	4689      	mov	r9, r1
 80a625a:	682b      	ldr	r3, [r5, #0]
 80a625c:	f04f 0800 	mov.w	r8, #0
 80a6260:	f8b9 e000 	ldrh.w	lr, [r9]
 80a6264:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 80a6268:	b29b      	uxth	r3, r3
 80a626a:	fb0a be0e 	mla	lr, sl, lr, fp
 80a626e:	46a3      	mov	fp, r4
 80a6270:	44f0      	add	r8, lr
 80a6272:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80a6276:	f84b 3b04 	str.w	r3, [fp], #4
 80a627a:	f859 3b04 	ldr.w	r3, [r9], #4
 80a627e:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 80a6282:	0c1b      	lsrs	r3, r3, #16
 80a6284:	fb0a e303 	mla	r3, sl, r3, lr
 80a6288:	454f      	cmp	r7, r9
 80a628a:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 80a628e:	ea4f 4813 	mov.w	r8, r3, lsr #16
 80a6292:	d901      	bls.n	80a6298 <__multiply+0x106>
 80a6294:	465c      	mov	r4, fp
 80a6296:	e7e3      	b.n	80a6260 <__multiply+0xce>
 80a6298:	6063      	str	r3, [r4, #4]
 80a629a:	3504      	adds	r5, #4
 80a629c:	e7a7      	b.n	80a61ee <__multiply+0x5c>
 80a629e:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 80a62a2:	b913      	cbnz	r3, 80a62aa <__multiply+0x118>
 80a62a4:	3e01      	subs	r6, #1
 80a62a6:	2e00      	cmp	r6, #0
 80a62a8:	dcf9      	bgt.n	80a629e <__multiply+0x10c>
 80a62aa:	6106      	str	r6, [r0, #16]
 80a62ac:	b003      	add	sp, #12
 80a62ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080a62b4 <__pow5mult>:
 80a62b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a62b8:	4615      	mov	r5, r2
 80a62ba:	f012 0203 	ands.w	r2, r2, #3
 80a62be:	4606      	mov	r6, r0
 80a62c0:	460f      	mov	r7, r1
 80a62c2:	d007      	beq.n	80a62d4 <__pow5mult+0x20>
 80a62c4:	4c21      	ldr	r4, [pc, #132]	; (80a634c <__pow5mult+0x98>)
 80a62c6:	3a01      	subs	r2, #1
 80a62c8:	2300      	movs	r3, #0
 80a62ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80a62ce:	f7ff fe91 	bl	80a5ff4 <__multadd>
 80a62d2:	4607      	mov	r7, r0
 80a62d4:	10ad      	asrs	r5, r5, #2
 80a62d6:	d036      	beq.n	80a6346 <__pow5mult+0x92>
 80a62d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80a62da:	b93c      	cbnz	r4, 80a62ec <__pow5mult+0x38>
 80a62dc:	2010      	movs	r0, #16
 80a62de:	f7fb fb5d 	bl	80a199c <malloc>
 80a62e2:	6270      	str	r0, [r6, #36]	; 0x24
 80a62e4:	6044      	str	r4, [r0, #4]
 80a62e6:	6084      	str	r4, [r0, #8]
 80a62e8:	6004      	str	r4, [r0, #0]
 80a62ea:	60c4      	str	r4, [r0, #12]
 80a62ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80a62f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80a62f4:	b94c      	cbnz	r4, 80a630a <__pow5mult+0x56>
 80a62f6:	f240 2171 	movw	r1, #625	; 0x271
 80a62fa:	4630      	mov	r0, r6
 80a62fc:	f7ff ff40 	bl	80a6180 <__i2b>
 80a6300:	4604      	mov	r4, r0
 80a6302:	2300      	movs	r3, #0
 80a6304:	f8c8 0008 	str.w	r0, [r8, #8]
 80a6308:	6003      	str	r3, [r0, #0]
 80a630a:	f04f 0800 	mov.w	r8, #0
 80a630e:	07eb      	lsls	r3, r5, #31
 80a6310:	d50a      	bpl.n	80a6328 <__pow5mult+0x74>
 80a6312:	4639      	mov	r1, r7
 80a6314:	4622      	mov	r2, r4
 80a6316:	4630      	mov	r0, r6
 80a6318:	f7ff ff3b 	bl	80a6192 <__multiply>
 80a631c:	4681      	mov	r9, r0
 80a631e:	4639      	mov	r1, r7
 80a6320:	4630      	mov	r0, r6
 80a6322:	f7ff fe50 	bl	80a5fc6 <_Bfree>
 80a6326:	464f      	mov	r7, r9
 80a6328:	106d      	asrs	r5, r5, #1
 80a632a:	d00c      	beq.n	80a6346 <__pow5mult+0x92>
 80a632c:	6820      	ldr	r0, [r4, #0]
 80a632e:	b108      	cbz	r0, 80a6334 <__pow5mult+0x80>
 80a6330:	4604      	mov	r4, r0
 80a6332:	e7ec      	b.n	80a630e <__pow5mult+0x5a>
 80a6334:	4622      	mov	r2, r4
 80a6336:	4621      	mov	r1, r4
 80a6338:	4630      	mov	r0, r6
 80a633a:	f7ff ff2a 	bl	80a6192 <__multiply>
 80a633e:	6020      	str	r0, [r4, #0]
 80a6340:	f8c0 8000 	str.w	r8, [r0]
 80a6344:	e7f4      	b.n	80a6330 <__pow5mult+0x7c>
 80a6346:	4638      	mov	r0, r7
 80a6348:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a634c:	080a7158 	.word	0x080a7158

080a6350 <__lshift>:
 80a6350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a6354:	460c      	mov	r4, r1
 80a6356:	4607      	mov	r7, r0
 80a6358:	4691      	mov	r9, r2
 80a635a:	6926      	ldr	r6, [r4, #16]
 80a635c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80a6360:	4456      	add	r6, sl
 80a6362:	6849      	ldr	r1, [r1, #4]
 80a6364:	68a3      	ldr	r3, [r4, #8]
 80a6366:	1c75      	adds	r5, r6, #1
 80a6368:	42ab      	cmp	r3, r5
 80a636a:	da02      	bge.n	80a6372 <__lshift+0x22>
 80a636c:	3101      	adds	r1, #1
 80a636e:	005b      	lsls	r3, r3, #1
 80a6370:	e7fa      	b.n	80a6368 <__lshift+0x18>
 80a6372:	4638      	mov	r0, r7
 80a6374:	f7ff fdf2 	bl	80a5f5c <_Balloc>
 80a6378:	2300      	movs	r3, #0
 80a637a:	4680      	mov	r8, r0
 80a637c:	461a      	mov	r2, r3
 80a637e:	f100 0114 	add.w	r1, r0, #20
 80a6382:	4553      	cmp	r3, sl
 80a6384:	da03      	bge.n	80a638e <__lshift+0x3e>
 80a6386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80a638a:	3301      	adds	r3, #1
 80a638c:	e7f9      	b.n	80a6382 <__lshift+0x32>
 80a638e:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 80a6392:	6920      	ldr	r0, [r4, #16]
 80a6394:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80a6398:	f019 091f 	ands.w	r9, r9, #31
 80a639c:	f104 0114 	add.w	r1, r4, #20
 80a63a0:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80a63a4:	d014      	beq.n	80a63d0 <__lshift+0x80>
 80a63a6:	f1c9 0c20 	rsb	ip, r9, #32
 80a63aa:	2200      	movs	r2, #0
 80a63ac:	6808      	ldr	r0, [r1, #0]
 80a63ae:	469a      	mov	sl, r3
 80a63b0:	fa00 f009 	lsl.w	r0, r0, r9
 80a63b4:	4302      	orrs	r2, r0
 80a63b6:	f843 2b04 	str.w	r2, [r3], #4
 80a63ba:	f851 2b04 	ldr.w	r2, [r1], #4
 80a63be:	458e      	cmp	lr, r1
 80a63c0:	fa22 f20c 	lsr.w	r2, r2, ip
 80a63c4:	d8f2      	bhi.n	80a63ac <__lshift+0x5c>
 80a63c6:	f8ca 2004 	str.w	r2, [sl, #4]
 80a63ca:	b142      	cbz	r2, 80a63de <__lshift+0x8e>
 80a63cc:	1cb5      	adds	r5, r6, #2
 80a63ce:	e006      	b.n	80a63de <__lshift+0x8e>
 80a63d0:	3b04      	subs	r3, #4
 80a63d2:	f851 2b04 	ldr.w	r2, [r1], #4
 80a63d6:	458e      	cmp	lr, r1
 80a63d8:	f843 2f04 	str.w	r2, [r3, #4]!
 80a63dc:	d8f9      	bhi.n	80a63d2 <__lshift+0x82>
 80a63de:	3d01      	subs	r5, #1
 80a63e0:	4638      	mov	r0, r7
 80a63e2:	f8c8 5010 	str.w	r5, [r8, #16]
 80a63e6:	4621      	mov	r1, r4
 80a63e8:	f7ff fded 	bl	80a5fc6 <_Bfree>
 80a63ec:	4640      	mov	r0, r8
 80a63ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a63f2 <__mcmp>:
 80a63f2:	6903      	ldr	r3, [r0, #16]
 80a63f4:	690a      	ldr	r2, [r1, #16]
 80a63f6:	b510      	push	{r4, lr}
 80a63f8:	1a9b      	subs	r3, r3, r2
 80a63fa:	d111      	bne.n	80a6420 <__mcmp+0x2e>
 80a63fc:	0092      	lsls	r2, r2, #2
 80a63fe:	3014      	adds	r0, #20
 80a6400:	3114      	adds	r1, #20
 80a6402:	1883      	adds	r3, r0, r2
 80a6404:	440a      	add	r2, r1
 80a6406:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80a640a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80a640e:	428c      	cmp	r4, r1
 80a6410:	d002      	beq.n	80a6418 <__mcmp+0x26>
 80a6412:	d307      	bcc.n	80a6424 <__mcmp+0x32>
 80a6414:	2001      	movs	r0, #1
 80a6416:	bd10      	pop	{r4, pc}
 80a6418:	4298      	cmp	r0, r3
 80a641a:	d3f4      	bcc.n	80a6406 <__mcmp+0x14>
 80a641c:	2000      	movs	r0, #0
 80a641e:	bd10      	pop	{r4, pc}
 80a6420:	4618      	mov	r0, r3
 80a6422:	bd10      	pop	{r4, pc}
 80a6424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a6428:	bd10      	pop	{r4, pc}

080a642a <__mdiff>:
 80a642a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a642e:	460c      	mov	r4, r1
 80a6430:	4607      	mov	r7, r0
 80a6432:	4611      	mov	r1, r2
 80a6434:	4620      	mov	r0, r4
 80a6436:	4615      	mov	r5, r2
 80a6438:	f7ff ffdb 	bl	80a63f2 <__mcmp>
 80a643c:	1e06      	subs	r6, r0, #0
 80a643e:	d108      	bne.n	80a6452 <__mdiff+0x28>
 80a6440:	4631      	mov	r1, r6
 80a6442:	4638      	mov	r0, r7
 80a6444:	f7ff fd8a 	bl	80a5f5c <_Balloc>
 80a6448:	2301      	movs	r3, #1
 80a644a:	6103      	str	r3, [r0, #16]
 80a644c:	6146      	str	r6, [r0, #20]
 80a644e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a6452:	bfbc      	itt	lt
 80a6454:	4623      	movlt	r3, r4
 80a6456:	462c      	movlt	r4, r5
 80a6458:	4638      	mov	r0, r7
 80a645a:	6861      	ldr	r1, [r4, #4]
 80a645c:	bfba      	itte	lt
 80a645e:	461d      	movlt	r5, r3
 80a6460:	2601      	movlt	r6, #1
 80a6462:	2600      	movge	r6, #0
 80a6464:	f7ff fd7a 	bl	80a5f5c <_Balloc>
 80a6468:	692b      	ldr	r3, [r5, #16]
 80a646a:	60c6      	str	r6, [r0, #12]
 80a646c:	6926      	ldr	r6, [r4, #16]
 80a646e:	f105 0914 	add.w	r9, r5, #20
 80a6472:	f104 0114 	add.w	r1, r4, #20
 80a6476:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 80a647a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80a647e:	f100 0514 	add.w	r5, r0, #20
 80a6482:	f04f 0c00 	mov.w	ip, #0
 80a6486:	f851 2b04 	ldr.w	r2, [r1], #4
 80a648a:	f859 4b04 	ldr.w	r4, [r9], #4
 80a648e:	b293      	uxth	r3, r2
 80a6490:	449c      	add	ip, r3
 80a6492:	b2a3      	uxth	r3, r4
 80a6494:	0c24      	lsrs	r4, r4, #16
 80a6496:	ebc3 030c 	rsb	r3, r3, ip
 80a649a:	ebc4 4212 	rsb	r2, r4, r2, lsr #16
 80a649e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80a64a2:	b29b      	uxth	r3, r3
 80a64a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80a64a8:	45c8      	cmp	r8, r9
 80a64aa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a64ae:	468e      	mov	lr, r1
 80a64b0:	f845 2b04 	str.w	r2, [r5], #4
 80a64b4:	d8e7      	bhi.n	80a6486 <__mdiff+0x5c>
 80a64b6:	45be      	cmp	lr, r7
 80a64b8:	d20e      	bcs.n	80a64d8 <__mdiff+0xae>
 80a64ba:	f85e 1b04 	ldr.w	r1, [lr], #4
 80a64be:	b28a      	uxth	r2, r1
 80a64c0:	4462      	add	r2, ip
 80a64c2:	1413      	asrs	r3, r2, #16
 80a64c4:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 80a64c8:	b292      	uxth	r2, r2
 80a64ca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80a64ce:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80a64d2:	f845 2b04 	str.w	r2, [r5], #4
 80a64d6:	e7ee      	b.n	80a64b6 <__mdiff+0x8c>
 80a64d8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80a64dc:	b90b      	cbnz	r3, 80a64e2 <__mdiff+0xb8>
 80a64de:	3e01      	subs	r6, #1
 80a64e0:	e7fa      	b.n	80a64d8 <__mdiff+0xae>
 80a64e2:	6106      	str	r6, [r0, #16]
 80a64e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a64e8 <__ulp>:
 80a64e8:	4b10      	ldr	r3, [pc, #64]	; (80a652c <__ulp+0x44>)
 80a64ea:	400b      	ands	r3, r1
 80a64ec:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80a64f0:	2b00      	cmp	r3, #0
 80a64f2:	dd02      	ble.n	80a64fa <__ulp+0x12>
 80a64f4:	2000      	movs	r0, #0
 80a64f6:	4619      	mov	r1, r3
 80a64f8:	4770      	bx	lr
 80a64fa:	425b      	negs	r3, r3
 80a64fc:	151b      	asrs	r3, r3, #20
 80a64fe:	2b13      	cmp	r3, #19
 80a6500:	f04f 0000 	mov.w	r0, #0
 80a6504:	f04f 0100 	mov.w	r1, #0
 80a6508:	dc04      	bgt.n	80a6514 <__ulp+0x2c>
 80a650a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80a650e:	fa42 f103 	asr.w	r1, r2, r3
 80a6512:	4770      	bx	lr
 80a6514:	3b14      	subs	r3, #20
 80a6516:	2b1e      	cmp	r3, #30
 80a6518:	f04f 0201 	mov.w	r2, #1
 80a651c:	bfce      	itee	gt
 80a651e:	4613      	movgt	r3, r2
 80a6520:	f1c3 031f 	rsble	r3, r3, #31
 80a6524:	fa02 f303 	lslle.w	r3, r2, r3
 80a6528:	4618      	mov	r0, r3
 80a652a:	4770      	bx	lr
 80a652c:	7ff00000 	.word	0x7ff00000

080a6530 <__b2d>:
 80a6530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a6532:	6905      	ldr	r5, [r0, #16]
 80a6534:	f100 0614 	add.w	r6, r0, #20
 80a6538:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 80a653c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80a6540:	1f2f      	subs	r7, r5, #4
 80a6542:	4620      	mov	r0, r4
 80a6544:	f7ff fdcf 	bl	80a60e6 <__hi0bits>
 80a6548:	f1c0 0320 	rsb	r3, r0, #32
 80a654c:	280a      	cmp	r0, #10
 80a654e:	600b      	str	r3, [r1, #0]
 80a6550:	dc14      	bgt.n	80a657c <__b2d+0x4c>
 80a6552:	f1c0 0e0b 	rsb	lr, r0, #11
 80a6556:	fa24 f10e 	lsr.w	r1, r4, lr
 80a655a:	42be      	cmp	r6, r7
 80a655c:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 80a6560:	bf34      	ite	cc
 80a6562:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80a6566:	2100      	movcs	r1, #0
 80a6568:	3015      	adds	r0, #21
 80a656a:	fa04 f000 	lsl.w	r0, r4, r0
 80a656e:	fa21 f10e 	lsr.w	r1, r1, lr
 80a6572:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80a6576:	ea40 0201 	orr.w	r2, r0, r1
 80a657a:	e023      	b.n	80a65c4 <__b2d+0x94>
 80a657c:	42be      	cmp	r6, r7
 80a657e:	bf3a      	itte	cc
 80a6580:	f1a5 0708 	subcc.w	r7, r5, #8
 80a6584:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80a6588:	2100      	movcs	r1, #0
 80a658a:	380b      	subs	r0, #11
 80a658c:	d015      	beq.n	80a65ba <__b2d+0x8a>
 80a658e:	4084      	lsls	r4, r0
 80a6590:	f1c0 0520 	rsb	r5, r0, #32
 80a6594:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80a6598:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80a659c:	42b7      	cmp	r7, r6
 80a659e:	fa21 fe05 	lsr.w	lr, r1, r5
 80a65a2:	ea44 030e 	orr.w	r3, r4, lr
 80a65a6:	bf8c      	ite	hi
 80a65a8:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 80a65ac:	2400      	movls	r4, #0
 80a65ae:	fa01 f000 	lsl.w	r0, r1, r0
 80a65b2:	40ec      	lsrs	r4, r5
 80a65b4:	ea40 0204 	orr.w	r2, r0, r4
 80a65b8:	e004      	b.n	80a65c4 <__b2d+0x94>
 80a65ba:	460a      	mov	r2, r1
 80a65bc:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80a65c0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80a65c4:	4610      	mov	r0, r2
 80a65c6:	4619      	mov	r1, r3
 80a65c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a65ca <__d2b>:
 80a65ca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a65ce:	461c      	mov	r4, r3
 80a65d0:	2101      	movs	r1, #1
 80a65d2:	4690      	mov	r8, r2
 80a65d4:	9e08      	ldr	r6, [sp, #32]
 80a65d6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80a65d8:	f7ff fcc0 	bl	80a5f5c <_Balloc>
 80a65dc:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80a65e0:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80a65e4:	4607      	mov	r7, r0
 80a65e6:	b10c      	cbz	r4, 80a65ec <__d2b+0x22>
 80a65e8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80a65ec:	9201      	str	r2, [sp, #4]
 80a65ee:	f1b8 0f00 	cmp.w	r8, #0
 80a65f2:	d019      	beq.n	80a6628 <__d2b+0x5e>
 80a65f4:	a802      	add	r0, sp, #8
 80a65f6:	f840 8d08 	str.w	r8, [r0, #-8]!
 80a65fa:	f7ff fd94 	bl	80a6126 <__lo0bits>
 80a65fe:	9b00      	ldr	r3, [sp, #0]
 80a6600:	b148      	cbz	r0, 80a6616 <__d2b+0x4c>
 80a6602:	9a01      	ldr	r2, [sp, #4]
 80a6604:	f1c0 0120 	rsb	r1, r0, #32
 80a6608:	fa02 f101 	lsl.w	r1, r2, r1
 80a660c:	430b      	orrs	r3, r1
 80a660e:	40c2      	lsrs	r2, r0
 80a6610:	617b      	str	r3, [r7, #20]
 80a6612:	9201      	str	r2, [sp, #4]
 80a6614:	e000      	b.n	80a6618 <__d2b+0x4e>
 80a6616:	617b      	str	r3, [r7, #20]
 80a6618:	9b01      	ldr	r3, [sp, #4]
 80a661a:	2b00      	cmp	r3, #0
 80a661c:	bf14      	ite	ne
 80a661e:	2102      	movne	r1, #2
 80a6620:	2101      	moveq	r1, #1
 80a6622:	61bb      	str	r3, [r7, #24]
 80a6624:	6139      	str	r1, [r7, #16]
 80a6626:	e007      	b.n	80a6638 <__d2b+0x6e>
 80a6628:	a801      	add	r0, sp, #4
 80a662a:	f7ff fd7c 	bl	80a6126 <__lo0bits>
 80a662e:	9b01      	ldr	r3, [sp, #4]
 80a6630:	2101      	movs	r1, #1
 80a6632:	617b      	str	r3, [r7, #20]
 80a6634:	6139      	str	r1, [r7, #16]
 80a6636:	3020      	adds	r0, #32
 80a6638:	b134      	cbz	r4, 80a6648 <__d2b+0x7e>
 80a663a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80a663e:	4404      	add	r4, r0
 80a6640:	6034      	str	r4, [r6, #0]
 80a6642:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80a6646:	e009      	b.n	80a665c <__d2b+0x92>
 80a6648:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80a664c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80a6650:	6030      	str	r0, [r6, #0]
 80a6652:	6918      	ldr	r0, [r3, #16]
 80a6654:	f7ff fd47 	bl	80a60e6 <__hi0bits>
 80a6658:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80a665c:	6028      	str	r0, [r5, #0]
 80a665e:	4638      	mov	r0, r7
 80a6660:	b002      	add	sp, #8
 80a6662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a6666 <__ratio>:
 80a6666:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80a666a:	4688      	mov	r8, r1
 80a666c:	4669      	mov	r1, sp
 80a666e:	4681      	mov	r9, r0
 80a6670:	f7ff ff5e 	bl	80a6530 <__b2d>
 80a6674:	460d      	mov	r5, r1
 80a6676:	4604      	mov	r4, r0
 80a6678:	a901      	add	r1, sp, #4
 80a667a:	4640      	mov	r0, r8
 80a667c:	f7ff ff58 	bl	80a6530 <__b2d>
 80a6680:	460f      	mov	r7, r1
 80a6682:	4606      	mov	r6, r0
 80a6684:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80a6688:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80a668c:	4620      	mov	r0, r4
 80a668e:	1a9a      	subs	r2, r3, r2
 80a6690:	e89d 000a 	ldmia.w	sp, {r1, r3}
 80a6694:	1ac9      	subs	r1, r1, r3
 80a6696:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 80a669a:	2b00      	cmp	r3, #0
 80a669c:	bfcc      	ite	gt
 80a669e:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 80a66a2:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 80a66a6:	4632      	mov	r2, r6
 80a66a8:	463b      	mov	r3, r7
 80a66aa:	4629      	mov	r1, r5
 80a66ac:	f7fc ffda 	bl	80a3664 <__aeabi_ddiv>
 80a66b0:	b003      	add	sp, #12
 80a66b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080a66b6 <__copybits>:
 80a66b6:	3901      	subs	r1, #1
 80a66b8:	b510      	push	{r4, lr}
 80a66ba:	1149      	asrs	r1, r1, #5
 80a66bc:	6914      	ldr	r4, [r2, #16]
 80a66be:	3101      	adds	r1, #1
 80a66c0:	f102 0314 	add.w	r3, r2, #20
 80a66c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80a66c8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80a66cc:	42a3      	cmp	r3, r4
 80a66ce:	4602      	mov	r2, r0
 80a66d0:	d204      	bcs.n	80a66dc <__copybits+0x26>
 80a66d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80a66d6:	f840 2b04 	str.w	r2, [r0], #4
 80a66da:	e7f7      	b.n	80a66cc <__copybits+0x16>
 80a66dc:	2300      	movs	r3, #0
 80a66de:	428a      	cmp	r2, r1
 80a66e0:	d202      	bcs.n	80a66e8 <__copybits+0x32>
 80a66e2:	f842 3b04 	str.w	r3, [r2], #4
 80a66e6:	e7fa      	b.n	80a66de <__copybits+0x28>
 80a66e8:	bd10      	pop	{r4, pc}

080a66ea <__any_on>:
 80a66ea:	f100 0214 	add.w	r2, r0, #20
 80a66ee:	6900      	ldr	r0, [r0, #16]
 80a66f0:	114b      	asrs	r3, r1, #5
 80a66f2:	4298      	cmp	r0, r3
 80a66f4:	b510      	push	{r4, lr}
 80a66f6:	db0c      	blt.n	80a6712 <__any_on+0x28>
 80a66f8:	dd0c      	ble.n	80a6714 <__any_on+0x2a>
 80a66fa:	f011 011f 	ands.w	r1, r1, #31
 80a66fe:	d009      	beq.n	80a6714 <__any_on+0x2a>
 80a6700:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80a6704:	fa24 f001 	lsr.w	r0, r4, r1
 80a6708:	fa00 f101 	lsl.w	r1, r0, r1
 80a670c:	428c      	cmp	r4, r1
 80a670e:	d10c      	bne.n	80a672a <__any_on+0x40>
 80a6710:	e000      	b.n	80a6714 <__any_on+0x2a>
 80a6712:	4603      	mov	r3, r0
 80a6714:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a6718:	4293      	cmp	r3, r2
 80a671a:	d904      	bls.n	80a6726 <__any_on+0x3c>
 80a671c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80a6720:	2900      	cmp	r1, #0
 80a6722:	d0f9      	beq.n	80a6718 <__any_on+0x2e>
 80a6724:	e001      	b.n	80a672a <__any_on+0x40>
 80a6726:	2000      	movs	r0, #0
 80a6728:	bd10      	pop	{r4, pc}
 80a672a:	2001      	movs	r0, #1
 80a672c:	bd10      	pop	{r4, pc}

080a672e <_calloc_r>:
 80a672e:	b538      	push	{r3, r4, r5, lr}
 80a6730:	fb02 f401 	mul.w	r4, r2, r1
 80a6734:	4621      	mov	r1, r4
 80a6736:	f7fb f971 	bl	80a1a1c <_malloc_r>
 80a673a:	4605      	mov	r5, r0
 80a673c:	b118      	cbz	r0, 80a6746 <_calloc_r+0x18>
 80a673e:	4622      	mov	r2, r4
 80a6740:	2100      	movs	r1, #0
 80a6742:	f7fd fdfc 	bl	80a433e <memset>
 80a6746:	4628      	mov	r0, r5
 80a6748:	bd38      	pop	{r3, r4, r5, pc}
	...

080a674c <nanf>:
 80a674c:	4800      	ldr	r0, [pc, #0]	; (80a6750 <nanf+0x4>)
 80a674e:	4770      	bx	lr
 80a6750:	7fc00000 	.word	0x7fc00000

080a6754 <__env_lock>:
 80a6754:	4770      	bx	lr

080a6756 <__env_unlock>:
 80a6756:	4770      	bx	lr

080a6758 <dynalib_user>:
 80a6758:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a6768:	0000 0000 7245 6f72 0072 7325 203a 6425     ....Error.%s: %d
 80a6778:	2500 4669 4f00 7475 6f20 2066 6152 676e     .%iF.Out of Rang
 80a6788:	3a65 2520 0064 227b 6f4d 7369 7574 6572     e: %d.{"Moisture
 80a6798:	3a22 6925 202c 5722 7461 7265 6e69 2267     ":%i, "Watering"
 80a67a8:	253a 2c69 2220 656b 3179 3a22 2522 2273     :%i, "key1":"%s"
 80a67b8:	202c 5322 696f 546c 6d65 2270 253a 7d69     , "SoilTemp":%i}
 80a67c8:	4100 7571 4d61 7361 6574 5f72 6f68 6b6f     .AquaMaster_hook
 80a67d8:	5300 6e65 6973 676e 5300 6174 6574 4500     .Sensing.State.E
 80a67e8:	7272 726f 2d20 4d20 6165 7573 6572 656d     rror - Measureme
 80a67f8:	746e 2073 6146 6c69 6465 5600 7265 2079     nts Failed.Very 
 80a6808:	6557 0074 6157 6574 6c72 676f 6567 0064     Wet.Waterlogged.
 80a6818:	6f4e 2074 654e 6465 6465 5200 7065 726f     Not Needed.Repor
 80a6828:	6974 676e 2d20 5420 6f6f 5720 7465 5300     ting - Too Wet.S
 80a6838:	6863 6465 6c75 6e69 0067 6552 6f70 7472     cheduling.Report
 80a6848:	6e69 2067 202d 6f4e 2074 6954 656d 4100     ing - Not Time.A
 80a6858:	726c 6165 7964 5720 7461 7265 6465 5420     lready Watered T
 80a6868:	6968 2073 6550 6972 646f 5200 7065 726f     his Period.Repor
 80a6878:	6974 676e 2d20 4120 726c 6165 7964 5720     ting - Already W
 80a6888:	7461 7265 6465 5200 7065 726f 6974 676e     atered.Reporting
 80a6898:	2d20 4e20 746f 4520 616e 6c62 6465 4600      - Not Enabled.F
 80a68a8:	726f 6365 7361 6974 676e 4800 6165 7976     orecasting.Heavy
 80a68b8:	5220 6961 206e 7845 6570 7463 6465 5200      Rain Expected.R
 80a68c8:	7065 726f 6974 676e 2d20 5220 6961 206e     eporting - Rain 
 80a68d8:	6f46 6572 6163 7473 6465 5300 6174 7472     Forecasted.Start
 80a68e8:	6465 5720 7461 7265 6e69 0067 6552 6f70     ed Watering.Repo
 80a68f8:	7472 6e69 2067 202d 6f44 656e 5720 7461     rting - Done Wat
 80a6908:	7265 6e69 0067 6449 656c 4500 7272 726f     ering.Idle.Error
 80a6918:	2d20 5220 7065 726f 6974 676e 5420 6d69      - Reporting Tim
 80a6928:	6465 4f20 7475 4500 6378 7365 2073 6552     ed Out.Excess Re
 80a6938:	6573 7374 2d20 3120 6820 756f 2072 7262     sets - 1 hour br
 80a6948:	6165 006b 6552 6573 7474 6e69 2067 6e69     eak.Resetting in
 80a6958:	3320 2030 6573 0063 7525 252f 2075 7525      30 sec.%u/%u %u
 80a6968:	303a 0030 6f4e 4420 7461 0061 7141 6175     :00.No Data.Aqua
 80a6978:	614d 7473 7265 5300 6375 6563 7373 5300     Master.Success.S
 80a6988:	6f74 7070 6465 5720 7461 7265 6e69 2067     topped Watering 
 80a6998:	202d 7355 7265 4920 696e 6974 7461 6465     - User Initiated
 80a69a8:	5700 7461 7265 6e69 2067 6e45 6261 656c     .Watering Enable
 80a69b8:	0064 7274 6575 5700 7461 7265 6e69 2067     d.true.Watering 
 80a69c8:	6944 6173 6c62 6465 6600 6c61 6573 5400     Disabled.false.T
 80a69d8:	6d69 2065 6f7a 656e 6f20 6666 6573 2074     ime zone offset 
 80a69e8:	6925 5300 7465 5620 7265 6f62 6573 4d20     %i.Set Verbose M
 80a69f8:	646f 0065 6c43 6165 6572 2064 6556 6272     ode.Cleared Verb
 80a6a08:	736f 2065 6f4d 6564 5300 6174 7472 7720     ose Mode.Start w
 80a6a18:	7461 7265 7420 6d69 2065 6573 2074 6f74     ater time set to
 80a6a28:	2520 0069 7453 706f 7720 7461 7265 7420      %i.Stop water t
 80a6a38:	6d69 2065 6573 2074 6f74 2520 0069 6152     ime set to %i.Ra
 80a6a48:	6e69 7420 7268 7365 6f68 646c 7320 7465     in threshold set
 80a6a58:	7420 206f 3125 322e 0066 3125 322e 2266      to %1.2f.%1.2f"
 80a6a68:	4300 6e6f 6f74 006c 6957 6946 7453 6572     .Contol.WiFiStre
 80a6a78:	676e 6874 4d00 696f 7473 7275 0065 6552     ngth.Moisture.Re
 80a6a88:	656c 7361 0065 614c 7473 6157 6574 0072     lease.LastWater.
 80a6a98:	6152 6e69 6346 7473 5300 696f 546c 6d65     RainFcst.SoilTem
 80a6aa8:	0070 7453 7261 5774 7461 7265 5300 6f74     p.StartWater.Sto
 80a6ab8:	5770 7461 7265 5200 6961 4c6e 6d69 7469     pWater.RainLimit
 80a6ac8:	5300 6174 7472 532d 6f74 0070 654d 7361     .Start-Stop.Meas
 80a6ad8:	7275 0065 6553 2d74 6954 656d 6f7a 656e     ure.Set-Timezone
 80a6ae8:	5300 7465 532d 6174 7472 5300 7465 532d     .Set-Start.Set-S
 80a6af8:	6f74 0070 6553 2d74 6152 6e69 5300 7465     top.Set-Rain.Set
 80a6b08:	562d 7265 6f62 6573 3000 372e 0034 6556     -Verbose.0.74.Ve
 80a6b18:	7972 4420 7972 4e00 726f 616d 006c 6f50     ry Dry.Normal.Po
 80a6b28:	726f 4c00 776f 4d00 6465 7569 006d 6556     or.Low.Medium.Ve
 80a6b38:	7972 4720 6f6f 0064 7247 6165 0074 0000     ry Good.Great...

080a6b48 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a6b50:	1a71 080a 1a77 080a 1a9f 080a 1a83 080a     q...w...........
 80a6b60:	1a73 080a                                   s...

080a6b64 <_ZTV7TwoWire>:
	...
 80a6b6c:	2011 080a 205b 080a 2033 080a 2013 080a     . ..[ ..3 ... ..
 80a6b7c:	203b 080a 2043 080a 204b 080a 2053 080a     ; ..C ..K ..S ..

080a6b8c <_ZTV9IPAddress>:
	...
 80a6b94:	2137 080a 2129 080a 212b 080a 6e6c 6600     7!..)!..+!..ln.f
 80a6ba4:	006e 6f63 6564 6400 7465 6961 006c 0a0d     n.code.detail...
 80a6bb4:	2500 3130 7530 0020 205d 2c00 0020 2928     .%010u .] ., .()
 80a6bc4:	203a 2000 005b 6f63 6564 3d20 0020 6564     : . [.code = .de
 80a6bd4:	6174 6c69 2073 203d 6200 7561 0064 6553     tails = .baud.Se
 80a6be4:	6972 6c61 5500 4253 6553 6972 6c61 0031     rial.USBSerial1.
 80a6bf4:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
 80a6c04:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
 80a6c14:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
 80a6c24:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
 80a6c34:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
 80a6c44:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
 80a6c54:	7070 6e00 6e6f 0065 7274 6361 0065 6e69     pp.none.trace.in
 80a6c64:	6f66 7700 7261 006e 7265 6f72 0072 6170     fo.warn.error.pa
 80a6c74:	696e 0063 6c61 006c                         nic.all.

080a6c7c <_ZTVN5spark12NetworkClassE>:
	...
 80a6c84:	21fd 080a 2207 080a 2211 080a 221b 080a     .!..."..."..."..
 80a6c94:	2225 080a 2231 080a 223d 080a 2249 080a     %"..1"..="..I"..
 80a6ca4:	2251 080a 225b 080a 2265 080a               Q"..["..e"..

080a6cb0 <_ZTV8SPIClass>:
	...
 80a6cb8:	239d 080a 239f 080a 2b25 3330 3a64 3025     .#...#..%+03d:%0
 80a6cc8:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
 80a6cd8:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

080a6ce8 <_ZTV11USARTSerial>:
	...
 80a6cf0:	26ed 080a 2711 080a 271d 080a 22c9 080a     .&...'...'..."..
 80a6d00:	26f9 080a 2705 080a 26ff 080a 270b 080a     .&...'...&...'..
 80a6d10:	26ef 080a 26f3 080a                         .&...&..

080a6d18 <_ZTV9USBSerial>:
	...
 80a6d20:	27c5 080a 2809 080a 27e3 080a 22c9 080a     .'...(...'..."..
 80a6d30:	27dd 080a 27c7 080a 27cf 080a 2803 080a     .'...'...'...(..
 80a6d40:	27d7 080a 27c1 080a                         .'...'..

080a6d48 <_ZTVN5spark9WiFiClassE>:
	...
 80a6d50:	2a2b 080a 2a21 080a 2a17 080a 297d 080a     +*..!*...*..})..
 80a6d60:	2a0b 080a 29ff 080a 29f3 080a 29eb 080a     .*...)...)...)..
 80a6d70:	29e1 080a 29d7 080a 2993 080a               .)...)...)..

080a6d7c <_ZTV10WiFiSignal>:
	...
 80a6d84:	292d 080a 2987 080a 292f 080a 2a65 080a     -)...)../)..e*..
 80a6d94:	2935 080a 2a35 080a 2959 080a               5)..5*..Y)..

080a6da0 <day_name.4723>:
 80a6da0:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 80a6db0:	6972 6153 4a74                                   riSat

080a6db5 <mon_name.4724>:
 80a6db5:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 80a6dc5:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 80a6dd5:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 80a6de5:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 80a6df5:	6425 000a                                   %d..

080a6df9 <_ctype_>:
 80a6df9:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a6e09:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a6e19:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a6e29:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a6e39:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a6e49:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a6e59:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a6e69:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a6e79:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080a6efc <__sf_fake_stdin>:
	...

080a6f1c <__sf_fake_stdout>:
	...

080a6f3c <__sf_fake_stderr>:
	...
 80a6f5c:	0043 4f50 4953 0058 002e 0000               C.POSIX.....

080a6f68 <__month_lengths>:
 80a6f68:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a6f78:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a6f88:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a6f98:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80a6fa8:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a6fb8:	001e 0000 001f 0000 001e 0000 001f 0000     ................

080a6fc8 <fpi.5342>:
 80a6fc8:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 80a6fd8:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.

080a6fe8 <fpinan.5378>:
 80a6fe8:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

080a7000 <tinytens>:
 80a7000:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 80a7010:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 80a7020:	6f43 64ac 0628 1168 5a54 4700 544d 2500     Co.d(.h.TZ.GMT.%
 80a7030:	3031 5e5b 2d30 2c39 2d2b 255d 006e 254d     10[^0-9,+-]%n.M%
 80a7040:	7568 6e25 252e 7568 6e25 252e 7568 6e25     hu%n.%hu%n.%hu%n
 80a7050:	2f00 6825 2575 3a6e 6825 2575 3a6e 6825     ./%hu%n:%hu%n:%h
 80a7060:	2575 006e 0000 0000                         u%n.....

080a7068 <__mprec_tens>:
 80a7068:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 80a7078:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 80a7088:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 80a7098:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 80a70a8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 80a70b8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 80a70c8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 80a70d8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 80a70e8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 80a70f8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 80a7108:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 80a7118:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 80a7128:	9db4 79d9 7843 44ea                         ...yCx.D

080a7130 <__mprec_bigtens>:
 80a7130:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 80a7140:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 80a7150:	bf3c 7f73 4fdd 7515                         <.s..O.u

080a7158 <p05.5385>:
 80a7158:	0005 0000 0019 0000 007d 0000               ........}...

080a7164 <link_const_variable_data_end>:
 80a7164:	080a1329 	.word	0x080a1329
 80a7168:	080a14bb 	.word	0x080a14bb
 80a716c:	080a21ed 	.word	0x080a21ed
 80a7170:	080a22b5 	.word	0x080a22b5
 80a7174:	080a2381 	.word	0x080a2381
 80a7178:	080a2529 	.word	0x080a2529
 80a717c:	080a26d9 	.word	0x080a26d9
 80a7180:	080a2b3d 	.word	0x080a2b3d
 80a7184:	080a2d8d 	.word	0x080a2d8d
 80a7188:	080a2dbd 	.word	0x080a2dbd
 80a718c:	080a2e11 	.word	0x080a2e11
 80a7190:	080a2ed5 	.word	0x080a2ed5
 80a7194:	080a2f59 	.word	0x080a2f59
 80a7198:	080a2fdd 	.word	0x080a2fdd

080a719c <link_constructors_end>:
 80a719c:	00000000 	.word	0x00000000
